<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\template.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\template.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Mon Jul 30 11:17:31 2018
<BR><P>
<H3>Maximum Stack Usage =       1440 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
dfs_uffs_unlink &rArr; uffs_rmdir &rArr; uffs_DeleteObject &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[271]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[25]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">DebugMon_Handler</a><BR>
 <LI><a href="#[3a]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">ADC_IRQHandler</a><BR>
 <LI><a href="#[559]">_rt_scheduler_stack_check</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1cd]">list_thread</a><BR>
 <LI><a href="#[599]">copydir</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[599]">copydir</a><BR>
 <LI><a href="#[63c]">netconn_drain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[63c]">netconn_drain</a><BR>
 <LI><a href="#[74d]">proc_expr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[747]">proc_assign_expr</a><BR>
 <LI><a href="#[74f]">proc_param_list</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[747]">proc_assign_expr</a><BR>
 <LI><a href="#[74b]">proc_unary_expr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[749]">proc_cast_expr</a><BR>
 <LI><a href="#[749]">proc_cast_expr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[749]">proc_cast_expr</a><BR>
 <LI><a href="#[747]">proc_assign_expr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[747]">proc_assign_expr</a><BR>
 <LI><a href="#[693]">finsh_type_check</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[693]">finsh_type_check</a><BR>
 <LI><a href="#[690]">finsh_compile</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[690]">finsh_compile</a><BR>
 <LI><a href="#[716]">lwip_sendto</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36f]">lwip_send</a><BR>
 <LI><a href="#[73f]">print_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[585]">print_value</a><BR>
 <LI><a href="#[73c]">print_array</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[585]">print_value</a><BR>
 <LI><a href="#[4cb]">Scan_Files</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4cb]">Scan_Files</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3a]">ADC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[22]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3c]">CAN1_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3d]">CAN1_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3e]">CAN1_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3b]">CAN1_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[68]">CAN2_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[69]">CAN2_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6a]">CAN2_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[67]">CAN2_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[96]">CheckCoUpdata</a> from uservariable.o(i.CheckCoUpdata) referenced from uservariable.o(i.SoeCoInfoInit)
 <LI><a href="#[93]">CheckSoeUpdata</a> from uservariable.o(i.CheckSoeUpdata) referenced from uservariable.o(i.SoeCoInfoInit)
 <LI><a href="#[99]">CheckUlogUpdata</a> from uservariable.o(i.CheckUlogUpdata) referenced from uservariable.o(i.SoeCoInfoInit)
 <LI><a href="#[10]">CmdSendWinFun</a> from guidisplay.o(i.CmdSendWinFun) referenced 2 times from guidisplay.o(.data)
 <LI><a href="#[92]">DBWriteFEVENT</a> from common_data.o(i.DBWriteFEVENT) referenced from main_protect_ctrl.o(i.MainProtectCtrlInit)
 <LI><a href="#[91]">DBWriteSOE</a> from common_data.o(i.DBWriteSOE) referenced from main_protect_ctrl.o(i.MainProtectCtrlInit)
 <LI><a href="#[76]">DCMI_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[33]">DMA1_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[34]">DMA1_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[35]">DMA1_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[36]">DMA1_Stream3_IRQHandler</a> from drv_spi.o(i.DMA1_Stream3_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[37]">DMA1_Stream4_IRQHandler</a> from drv_spi.o(i.DMA1_Stream4_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[38]">DMA1_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[57]">DMA1_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[81]">DMA2D_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[60]">DMA2_Stream0_IRQHandler</a> from drv_spi.o(i.DMA2_Stream0_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[61]">DMA2_Stream1_IRQHandler</a> from drv_spi.o(i.DMA2_Stream1_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[62]">DMA2_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[63]">DMA2_Stream3_IRQHandler</a> from drv_spi.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[64]">DMA2_Stream4_IRQHandler</a> from drv_spi.o(i.DMA2_Stream4_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6c]">DMA2_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6d]">DMA2_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6e]">DMA2_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[18]">DZModfiyFun</a> from guidisplay.o(i.DZModfiyFun) referenced 2 times from guidisplay.o(.data)
 <LI><a href="#[25]">DebugMon_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[16]">DingzhiWinFun</a> from guidisplay.o(i.DingzhiWinFun) referenced 18 times from guidisplay.o(.data)
 <LI><a href="#[8c]">Dzhi0ModfiySave</a> from uservariable.o(i.Dzhi0ModfiySave) referenced from uservariable.o(i.Dzhi0DisplayInit)
 <LI><a href="#[8d]">Dzhi1ModfiySave</a> from uservariable.o(i.Dzhi1ModfiySave) referenced from uservariable.o(i.Dzhi1DisplayInit)
 <LI><a href="#[1b]">DzhiChangeFun</a> from guidisplay.o(i.DzhiChangeFun) referenced 2 times from guidisplay.o(.data)
 <LI><a href="#[65]">ETH_IRQHandler</a> from drv_eth.o(i.ETH_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[66]">ETH_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2e]">EXTI0_IRQHandler</a> from drv_gpio.o(i.EXTI0_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[50]">EXTI15_10_IRQHandler</a> from drv_gpio.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2f]">EXTI1_IRQHandler</a> from drv_gpio.o(i.EXTI1_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[30]">EXTI2_IRQHandler</a> from drv_gpio.o(i.EXTI2_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[31]">EXTI3_IRQHandler</a> from drv_gpio.o(i.EXTI3_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[32]">EXTI4_IRQHandler</a> from drv_gpio.o(i.EXTI4_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3f]">EXTI9_5_IRQHandler</a> from drv_gpio.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2c]">FLASH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[19b]">FLASH_OB_Init</a> from drv_timer.o(i.FLASH_OB_Init) referenced from drv_timer.o(.rti_fn.1)
 <LI><a href="#[58]">FMC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[78]">FPU_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[15]">FaultEventFun</a> from guidisplay.o(i.FaultEventFun) referenced 2 times from guidisplay.o(.data)
 <LI><a href="#[115]">GPIOA_CLK_ENABLE</a> from drv_gpio.o(i.GPIOA_CLK_ENABLE) referenced 16 times from drv_gpio.o(.constdata)
 <LI><a href="#[117]">GPIOB_CLK_ENABLE</a> from drv_gpio.o(i.GPIOB_CLK_ENABLE) referenced 16 times from drv_gpio.o(.constdata)
 <LI><a href="#[113]">GPIOC_CLK_ENABLE</a> from drv_gpio.o(i.GPIOC_CLK_ENABLE) referenced 16 times from drv_gpio.o(.constdata)
 <LI><a href="#[119]">GPIOD_CLK_ENABLE</a> from drv_gpio.o(i.GPIOD_CLK_ENABLE) referenced 16 times from drv_gpio.o(.constdata)
 <LI><a href="#[111]">GPIOE_CLK_ENABLE</a> from drv_gpio.o(i.GPIOE_CLK_ENABLE) referenced 16 times from drv_gpio.o(.constdata)
 <LI><a href="#[114]">GPIOF_CLK_ENABLE</a> from drv_gpio.o(i.GPIOF_CLK_ENABLE) referenced 16 times from drv_gpio.o(.constdata)
 <LI><a href="#[118]">GPIOG_CLK_ENABLE</a> from drv_gpio.o(i.GPIOG_CLK_ENABLE) referenced 16 times from drv_gpio.o(.constdata)
 <LI><a href="#[116]">GPIOH_CLK_ENABLE</a> from drv_gpio.o(i.GPIOH_CLK_ENABLE) referenced 14 times from drv_gpio.o(.constdata)
 <LI><a href="#[112]">GPIOI_CLK_ENABLE</a> from drv_gpio.o(i.GPIOI_CLK_ENABLE) referenced 12 times from drv_gpio.o(.constdata)
 <LI><a href="#[97]">GetCoNoContent</a> from uservariable.o(i.GetCoNoContent) referenced from uservariable.o(i.SoeCoInfoInit)
 <LI><a href="#[98]">GetCoNum</a> from uservariable.o(i.GetCoNum) referenced from uservariable.o(i.SoeCoInfoInit)
 <LI><a href="#[94]">GetSoeNoContent</a> from uservariable.o(i.GetSoeNoContent) referenced from uservariable.o(i.SoeCoInfoInit)
 <LI><a href="#[95]">GetSoeNum</a> from uservariable.o(i.GetSoeNum) referenced from uservariable.o(i.SoeCoInfoInit)
 <LI><a href="#[9a]">GetUlogNoContent</a> from uservariable.o(i.GetUlogNoContent) referenced from uservariable.o(i.SoeCoInfoInit)
 <LI><a href="#[9b]">GetUlogNum</a> from uservariable.o(i.GetUlogNum) referenced from uservariable.o(i.SoeCoInfoInit)
 <LI><a href="#[77]">HASH_RNG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[20]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[8e]">Hmi101ThreadEntity</a> from gui_101_cmd.o(i.Hmi101ThreadEntity) referenced from gui_101_cmd.o(i.Hmi101Init)
 <LI><a href="#[8f]">HmiCmdSendFun</a> from uservariable.o(i.HmiCmdSendFun) referenced from uservariable.o(i.HmiCmdSendInit)
 <LI><a href="#[d]">HomeWindowFun</a> from guidisplay.o(i.HomeWindowFun) referenced 2 times from guidisplay.o(.data)
 <LI><a href="#[48]">I2C1_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[47]">I2C1_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4a]">I2C2_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[49]">I2C2_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[71]">I2C3_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[70]">I2C3_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[80]">LTDC_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7f]">LTDC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[21]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[9c]">MenuControlFun</a> from guidisplay.o(i.MenuControlFun) referenced from guidisplay.o(i.UserMenuInit)
 <LI><a href="#[e]">MenuWindowFun</a> from guidisplay.o(i.MenuWindowFun) referenced 2 times from guidisplay.o(.data)
 <LI><a href="#[19]">MessageFun</a> from guidisplay.o(i.MessageFun) referenced 2 times from guidisplay.o(.data)
 <LI><a href="#[1f]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[160]">OP_add_byte</a> from finsh_ops.o(i.OP_add_byte) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[162]">OP_add_dword</a> from finsh_ops.o(i.OP_add_dword) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[161]">OP_add_word</a> from finsh_ops.o(i.OP_add_word) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[16f]">OP_and_byte</a> from finsh_ops.o(i.OP_and_byte) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[171]">OP_and_dword</a> from finsh_ops.o(i.OP_and_dword) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[170]">OP_and_word</a> from finsh_ops.o(i.OP_and_word) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[178]">OP_bw_byte</a> from finsh_ops.o(i.OP_bw_byte) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[17a]">OP_bw_dword</a> from finsh_ops.o(i.OP_bw_dword) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[179]">OP_bw_word</a> from finsh_ops.o(i.OP_bw_word) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[18b]">OP_call</a> from finsh_ops.o(i.OP_call) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[166]">OP_div_byte</a> from finsh_ops.o(i.OP_div_byte) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[168]">OP_div_dword</a> from finsh_ops.o(i.OP_div_dword) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[167]">OP_div_word</a> from finsh_ops.o(i.OP_div_word) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[181]">OP_ld_byte</a> from finsh_ops.o(i.OP_ld_byte) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[183]">OP_ld_dword</a> from finsh_ops.o(i.OP_ld_dword) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[184]">OP_ld_value_byte</a> from finsh_ops.o(i.OP_ld_value_byte) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[18c]">OP_ld_value_byte_stack</a> from finsh_ops.o(i.OP_ld_value_byte_stack) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[186]">OP_ld_value_dword</a> from finsh_ops.o(i.OP_ld_value_dword) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[18e]">OP_ld_value_dword_stack</a> from finsh_ops.o(i.OP_ld_value_dword_stack) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[185]">OP_ld_value_word</a> from finsh_ops.o(i.OP_ld_value_word) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[18d]">OP_ld_value_word_stack</a> from finsh_ops.o(i.OP_ld_value_word_stack) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[182]">OP_ld_word</a> from finsh_ops.o(i.OP_ld_word) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[169]">OP_mod_byte</a> from finsh_ops.o(i.OP_mod_byte) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[16b]">OP_mod_dword</a> from finsh_ops.o(i.OP_mod_dword) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[16a]">OP_mod_word</a> from finsh_ops.o(i.OP_mod_word) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[16c]">OP_mul_byte</a> from finsh_ops.o(i.OP_mul_byte) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[16e]">OP_mul_dword</a> from finsh_ops.o(i.OP_mul_dword) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[16d]">OP_mul_word</a> from finsh_ops.o(i.OP_mul_word) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[15f]">OP_no_op</a> from finsh_ops.o(i.OP_no_op) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[172]">OP_or_byte</a> from finsh_ops.o(i.OP_or_byte) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[174]">OP_or_dword</a> from finsh_ops.o(i.OP_or_dword) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[173]">OP_or_word</a> from finsh_ops.o(i.OP_or_word) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[18a]">OP_pop</a> from finsh_ops.o(i.OP_pop) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[17b]">OP_shl_byte</a> from finsh_ops.o(i.OP_shl_byte) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[17d]">OP_shl_dword</a> from finsh_ops.o(i.OP_shl_dword) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[17c]">OP_shl_word</a> from finsh_ops.o(i.OP_shl_word) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[17e]">OP_shr_byte</a> from finsh_ops.o(i.OP_shr_byte) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[180]">OP_shr_dword</a> from finsh_ops.o(i.OP_shr_dword) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[17f]">OP_shr_word</a> from finsh_ops.o(i.OP_shr_word) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[187]">OP_st_byte</a> from finsh_ops.o(i.OP_st_byte) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[189]">OP_st_dword</a> from finsh_ops.o(i.OP_st_dword) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[188]">OP_st_word</a> from finsh_ops.o(i.OP_st_word) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[163]">OP_sub_byte</a> from finsh_ops.o(i.OP_sub_byte) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[165]">OP_sub_dword</a> from finsh_ops.o(i.OP_sub_dword) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[164]">OP_sub_word</a> from finsh_ops.o(i.OP_sub_word) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[175]">OP_xor_byte</a> from finsh_ops.o(i.OP_xor_byte) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[177]">OP_xor_dword</a> from finsh_ops.o(i.OP_xor_dword) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[176]">OP_xor_word</a> from finsh_ops.o(i.OP_xor_word) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[6b]">OTG_FS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[52]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[73]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[72]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[75]">OTG_HS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[74]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[29]">PVD_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1a]">PassWordFun</a> from guidisplay.o(i.PassWordFun) referenced 2 times from guidisplay.o(.data)
 <LI><a href="#[12]">PasswordModfiyWinFun</a> from guidisplay.o(i.PasswordModfiyWinFun) referenced 2 times from guidisplay.o(.data)
 <LI><a href="#[26]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2d]">RCC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[51]">RTC_Alarm_IRQHandler</a> from drv_rtc.o(i.RTC_Alarm_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2b]">RTC_WKUP_IRQHandler</a> from drv_rtc.o(i.RTC_WKUP_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1e]">Reset_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7e]">SAI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[59]">SDIO_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4b]">SPI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4c]">SPI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5b]">SPI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7b]">SPI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7c]">SPI5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7d]">SPI6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[24]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[14]">SoeCoWinFun</a> from guidisplay.o(i.SoeCoWinFun) referenced 6 times from guidisplay.o(.data)
 <LI><a href="#[27]">SysTick_Handler</a> from board.o(i.SysTick_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[82]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[2a]">TAMP_STAMP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[40]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[43]">TIM1_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[42]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[41]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[44]">TIM2_IRQHandler</a> from drv_timer.o(i.TIM2_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[45]">TIM3_IRQHandler</a> from drv_timer.o(i.TIM3_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[46]">TIM4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5a]">TIM5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5e]">TIM6_DAC_IRQHandler</a> from drv_timer.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5f]">TIM7_IRQHandler</a> from drv_timer.o(i.TIM7_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[53]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[56]">TIM8_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[55]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[54]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[f]">TimeModfiyFun</a> from guidisplay.o(i.TimeModfiyFun) referenced 2 times from guidisplay.o(.data)
 <LI><a href="#[107]">Timer1Timeout</a> from gui_common.o(i.Timer1Timeout) referenced from gui_common.o(i.time_static_init)
 <LI><a href="#[5c]">UART4_IRQHandler</a> from drv_usart.o(i.UART4_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5d]">UART5_IRQHandler</a> from drv_usart.o(i.UART5_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[79]">UART7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7a]">UART8_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4d]">USART1_IRQHandler</a> from drv_usart.o(i.USART1_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4e]">USART2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4f]">USART3_IRQHandler</a> from drv_usart.o(i.USART3_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6f]">USART6_IRQHandler</a> from drv_usart.o(i.USART6_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[23]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[11]">VersionWinFun</a> from guidisplay.o(i.VersionWinFun) referenced 2 times from guidisplay.o(.data)
 <LI><a href="#[28]">WWDG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[17]">YaoceWinFun</a> from guidisplay.o(i.YaoceWinFun) referenced 6 times from guidisplay.o(.data)
 <LI><a href="#[13]">YaoxinFun</a> from guidisplay.o(i.YaoxinFun) referenced 2 times from guidisplay.o(.data)
 <LI><a href="#[1dc]">__main</a> from __main.o(!!!main) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[f9]">__wqueue_default_wake</a> from waitqueue.o(i.__wqueue_default_wake) referenced from waitqueue.o(i.rt_wqueue_wait)
 <LI><a href="#[b2]">_device_init</a> from dfs_uffs.o(i._device_init) referenced from dfs_uffs.o(i.init_uffs_fs)
 <LI><a href="#[b3]">_device_release</a> from dfs_uffs.o(i._device_release) referenced from dfs_uffs.o(i.init_uffs_fs)
 <LI><a href="#[86]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[121]">_iic_get_scl</a> from drv_iic.o(i._iic_get_scl) referenced from drv_iic.o(.constdata)
 <LI><a href="#[120]">_iic_get_sda</a> from drv_iic.o(i._iic_get_sda) referenced from drv_iic.o(.constdata)
 <LI><a href="#[11f]">_iic_set_scl</a> from drv_iic.o(i._iic_set_scl) referenced from drv_iic.o(.constdata)
 <LI><a href="#[11e]">_iic_set_sda</a> from drv_iic.o(i._iic_set_sda) referenced from drv_iic.o(.constdata)
 <LI><a href="#[122]">_iic_udelay</a> from drv_iic.o(i._iic_udelay) referenced from drv_iic.o(.constdata)
 <LI><a href="#[10e]">_pin_attach_irq</a> from drv_gpio.o(i._pin_attach_irq) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[c9]">_pin_control</a> from pin.o(i._pin_control) referenced from pin.o(i.rt_device_pin_register)
 <LI><a href="#[10f]">_pin_dettach_irq</a> from drv_gpio.o(i._pin_dettach_irq) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[110]">_pin_irq_enable</a> from drv_gpio.o(i._pin_irq_enable) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[10b]">_pin_mode</a> from drv_gpio.o(i._pin_mode) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[10d]">_pin_read</a> from drv_gpio.o(i._pin_read) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[c7]">_pin_read</a> from pin.o(i._pin_read) referenced from pin.o(i.rt_device_pin_register)
 <LI><a href="#[10c]">_pin_write</a> from drv_gpio.o(i._pin_write) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[c8]">_pin_write</a> from pin.o(i._pin_write) referenced from pin.o(i.rt_device_pin_register)
 <LI><a href="#[87]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[da]">_rtc_control</a> from drv_rtc.o(i._rtc_control) referenced from drv_rtc.o(i.rt_hw_rtc_register)
 <LI><a href="#[d8]">_rtc_open</a> from drv_rtc.o(i._rtc_open) referenced from drv_rtc.o(i.rt_hw_rtc_register)
 <LI><a href="#[d9]">_rtc_read</a> from drv_rtc.o(i._rtc_read) referenced from drv_rtc.o(i.rt_hw_rtc_register)
 <LI><a href="#[89]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[88]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[84]">_snputc</a> from _snputc.o(.text) referenced 2 times from vsnprintf.o(.text)
 <LI><a href="#[f3]">_spi_bus_device_control</a> from spi_dev.o(i._spi_bus_device_control) referenced from spi_dev.o(i.rt_spi_bus_device_init)
 <LI><a href="#[f1]">_spi_bus_device_read</a> from spi_dev.o(i._spi_bus_device_read) referenced from spi_dev.o(i.rt_spi_bus_device_init)
 <LI><a href="#[f2]">_spi_bus_device_write</a> from spi_dev.o(i._spi_bus_device_write) referenced from spi_dev.o(i.rt_spi_bus_device_init)
 <LI><a href="#[f6]">_spidev_device_control</a> from spi_dev.o(i._spidev_device_control) referenced from spi_dev.o(i.rt_spidev_device_init)
 <LI><a href="#[f4]">_spidev_device_read</a> from spi_dev.o(i._spidev_device_read) referenced from spi_dev.o(i.rt_spidev_device_init)
 <LI><a href="#[f5]">_spidev_device_write</a> from spi_dev.o(i._spidev_device_write) referenced from spi_dev.o(i.rt_spidev_device_init)
 <LI><a href="#[85]">_sputc</a> from _sputc.o(.text) referenced 2 times from __2sprintf.o(.text)
 <LI><a href="#[11a]">_usart_configure</a> from drv_usart.o(i._usart_configure) referenced from drv_usart.o(.constdata)
 <LI><a href="#[11b]">_usart_control</a> from drv_usart.o(i._usart_control) referenced from drv_usart.o(.constdata)
 <LI><a href="#[11d]">_usart_getc</a> from drv_usart.o(i._usart_getc) referenced from drv_usart.o(.constdata)
 <LI><a href="#[11c]">_usart_putc</a> from drv_usart.o(i._usart_putc) referenced from drv_usart.o(.constdata)
 <LI><a href="#[a6]">accept_function</a> from api_msg.o(i.accept_function) referenced from api_msg.o(i.do_listen)
 <LI><a href="#[9f]">arp_timer</a> from timers.o(i.arp_timer) referenced from timers.o(i.arp_timer)
 <LI><a href="#[9f]">arp_timer</a> from timers.o(i.arp_timer) referenced from timers.o(i.sys_timeouts_init)
 <LI><a href="#[193]">calculate_init</a> from calculator.o(i.calculate_init) referenced from calculator.o(.rti_fn.1)
 <LI><a href="#[1be]">cat</a> from dfs_file.o(i.cat) referenced from dfs_file.o(FSymTab)
 <LI><a href="#[1c3]">chdir</a> from dfs_posix.o(i.chdir) referenced from dfs_posix.o(FSymTab)
 <LI><a href="#[5]">configure</a> from drv_spi.o(i.configure) referenced 2 times from drv_spi.o(.data)
 <LI><a href="#[1bf]">copy</a> from dfs_file.o(i.copy) referenced from dfs_file.o(FSymTab)
 <LI><a href="#[1c1]">df</a> from dfs_fs.o(i.df) referenced from dfs_fs.o(FSymTab)
 <LI><a href="#[124]">dfs_device_fs_close</a> from devfs.o(i.dfs_device_fs_close) referenced from devfs.o(.constdata)
 <LI><a href="#[128]">dfs_device_fs_getdents</a> from devfs.o(i.dfs_device_fs_getdents) referenced from devfs.o(.constdata)
 <LI><a href="#[125]">dfs_device_fs_ioctl</a> from devfs.o(i.dfs_device_fs_ioctl) referenced from devfs.o(.constdata)
 <LI><a href="#[12a]">dfs_device_fs_mount</a> from devfs.o(i.dfs_device_fs_mount) referenced from devfs.o(.constdata)
 <LI><a href="#[123]">dfs_device_fs_open</a> from devfs.o(i.dfs_device_fs_open) referenced from devfs.o(.constdata)
 <LI><a href="#[129]">dfs_device_fs_poll</a> from devfs.o(i.dfs_device_fs_poll) referenced from devfs.o(.constdata)
 <LI><a href="#[126]">dfs_device_fs_read</a> from devfs.o(i.dfs_device_fs_read) referenced from devfs.o(.constdata)
 <LI><a href="#[12b]">dfs_device_fs_stat</a> from devfs.o(i.dfs_device_fs_stat) referenced from devfs.o(.constdata)
 <LI><a href="#[127]">dfs_device_fs_write</a> from devfs.o(i.dfs_device_fs_write) referenced from devfs.o(.constdata)
 <LI><a href="#[12d]">dfs_elm_close</a> from dfs_elm.o(i.dfs_elm_close) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[131]">dfs_elm_flush</a> from dfs_elm.o(i.dfs_elm_flush) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[133]">dfs_elm_getdents</a> from dfs_elm.o(i.dfs_elm_getdents) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[12e]">dfs_elm_ioctl</a> from dfs_elm.o(i.dfs_elm_ioctl) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[132]">dfs_elm_lseek</a> from dfs_elm.o(i.dfs_elm_lseek) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[136]">dfs_elm_mkfs</a> from dfs_elm.o(i.dfs_elm_mkfs) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[134]">dfs_elm_mount</a> from dfs_elm.o(i.dfs_elm_mount) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[12c]">dfs_elm_open</a> from dfs_elm.o(i.dfs_elm_open) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[12f]">dfs_elm_read</a> from dfs_elm.o(i.dfs_elm_read) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[13a]">dfs_elm_rename</a> from dfs_elm.o(i.dfs_elm_rename) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[139]">dfs_elm_stat</a> from dfs_elm.o(i.dfs_elm_stat) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[137]">dfs_elm_statfs</a> from dfs_elm.o(i.dfs_elm_statfs) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[138]">dfs_elm_unlink</a> from dfs_elm.o(i.dfs_elm_unlink) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[135]">dfs_elm_unmount</a> from dfs_elm.o(i.dfs_elm_unmount) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[130]">dfs_elm_write</a> from dfs_elm.o(i.dfs_elm_write) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[1a1]">dfs_init</a> from dfs.o(i.dfs_init) referenced from dfs.o(.rti_fn.2)
 <LI><a href="#[13c]">dfs_romfs_close</a> from dfs_romfs.o(i.dfs_romfs_close) referenced from dfs_romfs.o(.constdata)
 <LI><a href="#[140]">dfs_romfs_getdents</a> from dfs_romfs.o(i.dfs_romfs_getdents) referenced from dfs_romfs.o(.constdata)
 <LI><a href="#[1ad]">dfs_romfs_init</a> from dfs_romfs.o(i.dfs_romfs_init) referenced from dfs_romfs.o(.rti_fn.4)
 <LI><a href="#[13d]">dfs_romfs_ioctl</a> from dfs_romfs.o(i.dfs_romfs_ioctl) referenced from dfs_romfs.o(.constdata)
 <LI><a href="#[13f]">dfs_romfs_lseek</a> from dfs_romfs.o(i.dfs_romfs_lseek) referenced from dfs_romfs.o(.constdata)
 <LI><a href="#[141]">dfs_romfs_mount</a> from dfs_romfs.o(i.dfs_romfs_mount) referenced from dfs_romfs.o(.constdata)
 <LI><a href="#[13b]">dfs_romfs_open</a> from dfs_romfs.o(i.dfs_romfs_open) referenced from dfs_romfs.o(.constdata)
 <LI><a href="#[13e]">dfs_romfs_read</a> from dfs_romfs.o(i.dfs_romfs_read) referenced from dfs_romfs.o(.constdata)
 <LI><a href="#[143]">dfs_romfs_stat</a> from dfs_romfs.o(i.dfs_romfs_stat) referenced from dfs_romfs.o(.constdata)
 <LI><a href="#[142]">dfs_romfs_unmount</a> from dfs_romfs.o(i.dfs_romfs_unmount) referenced from dfs_romfs.o(.constdata)
 <LI><a href="#[1c4]">dfs_test</a> from dfs_posix.o(i.dfs_test) referenced 2 times from dfs_posix.o(FSymTab)
 <LI><a href="#[145]">dfs_uffs_close</a> from dfs_uffs.o(i.dfs_uffs_close) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[149]">dfs_uffs_flush</a> from dfs_uffs.o(i.dfs_uffs_flush) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[14b]">dfs_uffs_getdents</a> from dfs_uffs.o(i.dfs_uffs_getdents) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[1ae]">dfs_uffs_init</a> from dfs_uffs.o(i.dfs_uffs_init) referenced from dfs_uffs.o(.rti_fn.4)
 <LI><a href="#[146]">dfs_uffs_ioctl</a> from dfs_uffs.o(i.dfs_uffs_ioctl) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[14e]">dfs_uffs_mkfs</a> from dfs_uffs.o(i.dfs_uffs_mkfs) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[14c]">dfs_uffs_mount</a> from dfs_uffs.o(i.dfs_uffs_mount) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[144]">dfs_uffs_open</a> from dfs_uffs.o(i.dfs_uffs_open) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[147]">dfs_uffs_read</a> from dfs_uffs.o(i.dfs_uffs_read) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[152]">dfs_uffs_rename</a> from dfs_uffs.o(i.dfs_uffs_rename) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[14a]">dfs_uffs_seek</a> from dfs_uffs.o(i.dfs_uffs_seek) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[151]">dfs_uffs_stat</a> from dfs_uffs.o(i.dfs_uffs_stat) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[14f]">dfs_uffs_statfs</a> from dfs_uffs.o(i.dfs_uffs_statfs) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[150]">dfs_uffs_unlink</a> from dfs_uffs.o(i.dfs_uffs_unlink) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[14d]">dfs_uffs_unmount</a> from dfs_uffs.o(i.dfs_uffs_unmount) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[148]">dfs_uffs_write</a> from dfs_uffs.o(i.dfs_uffs_write) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[a1]">dns_recv</a> from dns.o(i.dns_recv) referenced from dns.o(i.dns_init)
 <LI><a href="#[a2]">dns_timer</a> from timers.o(i.dns_timer) referenced from timers.o(i.dns_timer)
 <LI><a href="#[a2]">dns_timer</a> from timers.o(i.dns_timer) referenced from timers.o(i.sys_timeouts_init)
 <LI><a href="#[b8]">do_bind</a> from api_msg.o(i.do_bind) referenced from api_lib.o(i.netconn_bind)
 <LI><a href="#[b9]">do_delconn</a> from api_msg.o(i.do_delconn) referenced from api_lib.o(i.netconn_delete)
 <LI><a href="#[ba]">do_getaddr</a> from api_msg.o(i.do_getaddr) referenced from api_lib.o(i.netconn_getaddr)
 <LI><a href="#[bb]">do_listen</a> from api_msg.o(i.do_listen) referenced from api_lib.o(i.netconn_listen_with_backlog)
 <LI><a href="#[bf]">do_netifapi_netif_add</a> from netifapi.o(i.do_netifapi_netif_add) referenced from netifapi.o(i.netifapi_netif_add)
 <LI><a href="#[c0]">do_netifapi_netif_common</a> from netifapi.o(i.do_netifapi_netif_common) referenced from netifapi.o(i.netifapi_netif_common)
 <LI><a href="#[c1]">do_netifapi_netif_set_addr</a> from netifapi.o(i.do_netifapi_netif_set_addr) referenced from netifapi.o(i.netifapi_netif_set_addr)
 <LI><a href="#[bc]">do_newconn</a> from api_msg.o(i.do_newconn) referenced from api_lib.o(i.netconn_new_with_proto_and_callback)
 <LI><a href="#[b7]">do_recv</a> from api_msg.o(i.do_recv) referenced from api_lib.o(i.netconn_accept)
 <LI><a href="#[b7]">do_recv</a> from api_msg.o(i.do_recv) referenced from api_lib.o(i.netconn_recv_data)
 <LI><a href="#[b7]">do_recv</a> from api_msg.o(i.do_recv) referenced from api_lib.o(i.netconn_recved)
 <LI><a href="#[bd]">do_send</a> from api_msg.o(i.do_send) referenced from api_lib.o(i.netconn_send)
 <LI><a href="#[be]">do_write</a> from api_msg.o(i.do_write) referenced from api_lib.o(i.netconn_write_partly)
 <LI><a href="#[1ac]">elm_init</a> from dfs_elm.o(i.elm_init) referenced from dfs_elm.o(.rti_fn.4)
 <LI><a href="#[a5]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.do_close_internal)
 <LI><a href="#[a5]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[ab]">eth_netif_device_init</a> from ethernetif.o(i.eth_netif_device_init) referenced from ethernetif.o(i.eth_device_init_with_flag)
 <LI><a href="#[ae]">eth_rx_thread_entry</a> from ethernetif.o(i.eth_rx_thread_entry) referenced from ethernetif.o(i.eth_system_device_init)
 <LI><a href="#[1a2]">eth_system_device_init</a> from ethernetif.o(i.eth_system_device_init) referenced from ethernetif.o(.rti_fn.2)
 <LI><a href="#[af]">eth_tx_thread_entry</a> from ethernetif.o(i.eth_tx_thread_entry) referenced from ethernetif.o(i.eth_system_device_init)
 <LI><a href="#[a8]">etharp_output</a> from etharp.o(i.etharp_output) referenced from ethernetif.o(i.eth_device_init_with_flag)
 <LI><a href="#[a9]">ethernetif_linkoutput</a> from ethernetif.o(i.ethernetif_linkoutput) referenced from ethernetif.o(i.eth_device_init_with_flag)
 <LI><a href="#[b4]">event_callback</a> from sockets.o(i.event_callback) referenced from sockets.o(i.lwip_accept)
 <LI><a href="#[b4]">event_callback</a> from sockets.o(i.event_callback) referenced from sockets.o(i.lwip_socket)
 <LI><a href="#[1b7]">finsh_system_init</a> from shell.o(i.finsh_system_init) referenced from shell.o(.rti_fn.6)
 <LI><a href="#[b0]">finsh_thread_entry</a> from shell.o(i.finsh_thread_entry) referenced from shell.o(i.finsh_system_init)
 <LI><a href="#[1d]">free</a> from mem_std.o(i.free) referenced 4 times from s2j.o(.data)
 <LI><a href="#[1d]">free</a> from mem_std.o(i.free) referenced from cjson.o(i.cJSON_InitHooks)
 <LI><a href="#[1d]">free</a> from mem_std.o(i.free) referenced from s2j.o(i.s2j_init)
 <LI><a href="#[1cb]">hello</a> from cmd.o(i.hello) referenced from cmd.o(FSymTab)
 <LI><a href="#[158]">i2c_bit_xfer</a> from i2c-bit-ops.o(i.i2c_bit_xfer) referenced from i2c-bit-ops.o(.constdata)
 <LI><a href="#[eb]">i2c_bus_device_control</a> from i2c_dev.o(i.i2c_bus_device_control) referenced from i2c_dev.o(i.rt_i2c_bus_device_device_init)
 <LI><a href="#[e9]">i2c_bus_device_read</a> from i2c_dev.o(i.i2c_bus_device_read) referenced from i2c_dev.o(i.rt_i2c_bus_device_device_init)
 <LI><a href="#[ea]">i2c_bus_device_write</a> from i2c_dev.o(i.i2c_bus_device_write) referenced from i2c_dev.o(i.rt_i2c_bus_device_device_init)
 <LI><a href="#[8a]">isspace</a> from isspace.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[1b0]">libc_system_init</a> from libc.o(i.libc_system_init) referenced from libc.o(.rti_fn.4)
 <LI><a href="#[1d7]">list</a> from cmd.o(i.list) referenced from cmd.o(FSymTab)
 <LI><a href="#[1c5]">list_date</a> from rtc.o(i.list_date) referenced from rtc.o(FSymTab)
 <LI><a href="#[1d6]">list_device</a> from cmd.o(i.list_device) referenced from cmd.o(FSymTab)
 <LI><a href="#[1cf]">list_event</a> from cmd.o(i.list_event) referenced from cmd.o(FSymTab)
 <LI><a href="#[1da]">list_if</a> from ethernetif.o(i.list_if) referenced from ethernetif.o(FSymTab)
 <LI><a href="#[1d1]">list_mailbox</a> from cmd.o(i.list_mailbox) referenced from cmd.o(FSymTab)
 <LI><a href="#[1bb]">list_mem</a> from mem.o(i.list_mem) referenced from mem.o(FSymTab)
 <LI><a href="#[1d3]">list_memheap</a> from cmd.o(i.list_memheap) referenced from cmd.o(FSymTab)
 <LI><a href="#[1d4]">list_mempool</a> from cmd.o(i.list_mempool) referenced from cmd.o(FSymTab)
 <LI><a href="#[1d2]">list_msgqueue</a> from cmd.o(i.list_msgqueue) referenced from cmd.o(FSymTab)
 <LI><a href="#[1d0]">list_mutex</a> from cmd.o(i.list_mutex) referenced from cmd.o(FSymTab)
 <LI><a href="#[1ce]">list_sem</a> from cmd.o(i.list_sem) referenced from cmd.o(FSymTab)
 <LI><a href="#[1db]">list_tcps</a> from ethernetif.o(i.list_tcps) referenced from ethernetif.o(FSymTab)
 <LI><a href="#[1cd]">list_thread</a> from cmd.o(i.list_thread) referenced from cmd.o(FSymTab)
 <LI><a href="#[1d5]">list_timer</a> from cmd.o(i.list_timer) referenced from cmd.o(FSymTab)
 <LI><a href="#[1bc]">ls</a> from dfs_file.o(i.ls) referenced from dfs_file.o(FSymTab)
 <LI><a href="#[b5]">lwip_setsockopt_internal</a> from sockets.o(i.lwip_setsockopt_internal) referenced from sockets.o(i.lwip_setsockopt)
 <LI><a href="#[1b4]">lwip_system_init</a> from sys_arch.o(i.lwip_system_init) referenced from sys_arch.o(.rti_fn.5)
 <LI><a href="#[1c]">malloc</a> from mem_std.o(i.malloc) referenced 4 times from s2j.o(.data)
 <LI><a href="#[1c]">malloc</a> from mem_std.o(i.malloc) referenced from cjson.o(i.cJSON_InitHooks)
 <LI><a href="#[1c]">malloc</a> from mem_std.o(i.malloc) referenced from s2j.o(i.s2j_init)
 <LI><a href="#[1c2]">mkdir</a> from dfs_posix.o(i.mkdir) referenced from dfs_posix.o(FSymTab)
 <LI><a href="#[1c0]">mkfs</a> from dfs_fs.o(i.mkfs) referenced from dfs_fs.o(FSymTab)
 <LI><a href="#[157]">nand_erase_block</a> from uffs_nandif.o(i.nand_erase_block) referenced from uffs_nandif.o(.constdata)
 <LI><a href="#[153]">nand_init_flash</a> from uffs_nandif.o(i.nand_init_flash) referenced from uffs_nandif.o(.constdata)
 <LI><a href="#[155]">nand_read_page</a> from uffs_nandif.o(i.nand_read_page) referenced from uffs_nandif.o(.constdata)
 <LI><a href="#[154]">nand_release_flash</a> from uffs_nandif.o(i.nand_release_flash) referenced from uffs_nandif.o(.constdata)
 <LI><a href="#[156]">nand_write_page</a> from uffs_nandif.o(i.nand_write_page) referenced from uffs_nandif.o(.constdata)
 <LI><a href="#[106]">netif_device_init</a> from sys_arch.o(i.netif_device_init) referenced from sys_arch.o(i.tcpip_init_done_callback)
 <LI><a href="#[ad]">netif_set_link_down</a> from netif.o(i.netif_set_link_down) referenced from ethernetif.o(i.eth_rx_thread_entry)
 <LI><a href="#[ac]">netif_set_link_up</a> from netif.o(i.netif_set_link_up) referenced from ethernetif.o(i.eth_rx_thread_entry)
 <LI><a href="#[c2]">pbuf_free_ooseq_callback</a> from pbuf.o(i.pbuf_free_ooseq_callback) referenced from pbuf.o(i.pbuf_pool_is_empty)
 <LI><a href="#[a4]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.do_close_internal)
 <LI><a href="#[a4]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[c3]">recv_raw</a> from api_msg.o(i.recv_raw) referenced from api_msg.o(i.pcb_new)
 <LI><a href="#[fb]">recv_tcp</a> from api_msg.o(i.recv_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[c4]">recv_udp</a> from api_msg.o(i.recv_udp) referenced from api_msg.o(i.pcb_new)
 <LI><a href="#[ff]">retry_delay_100us</a> from spi_flash_sfud.o(i.retry_delay_100us) referenced from spi_flash_sfud.o(i.sfud_spi_port_init)
 <LI><a href="#[1bd]">rm</a> from dfs_file.o(i.rm) referenced from dfs_file.o(FSymTab)
 <LI><a href="#[a0]">rt_cal_thread_entry</a> from multi_thread.o(i.rt_cal_thread_entry) referenced from multi_thread.o(i.cal_thread_start)
 <LI><a href="#[a7]">rt_dp83848_tcpserver_thread_entry</a> from tcp_server.o(i.rt_dp83848_tcpserver_thread_entry) referenced from multi_thread.o(i.dp83848_2404_thread_start)
 <LI><a href="#[e2]">rt_enter_critical</a> from scheduler.o(i.rt_enter_critical) referenced from drv_w5500.o(i.rt_hw_w5500_init)
 <LI><a href="#[e1]">rt_exit_critical</a> from scheduler.o(i.rt_exit_critical) referenced from drv_w5500.o(i.rt_hw_w5500_init)
 <LI><a href="#[ed]">rt_free</a> from mem.o(i.rt_free) referenced from jsonfileoperation.o(i.rt_s2j_init)
 <LI><a href="#[b1]">rt_ftuidle_thread_entry</a> from multi_thread.o(i.rt_ftuidle_thread_entry) referenced from multi_thread.o(i.ftuidle_thread_start)
 <LI><a href="#[8b]">rt_hw_ad7616_irq_service</a> from drv_ad7616.o(i.rt_hw_ad7616_irq_service) referenced from drv_ad7616.o(i.AD7616_GPIO_Init)
 <LI><a href="#[1b3]">rt_hw_adc_init</a> from drv_ad7616.o(i.rt_hw_adc_init) referenced from drv_ad7616.o(.rti_fn.5)
 <LI><a href="#[1a6]">rt_hw_di_init</a> from drv_di.o(i.rt_hw_di_init) referenced from drv_di.o(.rti_fn.3)
 <LI><a href="#[1a7]">rt_hw_do_init</a> from drv_do.o(i.rt_hw_do_init) referenced from drv_do.o(.rti_fn.3)
 <LI><a href="#[90]">rt_hw_do_operate</a> from drv_do.o(i.rt_hw_do_operate) referenced from main_protect_ctrl.o(i.MainProtectCtrlInit)
 <LI><a href="#[1a3]">rt_hw_eth_init</a> from drv_eth.o(i.rt_hw_eth_init) referenced from drv_eth.o(.rti_fn.3)
 <LI><a href="#[d4]">rt_hw_fm25vxx_control</a> from drv_fm25vxx.o(i.rt_hw_fm25vxx_control) referenced from drv_fm25vxx.o(i.rt_hw_fm25vxx_init)
 <LI><a href="#[19e]">rt_hw_fm25vxx_init</a> from drv_fm25vxx.o(i.rt_hw_fm25vxx_init) referenced from drv_fm25vxx.o(.rti_fn.2)
 <LI><a href="#[d2]">rt_hw_fm25vxx_read</a> from drv_fm25vxx.o(i.rt_hw_fm25vxx_read) referenced from drv_fm25vxx.o(i.rt_hw_fm25vxx_init)
 <LI><a href="#[1b9]">rt_hw_fm25vxx_test</a> from drv_fm25vxx.o(i.rt_hw_fm25vxx_test) referenced 2 times from drv_fm25vxx.o(FSymTab)
 <LI><a href="#[d3]">rt_hw_fm25vxx_write</a> from drv_fm25vxx.o(i.rt_hw_fm25vxx_write) referenced from drv_fm25vxx.o(i.rt_hw_fm25vxx_init)
 <LI><a href="#[19a]">rt_hw_frequency_timer_int</a> from drv_timer.o(i.rt_hw_frequency_timer_int) referenced from drv_timer.o(.rti_fn.1)
 <LI><a href="#[1a4]">rt_hw_iic_init</a> from drv_iic.o(i.rt_hw_iic_init) referenced from drv_iic.o(.rti_fn.3)
 <LI><a href="#[1a8]">rt_hw_led_init</a> from drv_led.o(i.rt_hw_led_init) referenced from drv_led.o(.rti_fn.3)
 <LI><a href="#[197]">rt_hw_mpu_init</a> from drv_mpu.o(i.rt_hw_mpu_init) referenced from drv_mpu.o(.rti_fn.1)
 <LI><a href="#[1ba]">rt_hw_pcf8563_calender_test</a> from drv_pcf8563.o(i.rt_hw_pcf8563_calender_test) referenced 2 times from drv_pcf8563.o(FSymTab)
 <LI><a href="#[d7]">rt_hw_pcf8563_control</a> from drv_pcf8563.o(i.rt_hw_pcf8563_control) referenced from drv_pcf8563.o(i.rt_hw_pcf8563_init)
 <LI><a href="#[1a9]">rt_hw_pcf8563_init</a> from drv_pcf8563.o(i.rt_hw_pcf8563_init) referenced from drv_pcf8563.o(.rti_fn.3)
 <LI><a href="#[d5]">rt_hw_pcf8563_read</a> from drv_pcf8563.o(i.rt_hw_pcf8563_read) referenced from drv_pcf8563.o(i.rt_hw_pcf8563_init)
 <LI><a href="#[d6]">rt_hw_pcf8563_write</a> from drv_pcf8563.o(i.rt_hw_pcf8563_write) referenced from drv_pcf8563.o(i.rt_hw_pcf8563_init)
 <LI><a href="#[194]">rt_hw_pin_init</a> from drv_gpio.o(i.rt_hw_pin_init) referenced from drv_gpio.o(.rti_fn.1)
 <LI><a href="#[1b6]">rt_hw_rtc_init</a> from drv_rtc.o(i.rt_hw_rtc_init) referenced from drv_rtc.o(.rti_fn.6)
 <LI><a href="#[196]">rt_hw_sdram_init</a> from drv_sdram.o(i.rt_hw_sdram_init) referenced from drv_sdram.o(.rti_fn.1)
 <LI><a href="#[199]">rt_hw_spi2_init</a> from drv_w5500.o(i.rt_hw_spi2_init) referenced from drv_w5500.o(.rti_fn.1)
 <LI><a href="#[1a5]">rt_hw_spi4_init</a> from drv_spi_flash.o(i.rt_hw_spi4_init) referenced from drv_spi_flash.o(.rti_fn.3)
 <LI><a href="#[198]">rt_hw_spi5_init</a> from drv_fm25vxx.o(i.rt_hw_spi5_init) referenced from drv_fm25vxx.o(.rti_fn.1)
 <LI><a href="#[1ab]">rt_hw_spi_flash_with_sfud_init</a> from drv_spi_flash.o(i.rt_hw_spi_flash_with_sfud_init) referenced from drv_spi_flash.o(.rti_fn.4)
 <LI><a href="#[1b2]">rt_hw_tim1ms_init</a> from drv_timer.o(i.rt_hw_tim1ms_init) referenced from drv_timer.o(.rti_fn.5)
 <LI><a href="#[195]">rt_hw_usart_init</a> from drv_usart.o(i.rt_hw_usart_init) referenced from drv_usart.o(.rti_fn.1)
 <LI><a href="#[1b1]">rt_hw_w5500_init</a> from drv_w5500.o(i.rt_hw_w5500_init) referenced from drv_w5500.o(.rti_fn.5)
 <LI><a href="#[e7]">rt_hw_w5500_read</a> from drv_w5500.o(i.rt_hw_w5500_read) referenced from drv_w5500.o(i.rt_hw_w5500_spi_init)
 <LI><a href="#[19f]">rt_hw_w5500_spi_init</a> from drv_w5500.o(i.rt_hw_w5500_spi_init) referenced from drv_w5500.o(.rti_fn.2)
 <LI><a href="#[e8]">rt_hw_w5500_write</a> from drv_w5500.o(i.rt_hw_w5500_write) referenced from drv_w5500.o(i.rt_hw_w5500_spi_init)
 <LI><a href="#[1a0]">rt_hw_wdg_deal_init</a> from drv_wdg.o(i.rt_hw_wdg_deal_init) referenced from drv_wdg.o(.rti_fn.2)
 <LI><a href="#[1af]">rt_i2c_core_init</a> from i2c_core.o(i.rt_i2c_core_init) referenced from i2c_core.o(.rti_fn.4)
 <LI><a href="#[c6]">rt_init_thread_entry</a> from application.o(i.rt_init_thread_entry) referenced from application.o(i.rt_application_init)
 <LI><a href="#[1aa]">rt_multi_common_data_init</a> from common_data.o(i.rt_multi_common_data_init) referenced from common_data.o(.rti_fn.4)
 <LI><a href="#[191]">rt_multi_event_init</a> from multi_thread.o(i.rt_multi_event_init) referenced from multi_thread.o(.rti_fn.1)
 <LI><a href="#[192]">rt_multi_sem_init</a> from multi_thread.o(i.rt_multi_sem_init) referenced from multi_thread.o(.rti_fn.1)
 <LI><a href="#[1b5]">rt_multi_thread_start</a> from multi_thread.o(i.rt_multi_thread_start) referenced from multi_thread.o(.rti_fn.6)
 <LI><a href="#[1c8]">rt_pin_mode</a> from pin.o(i.rt_pin_mode) referenced from pin.o(FSymTab)
 <LI><a href="#[1ca]">rt_pin_read</a> from pin.o(i.rt_pin_read) referenced from pin.o(FSymTab)
 <LI><a href="#[1c9]">rt_pin_write</a> from pin.o(i.rt_pin_write) referenced from pin.o(FSymTab)
 <LI><a href="#[c5]">rt_protect_thread_entry</a> from multi_thread.o(i.rt_protect_thread_entry) referenced from multi_thread.o(i.protect_thread_start)
 <LI><a href="#[ec]">rt_s2j_malloc_fn</a> from jsonfileoperation.o(i.rt_s2j_malloc_fn) referenced from jsonfileoperation.o(i.rt_s2j_init)
 <LI><a href="#[dd]">rt_serial_close</a> from serial.o(i.rt_serial_close) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[e0]">rt_serial_control</a> from serial.o(i.rt_serial_control) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[db]">rt_serial_init</a> from serial.o(i.rt_serial_init) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[dc]">rt_serial_open</a> from serial.o(i.rt_serial_open) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[de]">rt_serial_read</a> from serial.o(i.rt_serial_read) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[df]">rt_serial_write</a> from serial.o(i.rt_serial_write) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[f0]">rt_sfud_control</a> from spi_flash_sfud.o(i.rt_sfud_control) referenced from spi_flash_sfud.o(i.rt_sfud_flash_probe)
 <LI><a href="#[ee]">rt_sfud_read</a> from spi_flash_sfud.o(i.rt_sfud_read) referenced from spi_flash_sfud.o(i.rt_sfud_flash_probe)
 <LI><a href="#[ef]">rt_sfud_write</a> from spi_flash_sfud.o(i.rt_sfud_write) referenced from spi_flash_sfud.o(i.rt_sfud_flash_probe)
 <LI><a href="#[100]">rt_slave101_thread_entry</a> from multi_thread.o(i.rt_slave101_thread_entry) referenced from multi_thread.o(i.slave101_thread_start)
 <LI><a href="#[101]">rt_slave104_thread_entry</a> from multi_thread.o(i.rt_slave104_thread_entry) referenced from multi_thread.o(i.slave104_thread_start)
 <LI><a href="#[cc]">rt_stm32_eth_close</a> from drv_eth.o(i.rt_stm32_eth_close) referenced from drv_eth.o(i.rt_hw_eth_init)
 <LI><a href="#[cf]">rt_stm32_eth_control</a> from drv_eth.o(i.rt_stm32_eth_control) referenced from drv_eth.o(i.rt_hw_eth_init)
 <LI><a href="#[ca]">rt_stm32_eth_init</a> from drv_eth.o(i.rt_stm32_eth_init) referenced from drv_eth.o(i.rt_hw_eth_init)
 <LI><a href="#[cb]">rt_stm32_eth_open</a> from drv_eth.o(i.rt_stm32_eth_open) referenced from drv_eth.o(i.rt_hw_eth_init)
 <LI><a href="#[cd]">rt_stm32_eth_read</a> from drv_eth.o(i.rt_stm32_eth_read) referenced from drv_eth.o(i.rt_hw_eth_init)
 <LI><a href="#[d0]">rt_stm32_eth_rx</a> from drv_eth.o(i.rt_stm32_eth_rx) referenced from drv_eth.o(i.rt_hw_eth_init)
 <LI><a href="#[d1]">rt_stm32_eth_tx</a> from drv_eth.o(i.rt_stm32_eth_tx) referenced from drv_eth.o(i.rt_hw_eth_init)
 <LI><a href="#[ce]">rt_stm32_eth_write</a> from drv_eth.o(i.rt_stm32_eth_write) referenced from drv_eth.o(i.rt_hw_eth_init)
 <LI><a href="#[9d]">rt_thread_exit</a> from thread.o(i.rt_thread_exit) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[f8]">rt_thread_idle_entry</a> from idle.o(i.rt_thread_idle_entry) referenced from idle.o(i.rt_thread_idle_init)
 <LI><a href="#[9e]">rt_thread_timeout</a> from thread.o(i.rt_thread_timeout) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[f7]">rt_thread_timer_entry</a> from timer.o(i.rt_thread_timer_entry) referenced from timer.o(i.rt_system_timer_thread_init)
 <LI><a href="#[10a]">rt_watch_thread_entry</a> from multi_thread.o(i.rt_watch_thread_entry) referenced from multi_thread.o(i.watch_thread_start)
 <LI><a href="#[19d]">rt_wave_init</a> from wave_recording.o(i.rt_wave_init) referenced from wave_recording.o(.rti_fn.2)
 <LI><a href="#[19c]">rti_board_end</a> from components.o(i.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[190]">rti_board_start</a> from components.o(i.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[1b8]">rti_end</a> from components.o(i.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[18f]">rti_start</a> from components.o(i.rti_start) referenced from components.o(.rti_fn.0)
 <LI><a href="#[a3]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.do_close_internal)
 <LI><a href="#[a3]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[15a]">serial_fops_close</a> from serial.o(i.serial_fops_close) referenced from serial.o(.constdata)
 <LI><a href="#[15b]">serial_fops_ioctl</a> from serial.o(i.serial_fops_ioctl) referenced from serial.o(.constdata)
 <LI><a href="#[159]">serial_fops_open</a> from serial.o(i.serial_fops_open) referenced from serial.o(.constdata)
 <LI><a href="#[15e]">serial_fops_poll</a> from serial.o(i.serial_fops_poll) referenced from serial.o(.constdata)
 <LI><a href="#[15c]">serial_fops_read</a> from serial.o(i.serial_fops_read) referenced from serial.o(.constdata)
 <LI><a href="#[fa]">serial_fops_rx_ind</a> from serial.o(i.serial_fops_rx_ind) referenced from serial.o(i.serial_fops_open)
 <LI><a href="#[15d]">serial_fops_write</a> from serial.o(i.serial_fops_write) referenced from serial.o(.constdata)
 <LI><a href="#[1c6]">set_date</a> from rtc.o(i.set_date) referenced from rtc.o(FSymTab)
 <LI><a href="#[1d9]">set_dns</a> from ethernetif.o(i.set_dns) referenced from ethernetif.o(FSymTab)
 <LI><a href="#[1d8]">set_if</a> from ethernetif.o(i.set_if) referenced from ethernetif.o(FSymTab)
 <LI><a href="#[1c7]">set_time</a> from rtc.o(i.set_time) referenced from rtc.o(FSymTab)
 <LI><a href="#[fd]">spi_lock</a> from spi_flash_sfud.o(i.spi_lock) referenced from spi_flash_sfud.o(i.sfud_spi_port_init)
 <LI><a href="#[fe]">spi_unlock</a> from spi_flash_sfud.o(i.spi_unlock) referenced from spi_flash_sfud.o(i.sfud_spi_port_init)
 <LI><a href="#[fc]">spi_write_read</a> from spi_flash_sfud.o(i.spi_write_read) referenced from spi_flash_sfud.o(i.sfud_spi_port_init)
 <LI><a href="#[109]">sys_free</a> from uffs_rtthread.o(i.sys_free) referenced from uffs_rtthread.o(i.uffs_MemSetupSystemAllocator)
 <LI><a href="#[108]">sys_malloc</a> from uffs_rtthread.o(i.sys_malloc) referenced from uffs_rtthread.o(i.uffs_MemSetupSystemAllocator)
 <LI><a href="#[103]">tcp_accept_null</a> from tcp.o(i.tcp_accept_null) referenced from tcp.o(i.tcp_listen_with_backlog)
 <LI><a href="#[102]">tcp_recv_null</a> from tcp.o(i.tcp_recv_null) referenced from tcp.o(i.tcp_alloc)
 <LI><a href="#[b6]">tcpip_init_done_callback</a> from sys_arch.o(i.tcpip_init_done_callback) referenced from sys_arch.o(i.lwip_system_init)
 <LI><a href="#[aa]">tcpip_input</a> from tcpip.o(i.tcpip_input) referenced from ethernetif.o(i.eth_device_init_with_flag)
 <LI><a href="#[aa]">tcpip_input</a> from tcpip.o(i.tcpip_input) referenced from sys_arch.o(i.tcpip_init_done_callback)
 <LI><a href="#[104]">tcpip_tcp_timer</a> from timers.o(i.tcpip_tcp_timer) referenced from timers.o(i.tcp_timer_needed)
 <LI><a href="#[104]">tcpip_tcp_timer</a> from timers.o(i.tcpip_tcp_timer) referenced from timers.o(i.tcpip_tcp_timer)
 <LI><a href="#[105]">tcpip_thread</a> from tcpip.o(i.tcpip_thread) referenced from tcpip.o(i.tcpip_init)
 <LI><a href="#[1cc]">version</a> from cmd.o(i.version) referenced from cmd.o(FSymTab)
 <LI><a href="#[e6]">w5500_ReadByte</a> from drv_w5500.o(i.w5500_ReadByte) referenced from drv_w5500.o(i.rt_hw_w5500_init)
 <LI><a href="#[e5]">w5500_WriteByte</a> from drv_w5500.o(i.w5500_WriteByte) referenced from drv_w5500.o(i.rt_hw_w5500_init)
 <LI><a href="#[e3]">w5500_cs_deselect</a> from drv_w5500.o(i.w5500_cs_deselect) referenced from drv_w5500.o(i.rt_hw_w5500_init)
 <LI><a href="#[e4]">w5500_cs_select</a> from drv_w5500.o(i.w5500_cs_select) referenced from drv_w5500.o(i.rt_hw_w5500_init)
 <LI><a href="#[7]">wizchip_cris_enter</a> from drv_w5500_conf.o(i.wizchip_cris_enter) referenced 2 times from drv_w5500_conf.o(.data)
 <LI><a href="#[7]">wizchip_cris_enter</a> from drv_w5500_conf.o(i.wizchip_cris_enter) referenced from drv_w5500_conf.o(i.reg_wizchip_cris_cbfunc)
 <LI><a href="#[8]">wizchip_cris_exit</a> from drv_w5500_conf.o(i.wizchip_cris_exit) referenced 2 times from drv_w5500_conf.o(.data)
 <LI><a href="#[8]">wizchip_cris_exit</a> from drv_w5500_conf.o(i.wizchip_cris_exit) referenced from drv_w5500_conf.o(i.reg_wizchip_cris_cbfunc)
 <LI><a href="#[a]">wizchip_cs_deselect</a> from drv_w5500_conf.o(i.wizchip_cs_deselect) referenced 2 times from drv_w5500_conf.o(.data)
 <LI><a href="#[a]">wizchip_cs_deselect</a> from drv_w5500_conf.o(i.wizchip_cs_deselect) referenced from drv_w5500_conf.o(i.reg_wizchip_cs_cbfunc)
 <LI><a href="#[9]">wizchip_cs_select</a> from drv_w5500_conf.o(i.wizchip_cs_select) referenced 2 times from drv_w5500_conf.o(.data)
 <LI><a href="#[9]">wizchip_cs_select</a> from drv_w5500_conf.o(i.wizchip_cs_select) referenced from drv_w5500_conf.o(i.reg_wizchip_cs_cbfunc)
 <LI><a href="#[b]">wizchip_spi_readbyte</a> from drv_w5500_conf.o(i.wizchip_spi_readbyte) referenced 2 times from drv_w5500_conf.o(.data)
 <LI><a href="#[b]">wizchip_spi_readbyte</a> from drv_w5500_conf.o(i.wizchip_spi_readbyte) referenced from drv_w5500_conf.o(i.reg_wizchip_spi_cbfunc)
 <LI><a href="#[c]">wizchip_spi_writebyte</a> from drv_w5500_conf.o(i.wizchip_spi_writebyte) referenced 2 times from drv_w5500_conf.o(.data)
 <LI><a href="#[c]">wizchip_spi_writebyte</a> from drv_w5500_conf.o(i.wizchip_spi_writebyte) referenced from drv_w5500_conf.o(i.reg_wizchip_spi_cbfunc)
 <LI><a href="#[6]">xfer</a> from drv_spi.o(i.xfer) referenced 2 times from drv_spi.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1dc]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1dd]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1df]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[8cc]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[8cd]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[8ce]"></a>__decompress</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[8cf]"></a>__decompress2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[8d0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[1e0]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[22c]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1e2]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[1e4]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1e6]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1e7]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1e8]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[8d1]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[1ea]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1ec]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1ed]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1ee]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[1f0]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[1f2]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[1f4]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[1f5]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[1f6]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[1f8]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[8d2]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[1fa]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[1fc]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[1fe]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[200]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[8d3]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[212]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[202]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[8d4]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[204]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[8d5]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[8d6]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[8d7]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[8d8]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[206]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[8d9]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[8da]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[207]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[8db]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[209]"></a>__rt_lib_init_lc_time_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_time_2 &rArr; _get_lc_time
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_time
</UL>

<P><STRONG><a name="[8dc]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[8dd]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[8de]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[8df]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[8e0]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[8e1]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[20b]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _sys_open &rArr; open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[8e2]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[8e3]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[8e4]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[8e5]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[8e6]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[8e7]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[217]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[8e8]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[20d]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; libc_stdio_write &rArr; write &rArr; fd_get &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[8e9]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[8ea]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[8eb]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[8ec]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[8ed]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[8ee]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[1de]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[8ef]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[20f]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[211]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[8f0]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[213]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[8f1]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[27f]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[216]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[8f2]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[218]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[271]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[554]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_pin_reset
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_irq_enable
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_dettach_irq
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_attach_irq
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_tx
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_add
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_poll
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_password
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
</UL>

<P><STRONG><a name="[555]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_pin_reset
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_irq_enable
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_dettach_irq
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_attach_irq
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_tx
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_add
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_poll
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_password
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
</UL>

<P><STRONG><a name="[7c3]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[7c4]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[26]"></a>PendSV_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7db]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[8f3]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[20]"></a>HardFault_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; list_thread &rArr; _list_thread &rArr; object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[21c]"></a>arm_radix2_butterfly_f32</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, arm_cfft_radix2_f32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = arm_radix2_butterfly_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_radix2_f32
</UL>

<P><STRONG><a name="[21e]"></a>arm_radix2_butterfly_inverse_f32</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, arm_cfft_radix2_f32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = arm_radix2_butterfly_inverse_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_radix2_f32
</UL>

<P><STRONG><a name="[21b]"></a>arm_cfft_radix2_f32</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, arm_cfft_radix2_f32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = arm_cfft_radix2_f32 &rArr; arm_radix2_butterfly_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bitreversal_f32
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_radix2_butterfly_inverse_f32
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_radix2_butterfly_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateData
</UL>

<P><STRONG><a name="[587]"></a>arm_cfft_radix2_init_f32</STRONG> (Thumb, 230 bytes, Stack size 4 bytes, arm_cfft_radix2_init_f32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arm_cfft_radix2_init_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_init
</UL>

<P><STRONG><a name="[21d]"></a>arm_bitreversal_f32</STRONG> (Thumb, 178 bytes, Stack size 20 bytes, arm_bitreversal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = arm_bitreversal_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_radix2_f32
</UL>

<P><STRONG><a name="[8f4]"></a>arm_bitreversal_q31</STRONG> (Thumb, 170 bytes, Stack size 28 bytes, arm_bitreversal.o(.text), UNUSED)

<P><STRONG><a name="[8f5]"></a>arm_bitreversal_q15</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, arm_bitreversal.o(.text), UNUSED)

<P><STRONG><a name="[8f6]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[8f7]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[8f8]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[8f9]"></a>__I$use$heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
</UL>

<P><STRONG><a name="[221]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_config
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_triggertime
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_firsttime
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_filenameDat
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_filenameCfg
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_TO_STR
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Files
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_SOE
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_FEVNET
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_CO
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalChannelDataToString
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigurationDataToString
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogChannelDataToString
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeModfiyFun
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoeCoDisplay
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultEventFun
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaoCeDisplay
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeWindowFun
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyInit
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyDisplay
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[222]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_stdio_set_console
</UL>

<P><STRONG><a name="[224]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[225]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[223]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[1eb]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[229]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[1f1]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[1f9]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[1e3]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[22a]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[22d]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_config
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
</UL>

<P><STRONG><a name="[230]"></a>getc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, getc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getc &rArr; fgetc &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
</UL>

<P><STRONG><a name="[742]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
</UL>

<P><STRONG><a name="[316]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoedMemory
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_DecodeFrame10
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_DecodeFrame10
</UL>

<P><STRONG><a name="[295]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_config
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_value
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_start
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_end
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_head
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_JsonFile
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_Comtrade
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_WriteFileAct
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_Format
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_DirCall
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_Dir_Clear
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_TO_STR
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDoc_Record
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_SOE
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_Record
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_FEVENT
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_CO
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_SOE
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_FEVNET
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_CO
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordModfiyWinFun
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyFun
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
</UL>

<P><STRONG><a name="[53f]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_path_lastname
</UL>

<P><STRONG><a name="[29c]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_JsonFile
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_ReadFileAct
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_DirRead
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Files
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_SOE
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_FEVENT
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_CO
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_SOE
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_FEVNET
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_CO
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_stat
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetMatchedMountPointSize
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetDeviceFromMountPointEx
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ParseObject
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_lookup
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_lookup
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeModfiyFun
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFont12Align
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiButton
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Struct_To_Json
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
</UL>

<P><STRONG><a name="[4ae]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_WriteFileAct
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_DirRead
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetDeviceFromMountPointEx
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_insert
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_lookup
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_lookup
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_lookup
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordModfiyWinFun
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWordFun
</UL>

<P><STRONG><a name="[296]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_config
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_value
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_start
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_end
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_head
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_JsonFile
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_Comtrade
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_WriteFileAct
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_Format
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_DirCall
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_TO_STR
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDoc_Record
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_SOE
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_Record
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_FEVENT
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_CO
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_SOE
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_FEVNET
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_CO
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[299]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoedMemory
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_configure_default
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_config
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteValue
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBReadValue
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_WriteFileAct
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_ReadFileAct
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_ReadFile
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_DirRead
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_DirCall
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_SOE
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_FEVNET
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_CO
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_tcpserver_putc
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp83848_tcpserver_putc
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueRecordToSDRAM
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_tx
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_rx
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufClone
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_readdir
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_read
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashUnloadSpare
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMakeSpare
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LoadObjectInfo
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufWrite
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufRead
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MoveObjectEx
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCmd001Fill
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFont12Align
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiButton
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiAreaBitMap
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_SearchValidFrame
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_REPLY
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_LinkOnTimer
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_AppProcess
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_ReadMISIData
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_MasterFrame68Packet
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_MasterFrame10Packet
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_DecodeFrame10
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_DataProcess
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Data1Process
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_REPLY
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_R_YXDATA
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_R_YCDATA
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_R_SOE
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_R_NVA
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_R_IDLE
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_R_COS
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_F_SR
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_F_FR
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_C_SR
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_C_SC
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_C_RP
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_C_CS
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_BackupProcess
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_AppProcess
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveBackUpData
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData2Process
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData1Process
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_StoreIN
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_SendProcess
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_SearchValidFrame
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_LinkSendProcess
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_Reply
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_SoftwareUpdate
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_SYNProcess
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_ResetProcess
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_ReadYxData
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_ReadYcData
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_R_SOE
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_R_NVA
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_R_COS
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_IdleProcess
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_HandleCtrlProcess
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_FixedParaProcess
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_FileHandleProcess
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_SearchMonitorFrame
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_StoreIN
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_SearchValidFrame
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_LinkOnTimer
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_AppProcess
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_SlaveFrame68Packet
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_ReadMISIData
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_MasterFrame68Packet
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_MasterFrame10Packet
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_DecodeFrame68
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_DecodeFrame10
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Data2Process
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
</UL>

<P><STRONG><a name="[232]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[8fa]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_read_config_from_fram
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteValue
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_common_data_save_value_default_to_fram
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatConfigurationHandler
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_ReadFileAct
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMoveModfiy
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[8fb]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[8fc]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[8fd]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_read_config_from_fram
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterCheck
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMarkDirtyPage
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMakeSpare
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufNew
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordModfiyWinFun
</UL>

<P><STRONG><a name="[239]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_read_config_from_fram
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteFEVENT
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dp83848_tcpserver_thread_entry
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_ParaInit
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_INIT
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_Format
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_DirCall
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_Dir_Clear
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_SOE
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_FEVENT
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_CO
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wave_init
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_clear_record
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoInitCache
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufWrite
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufInit
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compiler_run
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_AppProcess
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_AppInit
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_StatusReset
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_Link68Process
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_DataProcess
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Data1Process
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_AppInit
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_R_IDLE
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_DecodeFrame11
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_AppProcess
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_AppInitReset
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData2Process
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData1Process
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_SendProcess
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_AppInit
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_IdleProcess
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_AppProcess
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_StatusReset
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Link68Process
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Data2Process
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[236]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[235]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[256]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_configure_default
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_config
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteValue
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationFactorCal
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_Init
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_WriteFileAct
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_ReadFileAct
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_ReadFile
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_Clear
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_Dir_Clear
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_Record
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pcf8563_calender_test
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreGatherHandleUab
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreGatherHandleUCB
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashInterfaceRelease
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashInterfaceInit
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObjectInfo
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObject
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDirEntry
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufInit
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeRelease
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInit
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitDevice
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReInitObject
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_table
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_init
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_init
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_init
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_init
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_init
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[8fe]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[8ff]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[238]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_insert
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstParDataResult
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordModfiyWinFun
</UL>

<P><STRONG><a name="[569]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_WriteFileAct
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_Dir_Clear
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetMountTableByMountPoint
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_match_name
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_lookup
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_lookup
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_time
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[23a]"></a>ctime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ctime &rArr; asctime &rArr; _asctime_r &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_date
</UL>

<P><STRONG><a name="[23b]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTCTimeStamp
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_test
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[23e]"></a>mktime</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pcf8563_write
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRTCTimeStamp
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
</UL>

<P><STRONG><a name="[900]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[901]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[902]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[22e]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[903]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[904]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __read_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[242]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[226]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[227]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[228]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1e1]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[905]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[24d]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[220]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>

<P><STRONG><a name="[85]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> __2sprintf.o(.text)
<LI> sprintf.o(.text)
</UL>
<P><STRONG><a name="[84]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> vsnprintf.o(.text)
<LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[24e]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[1fb]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[1fd]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[24f]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[1f3]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[251]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[1ef]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[1f7]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[254]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __ARM_scalbn &rArr; __dunder &rArr; __fpl_exception &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[22f]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[20c]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = _initio &rArr; freopen &rArr; _sys_open &rArr; open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[20e]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; libc_stdio_write &rArr; write &rArr; fd_get &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[23c]"></a>asctime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, asctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = asctime &rArr; _asctime_r &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_asctime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[23d]"></a>_localtime_r</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, localtime_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[906]"></a>_n$localtime_r</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, localtime_internal.o(.text), UNUSED)

<P><STRONG><a name="[907]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[908]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_asctime_r
</UL>

<P><STRONG><a name="[249]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[25c]"></a>_fp_trap</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, _fptrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGFPE
</UL>
<BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trapveneer
</UL>

<P><STRONG><a name="[8a]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[24c]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[25e]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[1ff]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[201]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[88]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[255]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[245]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[260]"></a>_readbuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[268]"></a>_seteof</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[263]"></a>__filbuf</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[686]"></a>__filbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[909]"></a>__filbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[257]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = freopen &rArr; _sys_open &rArr; open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[26b]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[25a]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; libc_stdio_write &rArr; write &rArr; fd_get &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[90a]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[258]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[25b]"></a>_asctime_r</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, asctime_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = _asctime_r &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
</UL>

<P><STRONG><a name="[90b]"></a>_n$asctime_r</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, asctime_internal.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[26f]"></a>sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_asctime_r
</UL>

<P><STRONG><a name="[25f]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[275]"></a>_scanf_really_real</STRONG> (Thumb, 668 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = _scanf_really_real &rArr; _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __ARM_scalbn &rArr; __dunder &rArr; __fpl_exception &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[26a]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[90c]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[27c]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; libc_stdio_write &rArr; write &rArr; fd_get &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[265]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; libc_stdio_write &rArr; write &rArr; fd_get &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[264]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[267]"></a>_flushlinebuffered</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, flushlinebuffered.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[215]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[26e]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGFPE
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[25d]"></a>__rt_SIGFPE</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_fpe_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGFPE_inner
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trap
</UL>

<P><STRONG><a name="[26d]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[27e]"></a>_do_fflush</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fflush.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
</UL>

<P><STRONG><a name="[282]"></a>fflush</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fflush.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[27a]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[90d]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[281]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGFPE_inner
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[280]"></a>__rt_SIGFPE_inner</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, defsig_fpe_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGFPE
</UL>

<P><STRONG><a name="[284]"></a>_scanf_really_hex_real</STRONG> (Thumb, 786 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __ARM_scalbn &rArr; __dunder &rArr; __fpl_exception &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[8cb]"></a>_scanf_really_infnan</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[285]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[90e]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[288]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[287]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[28b]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[289]"></a>_e2d</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[28a]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[247]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[274]"></a>_btod_edivd</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[248]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[273]"></a>_btod_emuld</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[28c]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[294]"></a>AddDoc_CO</STRONG> (Thumb, 894 bytes, Stack size 40 bytes, file_operate.o(i.AddDoc_CO))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = AddDoc_CO &rArr; open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_value
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_start
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_end
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_TO_STR
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_Random
</UL>

<P><STRONG><a name="[2a1]"></a>AddDoc_FEVNET</STRONG> (Thumb, 862 bytes, Stack size 56 bytes, file_operate.o(i.AddDoc_FEVNET))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = AddDoc_FEVNET &rArr; open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_value
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_start
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_end
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_TO_STR
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_Random
</UL>

<P><STRONG><a name="[2a3]"></a>AddDoc_Random</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, file_operate.o(i.AddDoc_Random))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = AddDoc_Random &rArr; AddDoc_FEVNET &rArr; open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_SOE
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_FEVNET
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_CO
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate
</UL>

<P><STRONG><a name="[2a4]"></a>AddDoc_SOE</STRONG> (Thumb, 744 bytes, Stack size 40 bytes, file_operate.o(i.AddDoc_SOE))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = AddDoc_SOE &rArr; open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_value
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_start
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_end
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_TO_STR
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_Random
</UL>

<P><STRONG><a name="[2a5]"></a>AnalogChannelDataToString</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, wave_recording.o(i.AnalogChannelDataToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = AnalogChannelDataToString &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigurationDataToString
</UL>

<P><STRONG><a name="[478]"></a>AnalogCmdResult</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hmiinout.o(i.AnalogCmdResult))
<BR><BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCmd003Fun
</UL>

<P><STRONG><a name="[794]"></a>BCDToDecimal</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, common_data.o(i.BCDToDecimal))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pcf8563_read
</UL>

<P><STRONG><a name="[22]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2b8]"></a>CalcultateTask</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, calculator.o(i.CalcultateTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = CalcultateTask &rArr; CalculateData &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf &rArr; __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationFactorCal
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateData
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cal_thread_entry
</UL>

<P><STRONG><a name="[2ba]"></a>CalibrateFactorCfg_StructToJson</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, interface_s2j.o(i.CalibrateFactorCfg_StructToJson))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CalibrateFactorCfg_StructToJson &rArr; cJSON_CreateNumber &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Struct_To_Json
</UL>

<P><STRONG><a name="[2b9]"></a>CalibrationFactorCal</STRONG> (Thumb, 390 bytes, Stack size 16 bytes, common_data.o(i.CalibrationFactorCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = CalibrationFactorCal &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_save_value_to_fram
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcultateTask
</UL>

<P><STRONG><a name="[96]"></a>CheckCoUpdata</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uservariable.o(i.CheckCoUpdata))
<BR>[Address Reference Count : 1]<UL><LI> uservariable.o(i.SoeCoInfoInit)
</UL>
<P><STRONG><a name="[3d0]"></a>CheckFeventUpdata</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uservariable.o(i.CheckFeventUpdata))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultEventFun
</UL>

<P><STRONG><a name="[93]"></a>CheckSoeUpdata</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uservariable.o(i.CheckSoeUpdata))
<BR>[Address Reference Count : 1]<UL><LI> uservariable.o(i.SoeCoInfoInit)
</UL>
<P><STRONG><a name="[99]"></a>CheckUlogUpdata</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uservariable.o(i.CheckUlogUpdata))
<BR>[Address Reference Count : 1]<UL><LI> uservariable.o(i.SoeCoInfoInit)
</UL>
<P><STRONG><a name="[2c1]"></a>CheckUpdataProgram</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uservariable.o(i.CheckUpdataProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckUpdataProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_read_update_state
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDisplayMian
</UL>

<P><STRONG><a name="[2c3]"></a>CloseLcdDisplay</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, gui_101_cmd.o(i.CloseLcdDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = CloseLcdDisplay &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCmd101Down
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd101DownControl
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDisplayONOFF
</UL>

<P><STRONG><a name="[2c7]"></a>Cmd101SendFinish</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gui_101_cmd.o(i.Cmd101SendFinish))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Cmd101SendFinish &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_EMPTY
</UL>

<P><STRONG><a name="[2d3]"></a>ConfigurationDataToString</STRONG> (Thumb, 438 bytes, Stack size 32 bytes, wave_recording.o(i.ConfigurationDataToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ConfigurationDataToString &rArr; AnalogChannelDataToString &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalChannelDataToString
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogChannelDataToString
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatConfigurationHandler
</UL>

<P><STRONG><a name="[2d6]"></a>CreatConfigurationHandler</STRONG> (Thumb, 476 bytes, Stack size 24 bytes, wave_recording.o(i.CreatConfigurationHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = CreatConfigurationHandler &rArr; ConfigurationDataToString &rArr; AnalogChannelDataToString &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDigitalChannelData
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAnalogChannelData
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigurationDataToString
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_Comtrade
</UL>

<P><STRONG><a name="[7ff]"></a>CreatDataHandler</STRONG> (Thumb, 624 bytes, Stack size 36 bytes, wave_recording.o(i.CreatDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CreatDataHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_Comtrade
</UL>

<P><STRONG><a name="[2d9]"></a>CreatDoc_CO</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, file_operate.o(i.CreatDoc_CO))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = CreatDoc_CO &rArr; open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_value
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_start
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_end
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_head
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_Format
</UL>

<P><STRONG><a name="[2db]"></a>CreatDoc_FEVENT</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, file_operate.o(i.CreatDoc_FEVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = CreatDoc_FEVENT &rArr; open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_value
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_start
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_end
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_head
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_Format
</UL>

<P><STRONG><a name="[2dc]"></a>CreatDoc_Record</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, file_operate.o(i.CreatDoc_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = CreatDoc_Record &rArr; open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate
</UL>

<P><STRONG><a name="[2de]"></a>CreatDoc_SOE</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, file_operate.o(i.CreatDoc_SOE))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = CreatDoc_SOE &rArr; open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_value
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_start
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_end
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_head
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_Format
</UL>

<P><STRONG><a name="[2df]"></a>Create_JsonFile</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, jsonfileoperation.o(i.Create_JsonFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = Create_JsonFile &rArr; open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Struct_To_Json
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_Print_cJSON
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProductID_StructToJson
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate
</UL>

<P><STRONG><a name="[2fc]"></a>DBClearNVA</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, common_data.o(i.DBClearNVA))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_C_IC
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_CallAllDataProcess
</UL>

<P><STRONG><a name="[2fa]"></a>DBReadSystemTime</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, common_data.o(i.DBReadSystemTime))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_DirRead
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_C_CS
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDisplayTime
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayTime
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_SYNProcess
</UL>

<P><STRONG><a name="[2e6]"></a>DBReadValue</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, common_data.o(i.DBReadValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DBReadValue &rArr; GetValueArray
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValueArray
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_C_SR
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_FixedParaProcess
</UL>

<P><STRONG><a name="[2ff]"></a>DBReadValueAreaSN</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, common_data.o(i.DBReadValueAreaSN))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_C_SR
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_FixedParaProcess
</UL>

<P><STRONG><a name="[2eb]"></a>DBSwitchValueArea</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, common_data.o(i.DBSwitchValueArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = DBSwitchValueArea &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_fram_record_write
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_C_SR
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_FixedParaProcess
</UL>

<P><STRONG><a name="[2e5]"></a>DBWriteCO</STRONG> (Thumb, 312 bytes, Stack size 12 bytes, common_data.o(i.DBWriteCO))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DBWriteCO
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_do_operate
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_telecontrl_proof
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBRevert
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBClear
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closing_loop_clock
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_C_SC
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_HandleCtrlProcess
</UL>

<P><STRONG><a name="[92]"></a>DBWriteFEVENT</STRONG> (Thumb, 1364 bytes, Stack size 24 bytes, common_data.o(i.DBWriteFEVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DBWriteFEVENT
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_protect_ctrl.o(i.MainProtectCtrlInit)
</UL>
<P><STRONG><a name="[91]"></a>DBWriteSOE</STRONG> (Thumb, 1112 bytes, Stack size 28 bytes, common_data.o(i.DBWriteSOE))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DBWriteSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelemetryOverLimit
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_read_config_from_fram
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBRevert
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterCheck
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SlaveTask
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_open_recovery
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_close_recovery
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_double_point_check
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_di_check_task
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchResult
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_protect_ctrl.o(i.MainProtectCtrlInit)
</UL>
<P><STRONG><a name="[2ee]"></a>DBWriteSystemTime</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, common_data.o(i.DBWriteSystemTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DBWriteSystemTime &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_C_CS
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDisplayTime
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_SYNProcess
</UL>

<P><STRONG><a name="[77d]"></a>DBWriteUlog</STRONG> (Thumb, 344 bytes, Stack size 12 bytes, common_data.o(i.DBWriteUlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DBWriteUlog
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ftuidle_thread_entry
</UL>

<P><STRONG><a name="[2ef]"></a>DBWriteValue</STRONG> (Thumb, 424 bytes, Stack size 280 bytes, common_data.o(i.DBWriteValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = DBWriteValue &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_save_value_to_fram
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValueArray
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_C_SR
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_FixedParaProcess
</UL>

<P><STRONG><a name="[7ef]"></a>DB_NVA_Check</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, common_data.o(i.DB_NVA_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DB_NVA_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watch_thread_entry
</UL>

<P><STRONG><a name="[2f0]"></a>DLT634_5101_SLAVE_AppInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_AppInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = DLT634_5101_SLAVE_AppInit &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_INIT
</UL>

<P><STRONG><a name="[2f1]"></a>DLT634_5101_SLAVE_AppProcess</STRONG> (Thumb, 1098 bytes, Stack size 16 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_AppProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = DLT634_5101_SLAVE_AppProcess &rArr; DLT634_5101_SLAVE_C_SR &rArr; DBWriteValue &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_F_SR
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_F_FR
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_C_SR
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_C_SC
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_C_RP
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_C_IC
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_C_CS
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_StoreIN
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_DecodeFrame68
</UL>

<P><STRONG><a name="[2f4]"></a>DLT634_5101_SLAVE_C_CS</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, dlt634_5101slave_disk.o(i.DLT634_5101_SLAVE_C_CS))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = DLT634_5101_SLAVE_C_CS &rArr; DLT634_5101_SLAVE_REPLY &rArr; DLT634_5101_SLAVE_StoreIN
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteSystemTime
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBReadSystemTime
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_REPLY
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_AppProcess
</UL>

<P><STRONG><a name="[2f3]"></a>DLT634_5101_SLAVE_C_IC</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dlt634_5101slave_disk.o(i.DLT634_5101_SLAVE_C_IC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DLT634_5101_SLAVE_C_IC
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBClearNVA
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_AppProcess
</UL>

<P><STRONG><a name="[2f6]"></a>DLT634_5101_SLAVE_C_RP</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dlt634_5101slave_disk.o(i.DLT634_5101_SLAVE_C_RP))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = DLT634_5101_SLAVE_C_RP &rArr; DLT634_5101_SLAVE_REPLY &rArr; DLT634_5101_SLAVE_StoreIN
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_REPLY
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_AppProcess
</UL>

<P><STRONG><a name="[2f2]"></a>DLT634_5101_SLAVE_C_SC</STRONG> (Thumb, 1098 bytes, Stack size 16 bytes, dlt634_5101slave_disk.o(i.DLT634_5101_SLAVE_C_SC))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = DLT634_5101_SLAVE_C_SC &rArr; rt_multi_telecontrl_operate &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_telecontrl_proof
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_telecontrl_operate
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteCO
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_REPLY
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_AppProcess
</UL>

<P><STRONG><a name="[2f7]"></a>DLT634_5101_SLAVE_C_SR</STRONG> (Thumb, 1242 bytes, Stack size 120 bytes, dlt634_5101slave_disk.o(i.DLT634_5101_SLAVE_C_SR))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = DLT634_5101_SLAVE_C_SR &rArr; DBWriteValue &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteValue
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBSwitchValueArea
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBReadValueAreaSN
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBReadValue
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_REPLY
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_AppProcess
</UL>

<P><STRONG><a name="[302]"></a>DLT634_5101_SLAVE_Clock</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 780 + Unknown Stack Size
<LI>Call Chain = DLT634_5101_SLAVE_Clock &rArr; DLT634_5101_SLAVE_ReadMISIData &rArr; DLT634_5101_SLAVE_SearchValidFrame &rArr; DLT634_5101_SLAVE_DecodeFrame68 &rArr; DLT634_5101_SLAVE_AppProcess &rArr; DLT634_5101_SLAVE_C_SR &rArr; DBWriteValue &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_LinkOnTimer
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_SendProcess
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_ReadMISIData
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SlaveTask
</UL>

<P><STRONG><a name="[2f8]"></a>DLT634_5101_SLAVE_F_FR</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, dlt634_5101slave_disk.o(i.DLT634_5101_SLAVE_F_FR))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = DLT634_5101_SLAVE_F_FR &rArr; file_operate_WriteFileAct &rArr; ReadDoc_Record &rArr; open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_WriteFileAct
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_REPLY
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_AppProcess
</UL>

<P><STRONG><a name="[2f9]"></a>DLT634_5101_SLAVE_F_SR</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, dlt634_5101slave_disk.o(i.DLT634_5101_SLAVE_F_SR))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = DLT634_5101_SLAVE_F_SR &rArr; DLT634_5101_SLAVE_REPLY &rArr; DLT634_5101_SLAVE_StoreIN
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_write_update_state
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_fram_update_state_write
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_REPLY
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_AppProcess
</UL>

<P><STRONG><a name="[30b]"></a>DLT634_5101_SLAVE_H_COS</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dlt634_5101slave_disk.o(i.DLT634_5101_SLAVE_H_COS))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Data1Process
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_SetFlagProcess
</UL>

<P><STRONG><a name="[336]"></a>DLT634_5101_SLAVE_H_Encrypt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dlt634_5101slave_disk.o(i.DLT634_5101_SLAVE_H_Encrypt))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_SendProcess
</UL>

<P><STRONG><a name="[312]"></a>DLT634_5101_SLAVE_H_FEvent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dlt634_5101slave_disk.o(i.DLT634_5101_SLAVE_H_FEvent))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Data2Process
</UL>

<P><STRONG><a name="[310]"></a>DLT634_5101_SLAVE_H_NVA</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, dlt634_5101slave_disk.o(i.DLT634_5101_SLAVE_H_NVA))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Data2Process
</UL>

<P><STRONG><a name="[30d]"></a>DLT634_5101_SLAVE_H_SOE</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, dlt634_5101slave_disk.o(i.DLT634_5101_SLAVE_H_SOE))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Data1Process
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_SetFlagProcess
</UL>

<P><STRONG><a name="[31c]"></a>DLT634_5101_SLAVE_INIT</STRONG> (Thumb, 1122 bytes, Stack size 24 bytes, dlt634_5101slave_disk.o(i.DLT634_5101_SLAVE_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = DLT634_5101_SLAVE_INIT &rArr; DLT634_5101_SLAVE_AppInit &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_channel_monitor_init
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_AppInit
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slave101_thread_entry
</UL>

<P><STRONG><a name="[305]"></a>DLT634_5101_SLAVE_LinkOnTimer</STRONG> (Thumb, 964 bytes, Stack size 16 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_LinkOnTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = DLT634_5101_SLAVE_LinkOnTimer &rArr; DLT634_5101_SLAVE_WriteDataToMISI &rArr; DLT634_5101_SLAVE_WriteData &rArr; MonitoringDataTransmission &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_WriteDataToMISI
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Clock
</UL>

<P><STRONG><a name="[2fb]"></a>DLT634_5101_SLAVE_REPLY</STRONG> (Thumb, 426 bytes, Stack size 16 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_REPLY))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = DLT634_5101_SLAVE_REPLY &rArr; DLT634_5101_SLAVE_StoreIN
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_StoreIN
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_F_SR
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_F_FR
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_C_SR
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_C_SC
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_C_RP
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_C_CS
</UL>

<P><STRONG><a name="[30c]"></a>DLT634_5101_SLAVE_R_COS</STRONG> (Thumb, 452 bytes, Stack size 40 bytes, dlt634_5101slave_disk.o(i.DLT634_5101_SLAVE_R_COS))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DLT634_5101_SLAVE_R_COS
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Data1Process
</UL>

<P><STRONG><a name="[313]"></a>DLT634_5101_SLAVE_R_FEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dlt634_5101slave_disk.o(i.DLT634_5101_SLAVE_R_FEvent))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Data2Process
</UL>

<P><STRONG><a name="[314]"></a>DLT634_5101_SLAVE_R_IDLE</STRONG> (Thumb, 598 bytes, Stack size 16 bytes, dlt634_5101slave_disk.o(i.DLT634_5101_SLAVE_R_IDLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = DLT634_5101_SLAVE_R_IDLE &rArr; file_operate_DirCall &rArr; file_operate_DirRead &rArr; open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_ReadFileAct
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_ReadFile
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_DirRead
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_DirCall
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Data2Process
</UL>

<P><STRONG><a name="[311]"></a>DLT634_5101_SLAVE_R_NVA</STRONG> (Thumb, 1076 bytes, Stack size 40 bytes, dlt634_5101slave_disk.o(i.DLT634_5101_SLAVE_R_NVA))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DLT634_5101_SLAVE_R_NVA
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Data2Process
</UL>

<P><STRONG><a name="[30e]"></a>DLT634_5101_SLAVE_R_SOE</STRONG> (Thumb, 490 bytes, Stack size 48 bytes, dlt634_5101slave_disk.o(i.DLT634_5101_SLAVE_R_SOE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DLT634_5101_SLAVE_R_SOE
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Data1Process
</UL>

<P><STRONG><a name="[32a]"></a>DLT634_5101_SLAVE_R_YCDATA</STRONG> (Thumb, 966 bytes, Stack size 56 bytes, dlt634_5101slave_disk.o(i.DLT634_5101_SLAVE_R_YCDATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DLT634_5101_SLAVE_R_YCDATA
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatToBin
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_ReadAllDataProcess
</UL>

<P><STRONG><a name="[32c]"></a>DLT634_5101_SLAVE_R_YXDATA</STRONG> (Thumb, 722 bytes, Stack size 64 bytes, dlt634_5101slave_disk.o(i.DLT634_5101_SLAVE_R_YXDATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DLT634_5101_SLAVE_R_YXDATA
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_ReadAllDataProcess
</UL>

<P><STRONG><a name="[32f]"></a>DLT634_5101_SLAVE_ReadData</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, dlt634_5101slave_disk.o(i.DLT634_5101_SLAVE_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = DLT634_5101_SLAVE_ReadData &rArr; MonitoringDataTransmission &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MonitoringDataTransmission
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Read_drv
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_ReadMISIData
</UL>

<P><STRONG><a name="[330]"></a>DLT634_5101_SLAVE_Read_drv</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, dlt634_5101slave_disk.o(i.DLT634_5101_SLAVE_Read_drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DLT634_5101_SLAVE_Read_drv &rArr; rt_device_read &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_ReadData
</UL>

<P><STRONG><a name="[333]"></a>DLT634_5101_SLAVE_SearchValidFrame</STRONG> (Thumb, 1646 bytes, Stack size 24 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_SearchValidFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 740 + Unknown Stack Size
<LI>Call Chain = DLT634_5101_SLAVE_SearchValidFrame &rArr; DLT634_5101_SLAVE_DecodeFrame68 &rArr; DLT634_5101_SLAVE_AppProcess &rArr; DLT634_5101_SLAVE_C_SR &rArr; DBWriteValue &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_CheckFram68Valid
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_CheckFram10Valid
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_CKS
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_DecodeFrame68
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_DecodeFrame10
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_ReadMISIData
</UL>

<P><STRONG><a name="[2f5]"></a>DLT634_5101_SLAVE_StoreIN</STRONG> (Thumb, 698 bytes, Stack size 272 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_StoreIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = DLT634_5101_SLAVE_StoreIN
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_REPLY
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_AppProcess
</UL>

<P><STRONG><a name="[337]"></a>DLT634_5101_SLAVE_WriteData</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, dlt634_5101slave_disk.o(i.DLT634_5101_SLAVE_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = DLT634_5101_SLAVE_WriteData &rArr; MonitoringDataTransmission &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MonitoringDataTransmission
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Write_drv
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_SlaveFrame12Response
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_SlaveFrame11Response
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_SlaveFrame01Response
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_AddError
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_WriteDataToMISI
</UL>

<P><STRONG><a name="[338]"></a>DLT634_5101_SLAVE_Write_drv</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dlt634_5101slave_disk.o(i.DLT634_5101_SLAVE_Write_drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DLT634_5101_SLAVE_Write_drv &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_WriteData
</UL>

<P><STRONG><a name="[339]"></a>DLT634_5101_SlaveTask</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, dlt634_5101slave_disk.o(i.DLT634_5101_SlaveTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 788 + Unknown Stack Size
<LI>Call Chain = DLT634_5101_SlaveTask &rArr; DLT634_5101_SLAVE_Clock &rArr; DLT634_5101_SLAVE_ReadMISIData &rArr; DLT634_5101_SLAVE_SearchValidFrame &rArr; DLT634_5101_SLAVE_DecodeFrame68 &rArr; DLT634_5101_SLAVE_AppProcess &rArr; DLT634_5101_SLAVE_C_SR &rArr; DBWriteValue &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteSOE
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slave101_thread_entry
</UL>

<P><STRONG><a name="[33a]"></a>DLT634_5104_AppInitReset</STRONG> (Thumb, 480 bytes, Stack size 8 bytes, dlt634_5104slave_app.o(i.DLT634_5104_AppInitReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DLT634_5104_AppInitReset
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_AppProcess
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData1Process
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_NetTest
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_AppInit
</UL>

<P><STRONG><a name="[33b]"></a>DLT634_5104_ParaInit</STRONG> (Thumb, 866 bytes, Stack size 8 bytes, dlt634_5104slave_disk.o(i.DLT634_5104_ParaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = DLT634_5104_ParaInit &rArr; DLT634_5104_SLAVE_AppInit &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_AppInit
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slave104_thread_entry
</UL>

<P><STRONG><a name="[33c]"></a>DLT634_5104_SLAVE_AppInit</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, dlt634_5104slave_app.o(i.DLT634_5104_SLAVE_AppInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = DLT634_5104_SLAVE_AppInit &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_AppInitReset
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_ParaInit
</UL>

<P><STRONG><a name="[33d]"></a>DLT634_5104_SLAVE_AppProcess</STRONG> (Thumb, 616 bytes, Stack size 16 bytes, dlt634_5104slave_app.o(i.DLT634_5104_SLAVE_AppProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 956 + Unknown Stack Size
<LI>Call Chain = DLT634_5104_SLAVE_AppProcess &rArr; DLT634_5104_SLAVE_FixedParaProcess &rArr; DBWriteValue &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_AppInitReset
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_StoreIN
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_SoftwareUpdate
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_SYNProcess
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_ResetProcess
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_HandleCtrlProcess
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_FixedParaProcess
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_FileHandleProcess
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_CallAllDataProcess
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_StopDTOper
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_DecodeUFrame
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_DecodeSFrame
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_DecodeIFrame
</UL>

<P><STRONG><a name="[346]"></a>DLT634_5104_SLAVE_BackupProcess</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, dlt634_5104slave_app.o(i.DLT634_5104_SLAVE_BackupProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DLT634_5104_SLAVE_BackupProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_PeerNoAckNumProcess
</UL>

<P><STRONG><a name="[33f]"></a>DLT634_5104_SLAVE_CallAllDataProcess</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dlt634_5104slave_disk.o(i.DLT634_5104_SLAVE_CallAllDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DLT634_5104_SLAVE_CallAllDataProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBClearNVA
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_AppProcess
</UL>

<P><STRONG><a name="[347]"></a>DLT634_5104_SLAVE_CheckLink</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dlt634_5104slave_disk.o(i.DLT634_5104_SLAVE_CheckLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DLT634_5104_SLAVE_CheckLink
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_tcpserver_linkstate
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp83848_tcpserver_linkstate
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_NetTest
</UL>

<P><STRONG><a name="[34a]"></a>DLT634_5104_SLAVE_Clock</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, dlt634_5104slave_app.o(i.DLT634_5104_SLAVE_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060 + Unknown Stack Size
<LI>Call Chain = DLT634_5104_SLAVE_Clock &rArr; DLT634_5104_SLAVE_ReadMISIData &rArr; DLT634_5104_SLAVE_SearchValidFrame &rArr; DLT634_5104_SLAVE_DecodeIFrame &rArr; DLT634_5104_SLAVE_StopDTOper &rArr; DLT634_5104_SLAVE_AppProcess &rArr; DLT634_5104_SLAVE_FixedParaProcess &rArr; DBWriteValue &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_WriteDataToMISI
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_SendProcess
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_ReadMISIData
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_NetTest
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_LinkOnTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SlaveTask
</UL>

<P><STRONG><a name="[344]"></a>DLT634_5104_SLAVE_FileHandleProcess</STRONG> (Thumb, 540 bytes, Stack size 16 bytes, dlt634_5104slave_disk.o(i.DLT634_5104_SLAVE_FileHandleProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = DLT634_5104_SLAVE_FileHandleProcess &rArr; file_operate_WriteFileAct &rArr; ReadDoc_Record &rArr; open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_WriteFileAct
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_Reply
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_AppProcess
</UL>

<P><STRONG><a name="[343]"></a>DLT634_5104_SLAVE_FixedParaProcess</STRONG> (Thumb, 1588 bytes, Stack size 384 bytes, dlt634_5104slave_disk.o(i.DLT634_5104_SLAVE_FixedParaProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 940 + Unknown Stack Size
<LI>Call Chain = DLT634_5104_SLAVE_FixedParaProcess &rArr; DBWriteValue &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteValue
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBSwitchValueArea
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBReadValueAreaSN
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBReadValue
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_Reply
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_AppProcess
</UL>

<P><STRONG><a name="[4be]"></a>DLT634_5104_SLAVE_H_COS</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, dlt634_5104slave_disk.o(i.DLT634_5104_SLAVE_H_COS))
<BR><BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData1Process
</UL>

<P><STRONG><a name="[4c3]"></a>DLT634_5104_SLAVE_H_FEvent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dlt634_5104slave_disk.o(i.DLT634_5104_SLAVE_H_FEvent))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData2Process
</UL>

<P><STRONG><a name="[4c2]"></a>DLT634_5104_SLAVE_H_NVA</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, dlt634_5104slave_disk.o(i.DLT634_5104_SLAVE_H_NVA))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData2Process
</UL>

<P><STRONG><a name="[4c0]"></a>DLT634_5104_SLAVE_H_SOE</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dlt634_5104slave_disk.o(i.DLT634_5104_SLAVE_H_SOE))
<BR><BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData1Process
</UL>

<P><STRONG><a name="[33e]"></a>DLT634_5104_SLAVE_HandleCtrlProcess</STRONG> (Thumb, 1128 bytes, Stack size 16 bytes, dlt634_5104slave_disk.o(i.DLT634_5104_SLAVE_HandleCtrlProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = DLT634_5104_SLAVE_HandleCtrlProcess &rArr; rt_multi_telecontrl_operate &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_telecontrl_proof
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_telecontrl_operate
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteCO
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_Reply
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_AppProcess
</UL>

<P><STRONG><a name="[359]"></a>DLT634_5104_SLAVE_IdleProcess</STRONG> (Thumb, 890 bytes, Stack size 16 bytes, dlt634_5104slave_disk.o(i.DLT634_5104_SLAVE_IdleProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = DLT634_5104_SLAVE_IdleProcess &rArr; file_operate_DirCall &rArr; file_operate_DirRead &rArr; open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_ReadFileAct
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_ReadFile
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_DirRead
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_DirCall
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData2Process
</UL>

<P><STRONG><a name="[35b]"></a>DLT634_5104_SLAVE_R_COS</STRONG> (Thumb, 522 bytes, Stack size 40 bytes, dlt634_5104slave_disk.o(i.DLT634_5104_SLAVE_R_COS))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DLT634_5104_SLAVE_R_COS
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData1Process
</UL>

<P><STRONG><a name="[4c4]"></a>DLT634_5104_SLAVE_R_FEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dlt634_5104slave_disk.o(i.DLT634_5104_SLAVE_R_FEvent))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData2Process
</UL>

<P><STRONG><a name="[35c]"></a>DLT634_5104_SLAVE_R_NVA</STRONG> (Thumb, 1306 bytes, Stack size 40 bytes, dlt634_5104slave_disk.o(i.DLT634_5104_SLAVE_R_NVA))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DLT634_5104_SLAVE_R_NVA
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatToBin
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData2Process
</UL>

<P><STRONG><a name="[35d]"></a>DLT634_5104_SLAVE_R_SOE</STRONG> (Thumb, 578 bytes, Stack size 48 bytes, dlt634_5104slave_disk.o(i.DLT634_5104_SLAVE_R_SOE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DLT634_5104_SLAVE_R_SOE
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData1Process
</UL>

<P><STRONG><a name="[35e]"></a>DLT634_5104_SLAVE_ReadData</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, dlt634_5104slave_disk.o(i.DLT634_5104_SLAVE_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DLT634_5104_SLAVE_ReadData &rArr; w5500_tcpserver_getc &rArr; QueueRead
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_tcpserver_getc
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp83848_tcpserver_getc
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_ReadMISIData
</UL>

<P><STRONG><a name="[362]"></a>DLT634_5104_SLAVE_ReadYcData</STRONG> (Thumb, 1104 bytes, Stack size 56 bytes, dlt634_5104slave_disk.o(i.DLT634_5104_SLAVE_ReadYcData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DLT634_5104_SLAVE_ReadYcData
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatToBin
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAllDataProcess
</UL>

<P><STRONG><a name="[363]"></a>DLT634_5104_SLAVE_ReadYxData</STRONG> (Thumb, 704 bytes, Stack size 56 bytes, dlt634_5104slave_disk.o(i.DLT634_5104_SLAVE_ReadYxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DLT634_5104_SLAVE_ReadYxData
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAllDataProcess
</UL>

<P><STRONG><a name="[358]"></a>DLT634_5104_SLAVE_Reply</STRONG> (Thumb, 422 bytes, Stack size 16 bytes, dlt634_5104slave_app.o(i.DLT634_5104_SLAVE_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = DLT634_5104_SLAVE_Reply &rArr; DLT634_5104_SLAVE_StoreIN
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_StoreIN
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_SoftwareUpdate
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_SYNProcess
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_ResetProcess
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_HandleCtrlProcess
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_FixedParaProcess
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_FileHandleProcess
</UL>

<P><STRONG><a name="[341]"></a>DLT634_5104_SLAVE_ResetProcess</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dlt634_5104slave_disk.o(i.DLT634_5104_SLAVE_ResetProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = DLT634_5104_SLAVE_ResetProcess &rArr; DLT634_5104_SLAVE_Reply &rArr; DLT634_5104_SLAVE_StoreIN
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_Reply
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_AppProcess
</UL>

<P><STRONG><a name="[340]"></a>DLT634_5104_SLAVE_SYNProcess</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, dlt634_5104slave_disk.o(i.DLT634_5104_SLAVE_SYNProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = DLT634_5104_SLAVE_SYNProcess &rArr; DLT634_5104_SLAVE_Reply &rArr; DLT634_5104_SLAVE_StoreIN
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteSystemTime
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBReadSystemTime
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_Reply
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_AppProcess
</UL>

<P><STRONG><a name="[345]"></a>DLT634_5104_SLAVE_SoftwareUpdate</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, dlt634_5104slave_disk.o(i.DLT634_5104_SLAVE_SoftwareUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = DLT634_5104_SLAVE_SoftwareUpdate &rArr; DLT634_5104_SLAVE_Reply &rArr; DLT634_5104_SLAVE_StoreIN
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_write_update_state
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_fram_update_state_write
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_Reply
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_AppProcess
</UL>

<P><STRONG><a name="[366]"></a>DLT634_5104_SLAVE_StopLink</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dlt634_5104slave_disk.o(i.DLT634_5104_SLAVE_StopLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DLT634_5104_SLAVE_StopLink
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_tcpserver_disconnect
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp83848_tcpserver_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_channel_monitor_clock
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_StopDTOper
</UL>

<P><STRONG><a name="[369]"></a>DLT634_5104_SLAVE_WriteData</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, dlt634_5104slave_disk.o(i.DLT634_5104_SLAVE_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DLT634_5104_SLAVE_WriteData &rArr; w5500_tcpserver_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_tcpserver_putc
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp83848_tcpserver_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_WriteDataToMISI
</UL>

<P><STRONG><a name="[34d]"></a>DLT634_5104_SLAVE_WriteDataToMISI</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, dlt634_5104slave_app.o(i.DLT634_5104_SLAVE_WriteDataToMISI))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DLT634_5104_SLAVE_WriteDataToMISI &rArr; DLT634_5104_SLAVE_WriteData &rArr; w5500_tcpserver_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_S104SendCtrlFrame
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_LinkSendProcess
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_Clock
</UL>

<P><STRONG><a name="[36c]"></a>DLT634_5104_SlaveTask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dlt634_5104slave_disk.o(i.DLT634_5104_SlaveTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068 + Unknown Stack Size
<LI>Call Chain = DLT634_5104_SlaveTask &rArr; DLT634_5104_SLAVE_Clock &rArr; DLT634_5104_SLAVE_ReadMISIData &rArr; DLT634_5104_SLAVE_SearchValidFrame &rArr; DLT634_5104_SLAVE_DecodeIFrame &rArr; DLT634_5104_SLAVE_StopDTOper &rArr; DLT634_5104_SLAVE_AppProcess &rArr; DLT634_5104_SLAVE_FixedParaProcess &rArr; DBWriteValue &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slave104_thread_entry
</UL>

<P><STRONG><a name="[332]"></a>DLT634_ChannelToMonitor_SLAVE_SearchMonitorFrame</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, channel_monitor.o(i.DLT634_ChannelToMonitor_SLAVE_SearchMonitorFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = DLT634_ChannelToMonitor_SLAVE_SearchMonitorFrame &rArr; DLT634_ChannelToMonitor_SLAVE_DecodeFrame11 &rArr; DLT634_ChannelToMonitor_SLAVE_SlaveFrame12Response &rArr; DLT634_5101_SLAVE_WriteData &rArr; MonitoringDataTransmission &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_DecodeFrame11
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_CheckFram11Valid
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_ReadMISIData
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_ReadMISIData
</UL>

<P><STRONG><a name="[376]"></a>DLT634_HMI_SLAVE_AppInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hmi_101_app.o(i.DLT634_HMI_SLAVE_AppInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = DLT634_HMI_SLAVE_AppInit &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_INIT
</UL>

<P><STRONG><a name="[377]"></a>DLT634_HMI_SLAVE_AppProcess</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, hmi_101_app.o(i.DLT634_HMI_SLAVE_AppProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = DLT634_HMI_SLAVE_AppProcess &rArr; DLT634_HMI_SLAVE_TO_HMI &rArr; hmi101Scan &rArr; Hmi101CmdResult &rArr; HmiCmd002Fun &rArr; KeyCmdResult &rArr; YaoKongKeyResult &rArr; YaoKongKeyCmdResult &rArr; rt_multi_telecontrl_operate &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_TO_HMI
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_DecodeFrame68
</UL>

<P><STRONG><a name="[379]"></a>DLT634_HMI_SLAVE_C_REPLY</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, hmi_101_disk.o(i.DLT634_HMI_SLAVE_C_REPLY))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DLT634_HMI_SLAVE_C_REPLY &rArr; DLT634_HMI_SLAVE_REPLY
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_REPLY
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCmd101Down
</UL>

<P><STRONG><a name="[37d]"></a>DLT634_HMI_SLAVE_Clock</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, hmi_101_app.o(i.DLT634_HMI_SLAVE_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 492 + Unknown Stack Size
<LI>Call Chain = DLT634_HMI_SLAVE_Clock &rArr; DLT634_HMI_SLAVE_ReadMISIData &rArr; DLT634_HMI_SLAVE_SearchValidFrame &rArr; DLT634_HMI_SLAVE_DecodeFrame68 &rArr; DLT634_HMI_SLAVE_AppProcess &rArr; DLT634_HMI_SLAVE_TO_HMI &rArr; hmi101Scan &rArr; Hmi101CmdResult &rArr; HmiCmd002Fun &rArr; KeyCmdResult &rArr; YaoKongKeyResult &rArr; YaoKongKeyCmdResult &rArr; rt_multi_telecontrl_operate &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_LinkOnTimer
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_SendProcess
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_ReadMISIData
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SlaveTask
</UL>

<P><STRONG><a name="[382]"></a>DLT634_HMI_SLAVE_EMPTY</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hmi_101_disk.o(i.DLT634_HMI_SLAVE_EMPTY))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = DLT634_HMI_SLAVE_EMPTY &rArr; Cmd101SendFinish &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd101SendFinish
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_DataProcess
</UL>

<P><STRONG><a name="[387]"></a>DLT634_HMI_SLAVE_INIT</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, hmi_101_disk.o(i.DLT634_HMI_SLAVE_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = DLT634_HMI_SLAVE_INIT &rArr; DLT634_HMI_SLAVE_AppInit &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_AppInit
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slave101_thread_entry
</UL>

<P><STRONG><a name="[380]"></a>DLT634_HMI_SLAVE_LinkOnTimer</STRONG> (Thumb, 824 bytes, Stack size 16 bytes, hmi_101_app.o(i.DLT634_HMI_SLAVE_LinkOnTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DLT634_HMI_SLAVE_LinkOnTimer &rArr; DLT634_HMI_SLAVE_WriteDataToMISI &rArr; DLT634_HMI_SLAVE_WriteData &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_WriteDataToMISI
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_Clock
</UL>

<P><STRONG><a name="[37a]"></a>DLT634_HMI_SLAVE_REPLY</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hmi_101_app.o(i.DLT634_HMI_SLAVE_REPLY))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DLT634_HMI_SLAVE_REPLY
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_C_REPLY
</UL>

<P><STRONG><a name="[38d]"></a>DLT634_HMI_SLAVE_ReadData</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, hmi_101_disk.o(i.DLT634_HMI_SLAVE_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DLT634_HMI_SLAVE_ReadData &rArr; rt_device_read &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_ReadMISIData
</UL>

<P><STRONG><a name="[38e]"></a>DLT634_HMI_SLAVE_SearchValidFrame</STRONG> (Thumb, 1586 bytes, Stack size 24 bytes, hmi_101_app.o(i.DLT634_HMI_SLAVE_SearchValidFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = DLT634_HMI_SLAVE_SearchValidFrame &rArr; DLT634_HMI_SLAVE_DecodeFrame68 &rArr; DLT634_HMI_SLAVE_AppProcess &rArr; DLT634_HMI_SLAVE_TO_HMI &rArr; hmi101Scan &rArr; Hmi101CmdResult &rArr; HmiCmd002Fun &rArr; KeyCmdResult &rArr; YaoKongKeyResult &rArr; YaoKongKeyCmdResult &rArr; rt_multi_telecontrl_operate &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_DecodeFrame68
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_DecodeFrame10
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_CheckFram68Valid
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_CheckFram10Valid
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_CKS
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_ReadMISIData
</UL>

<P><STRONG><a name="[378]"></a>DLT634_HMI_SLAVE_TO_HMI</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, hmi_101_disk.o(i.DLT634_HMI_SLAVE_TO_HMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = DLT634_HMI_SLAVE_TO_HMI &rArr; hmi101Scan &rArr; Hmi101CmdResult &rArr; HmiCmd002Fun &rArr; KeyCmdResult &rArr; YaoKongKeyResult &rArr; YaoKongKeyCmdResult &rArr; rt_multi_telecontrl_operate &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmi101Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_AppProcess
</UL>

<P><STRONG><a name="[391]"></a>DLT634_HMI_SLAVE_WriteData</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hmi_101_disk.o(i.DLT634_HMI_SLAVE_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DLT634_HMI_SLAVE_WriteData &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_WriteDataToMISI
</UL>

<P><STRONG><a name="[392]"></a>DLT634_HMI_SlaveTask</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hmi_101_disk.o(i.DLT634_HMI_SlaveTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 500 + Unknown Stack Size
<LI>Call Chain = DLT634_HMI_SlaveTask &rArr; DLT634_HMI_SLAVE_Clock &rArr; DLT634_HMI_SLAVE_ReadMISIData &rArr; DLT634_HMI_SLAVE_SearchValidFrame &rArr; DLT634_HMI_SLAVE_DecodeFrame68 &rArr; DLT634_HMI_SLAVE_AppProcess &rArr; DLT634_HMI_SLAVE_TO_HMI &rArr; hmi101Scan &rArr; Hmi101CmdResult &rArr; HmiCmd002Fun &rArr; KeyCmdResult &rArr; YaoKongKeyResult &rArr; YaoKongKeyCmdResult &rArr; rt_multi_telecontrl_operate &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi101RunTimerOut
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi101Init
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slave101_thread_entry
</UL>

<P><STRONG><a name="[36]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_spi.o(i.DMA1_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_spi.o(i.DMA1_Stream4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream4_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_spi.o(i.DMA2_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_spi.o(i.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_spi.o(i.DMA2_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_spi.o(i.DMA2_Stream4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream4_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[396]"></a>DZModfiyDisplay</STRONG> (Thumb, 788 bytes, Stack size 56 bytes, guidisplay.o(i.DZModfiyDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = DZModfiyDisplay &rArr; GuiMenuRedrawMenu &rArr; DrawAllMenu &rArr; DrawNodes &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDingZhiModfiy
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDingZhiSetOrSee
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDZ
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUIWindowAdd
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUITopWindowRedraw
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUITopWindowHide
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuRedrawMenu
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiVScroll
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiUpdateDisplayAll
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DingzhiWinFun
</UL>

<P><STRONG><a name="[18]"></a>DZModfiyFun</STRONG> (Thumb, 1812 bytes, Stack size 40 bytes, guidisplay.o(i.DZModfiyFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 724 + Unknown Stack Size
<LI>Call Chain = DZModfiyFun &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __ARM_scalbn &rArr; __dunder &rArr; __fpl_exception &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentTick
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntervalTick
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUITopWindowHide
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiUpdateDisplayAll
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFont12Align
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFillRect
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiExchangeColor
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawModfiyKey
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyInit
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidisplay.o(.data)
</UL>
<P><STRONG><a name="[39a]"></a>DZModfiyInit</STRONG> (Thumb, 1096 bytes, Stack size 48 bytes, guidisplay.o(i.DZModfiyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = DZModfiyInit &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiRect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiRPointLine
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiHPointLine
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFont12Align
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFillRect
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyFun
</UL>

<P><STRONG><a name="[795]"></a>DecimalToBCD</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, common_data.o(i.DecimalToBCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DecimalToBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pcf8563_write
</UL>

<P><STRONG><a name="[2d4]"></a>DigitalChannelDataToString</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, wave_recording.o(i.DigitalChannelDataToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = DigitalChannelDataToString &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigurationDataToString
</UL>

<P><STRONG><a name="[16]"></a>DingzhiWinFun</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, guidisplay.o(i.DingzhiWinFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = DingzhiWinFun &rArr; DZModfiyDisplay &rArr; GuiMenuRedrawMenu &rArr; DrawAllMenu &rArr; DrawNodes &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyDisplay
</UL>
<BR>[Address Reference Count : 2]<UL><LI> guidisplay.o(.data)
<LI> uservariable.o(.data)
</UL>
<P><STRONG><a name="[2c9]"></a>DrawList</STRONG> (Thumb, 504 bytes, Stack size 40 bytes, lkdguiwindow.o(i.DrawList))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = DrawList &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiRect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiRPointLine
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiHPointLine
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFont12Align
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFillRect
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiExchangeColor
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoxinFun
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSendWinFun
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaoCeDisplay
</UL>

<P><STRONG><a name="[39e]"></a>DrawModfiyKey</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, guidisplay.o(i.DrawModfiyKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = DrawModfiyKey &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiUpdateDisplayAll
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiRLine
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiHLine
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFont12Align
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFillRect
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiExchangeColor
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyFun
</UL>

<P><STRONG><a name="[3b0]"></a>Dzhi1DisplayInit</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, uservariable.o(i.Dzhi1DisplayInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Dzhi1DisplayInit &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserDefineDzhiInit
</UL>

<P><STRONG><a name="[7c0]"></a>DzhiChangeCallBack</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidisplay.o(i.DzhiChangeCallBack))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_protect_thread_entry
</UL>

<P><STRONG><a name="[3b1]"></a>DzhiChangeDealWith</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, guidisplay.o(i.DzhiChangeDealWith))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = DzhiChangeDealWith &rArr; userGUIWindowAdd &rArr; GUIWindowDraw &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUIWindowAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDisplayMian
</UL>

<P><STRONG><a name="[1b]"></a>DzhiChangeFun</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, guidisplay.o(i.DzhiChangeFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = DzhiChangeFun &rArr; GUIDisplayInit &rArr; userGUIWindowAdd &rArr; GUIWindowDraw &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDisplayInit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiUpdateDisplayAll
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFont12Align
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserDefineDzhiInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidisplay.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>ETH_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_eth.o(i.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ETH_IRQHandler &rArr; HAL_ETH_IRQHandler &rArr; HAL_ETH_RxCpltCallback &rArr; eth_device_ready &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI2_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[756]"></a>EnQueueRecord</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, wave_recording.o(i.EnQueueRecord))
<BR><BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ad7616_data
</UL>

<P><STRONG><a name="[2c5]"></a>EndCmd101Down</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gui_101_cmd.o(i.EndCmd101Down))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EndCmd101Down &rArr; DLT634_HMI_SLAVE_C_REPLY &rArr; DLT634_HMI_SLAVE_REPLY
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_C_REPLY
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenLcdDisplay
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCmd001Fill
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiUpdateDisplayAll
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLcdDisplay
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd101DownControl
</UL>

<P><STRONG><a name="[797]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdram_init
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_system_clock_init
</UL>

<P><STRONG><a name="[19b]"></a>FLASH_OB_Init</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, drv_timer.o(i.FLASH_OB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FLASH_OB_Init &rArr; HAL_FLASHEx_OBProgram &rArr; FLASH_OB_UserConfig &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Unlock
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Lock
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Launch
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBGetConfig
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_timer.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[3c0]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Launch
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Init
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_UserConfig
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_RDP_LevelConfig
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_EnableWRP
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_DisableWRP
</UL>

<P><STRONG><a name="[441]"></a>FMC_NORSRAM_Extended_Timing_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_ll_fmc.o(i.FMC_NORSRAM_Extended_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[43f]"></a>FMC_NORSRAM_Init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32f4xx_ll_fmc.o(i.FMC_NORSRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FMC_NORSRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[440]"></a>FMC_NORSRAM_Timing_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, stm32f4xx_ll_fmc.o(i.FMC_NORSRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_NORSRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[437]"></a>FMC_SDRAM_Init</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, stm32f4xx_ll_fmc.o(i.FMC_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[43a]"></a>FMC_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_ll_fmc.o(i.FMC_SDRAM_ProgramRefreshRate))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>

<P><STRONG><a name="[3cd]"></a>FMC_SDRAM_SendCommand</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, stm32f4xx_ll_fmc.o(i.FMC_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FMC_SDRAM_SendCommand &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[438]"></a>FMC_SDRAM_Timing_Init</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32f4xx_ll_fmc.o(i.FMC_SDRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_SDRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[3d4]"></a>FixedValueCfg1_StructToJson</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, interface_s2j.o(i.FixedValueCfg1_StructToJson))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FixedValueCfg1_StructToJson &rArr; cJSON_CreateNumber &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToArray
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Struct_To_Json
</UL>

<P><STRONG><a name="[32b]"></a>FloatToBin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, common_data.o(i.FloatToBin))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_R_YCDATA
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_ReadYcData
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_R_NVA
</UL>

<P><STRONG><a name="[3d7]"></a>FreGatherHandleUCB</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, drv_timer.o(i.FreGatherHandleUCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FreGatherHandleUCB &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ReadCapturedValue
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>

<P><STRONG><a name="[3d9]"></a>FreGatherHandleUab</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, drv_timer.o(i.FreGatherHandleUab))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FreGatherHandleUab &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ReadCapturedValue
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>

<P><STRONG><a name="[3b3]"></a>GUIDisplayInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, guidisplay.o(i.GUIDisplayInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = GUIDisplayInit &rArr; userGUIWindowAdd &rArr; GUIWindowDraw &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUIWindowAdd
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinManageInit
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSetbackcolor
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSetForecolor
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserMenuInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi101ThreadEntity
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DzhiChangeFun
</UL>

<P><STRONG><a name="[3e2]"></a>GUIDisplayMian</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, guidisplay.o(i.GUIDisplayMian))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = GUIDisplayMian &rArr; GUIUpdataProgram &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDisplayONOFF
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUITopWindowDisplay
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenLcdDisplay
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyIsNoKey
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyStatus
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdataProgram
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIUpdataProgram
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DzhiChangeDealWith
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi101ThreadEntity
</UL>

<P><STRONG><a name="[3e6]"></a>GUIUpdataProgram</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, guidisplay.o(i.GUIUpdataProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = GUIUpdataProgram &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiUpdateDisplayAll
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiHPointLine
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiHLine
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFont12Align
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFillRect
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiExchangeColor
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiAreaBitMap
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDisplayMian
</UL>

<P><STRONG><a name="[3ea]"></a>GUIWindowDraw</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, lkdguiwindow.o(i.GUIWindowDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = GUIWindowDraw &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiUpdateDisplayAll
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiRect
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiRLine
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiHLine
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFont12Align
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFillRect
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiBiasLine
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUIWindowAdd
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUITopWindowRedraw
</UL>

<P><STRONG><a name="[3ec]"></a>GUIWindowHide</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lkdguiwindow.o(i.GUIWindowHide))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = GUIWindowHide &rArr; GuiFillRect &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUITopWindowHide
</UL>

<P><STRONG><a name="[97]"></a>GetCoNoContent</STRONG> (Thumb, 408 bytes, Stack size 20 bytes, uservariable.o(i.GetCoNoContent))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetCoNoContent
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCoNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uservariable.o(i.SoeCoInfoInit)
</UL>
<P><STRONG><a name="[98]"></a>GetCoNum</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uservariable.o(i.GetCoNum))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCoNoContent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uservariable.o(i.SoeCoInfoInit)
</UL>
<P><STRONG><a name="[3ef]"></a>GetDisplayTime</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, uservariable.o(i.GetDisplayTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetDisplayTime
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBReadSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeModfiyFun
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeWindowFun
</UL>

<P><STRONG><a name="[3cf]"></a>GetFeventNoContent</STRONG> (Thumb, 408 bytes, Stack size 20 bytes, uservariable.o(i.GetFeventNoContent))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetFeventNoContent
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFeventNum
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultEventFun
</UL>

<P><STRONG><a name="[3ce]"></a>GetFeventNum</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uservariable.o(i.GetFeventNum))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultEventFun
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFeventNoContent
</UL>

<P><STRONG><a name="[7f0]"></a>GetFrequency</STRONG> (Thumb, 812 bytes, Stack size 0 bytes, drv_timer.o(i.GetFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watch_thread_entry
</UL>

<P><STRONG><a name="[3e3]"></a>GetKeyStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hmiinout.o(i.GetKeyStatus))
<BR><BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDisplayMian
</UL>

<P><STRONG><a name="[94]"></a>GetSoeNoContent</STRONG> (Thumb, 362 bytes, Stack size 16 bytes, uservariable.o(i.GetSoeNoContent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetSoeNoContent
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSoeNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uservariable.o(i.SoeCoInfoInit)
</UL>
<P><STRONG><a name="[95]"></a>GetSoeNum</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uservariable.o(i.GetSoeNum))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSoeNoContent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uservariable.o(i.SoeCoInfoInit)
</UL>
<P><STRONG><a name="[3f1]"></a>GetTimer1IntervalTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gui_common.o(i.GetTimer1IntervalTick))
<BR><BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntervalTick
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi101RunTimerOut
</UL>

<P><STRONG><a name="[46e]"></a>GetTimer1Tick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_common.o(i.GetTimer1Tick))
<BR><BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentTick
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi101RunTimerOut
</UL>

<P><STRONG><a name="[9a]"></a>GetUlogNoContent</STRONG> (Thumb, 308 bytes, Stack size 20 bytes, uservariable.o(i.GetUlogNoContent))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetUlogNoContent
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUlogNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uservariable.o(i.SoeCoInfoInit)
</UL>
<P><STRONG><a name="[9b]"></a>GetUlogNum</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uservariable.o(i.GetUlogNum))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUlogNoContent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uservariable.o(i.SoeCoInfoInit)
</UL>
<P><STRONG><a name="[2e7]"></a>GetValueArray</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, common_data.o(i.GetValueArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetValueArray
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteValue
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBReadValue
</UL>

<P><STRONG><a name="[3f5]"></a>Get_filenameCfg</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, wave_recording.o(i.Get_filenameCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Get_filenameCfg &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_Comtrade
</UL>

<P><STRONG><a name="[3f6]"></a>Get_filenameDat</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, wave_recording.o(i.Get_filenameDat))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Get_filenameDat &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_Comtrade
</UL>

<P><STRONG><a name="[3f7]"></a>Get_firsttime</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, wave_recording.o(i.Get_firsttime))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Get_firsttime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_Comtrade
</UL>

<P><STRONG><a name="[3f8]"></a>Get_triggertime</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, wave_recording.o(i.Get_triggertime))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Get_triggertime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_Comtrade
</UL>

<P><STRONG><a name="[3e9]"></a>GuiAreaBitMap</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, gui_101_cmd.o(i.GuiAreaBitMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = GuiAreaBitMap &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd101DownControl
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeWindowFun
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIUpdataProgram
</UL>

<P><STRONG><a name="[3eb]"></a>GuiBiasLine</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, gui_101_cmd.o(i.GuiBiasLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = GuiBiasLine &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd101DownControl
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIWindowDraw
</UL>

<P><STRONG><a name="[3f9]"></a>GuiButton</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, gui_101_cmd.o(i.GuiButton))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = GuiButton &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd101DownControl
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageFun
</UL>

<P><STRONG><a name="[39b]"></a>GuiExchangeColor</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, gui_101_cmd.o(i.GuiExchangeColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = GuiExchangeColor &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd101DownControl
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VersionWinFun
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeModfiyFun
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoeCoDisplay
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultEventFun
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDZ
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawList
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawNodes
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordModfiyWinFun
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWordFun
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeWindowFun
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIUpdataProgram
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawModfiyKey
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyFun
</UL>

<P><STRONG><a name="[39c]"></a>GuiFillRect</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, gui_101_cmd.o(i.GuiFillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = GuiFillRect &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd101DownControl
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VersionWinFun
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeModfiyFun
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoeCoDisplay
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultEventFun
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDZ
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIWindowHide
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIWindowDraw
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawList
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedrawMenu
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawNodes
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenu
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawAllMenu
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordModfiyWinFun
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWordFun
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageFun
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeWindowFun
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIUpdataProgram
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawModfiyKey
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyInit
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyFun
</UL>

<P><STRONG><a name="[39d]"></a>GuiFont12Align</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, gui_101_cmd.o(i.GuiFont12Align))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd101DownControl
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VersionWinFun
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeModfiyFun
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoeCoDisplay
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultEventFun
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDZ
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIWindowDraw
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawList
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawNodes
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordModfiyWinFun
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWordFun
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageFun
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeWindowFun
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIUpdataProgram
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DzhiChangeFun
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawModfiyKey
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyInit
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyFun
</UL>

<P><STRONG><a name="[3a5]"></a>GuiHLine</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, gui_101_cmd.o(i.GuiHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = GuiHLine &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd101DownControl
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VersionWinFun
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoeCoDisplay
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultEventFun
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDZ
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIWindowDraw
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawNodes
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWordFun
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageFun
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeWindowFun
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIUpdataProgram
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawModfiyKey
</UL>

<P><STRONG><a name="[3a3]"></a>GuiHPointLine</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, gui_101_cmd.o(i.GuiHPointLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = GuiHPointLine &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd101DownControl
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeModfiyFun
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoeCoDisplay
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultEventFun
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDZ
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawList
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWordFun
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageFun
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeWindowFun
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIUpdataProgram
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyInit
</UL>

<P><STRONG><a name="[3fa]"></a>GuiMenuCurrentNodeHide</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, lkdguimenu.o(i.GuiMenuCurrentNodeHide))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = GuiMenuCurrentNodeHide &rArr; RedrawMenu &rArr; DrawNodes &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedrawMenu
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetbNodesNum
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiUpdateDisplayAll
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuControlFun
</UL>

<P><STRONG><a name="[3fc]"></a>GuiMenuCurrentNodeSonUnfold</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lkdguimenu.o(i.GuiMenuCurrentNodeSonUnfold))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = GuiMenuCurrentNodeSonUnfold &rArr; GuiMenuNodesDisplay &rArr; DrawMenu &rArr; DrawNodes &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuNodesDisplay
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetpNodeFromIndex
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiUpdateDisplayAll
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuWindowFun
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemDealWith
</UL>

<P><STRONG><a name="[3ff]"></a>GuiMenuGetCurrentpNode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lkdguimenu.o(i.GuiMenuGetCurrentpNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GuiMenuGetCurrentpNode
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetpNodeFromIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuControlFun
</UL>

<P><STRONG><a name="[4e5]"></a>GuiMenuInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lkdguimenu.o(i.GuiMenuInit))
<BR><BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserMenuInit
</UL>

<P><STRONG><a name="[400]"></a>GuiMenuItemDownMove</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lkdguimenu.o(i.GuiMenuItemDownMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = GuiMenuItemDownMove &rArr; DrawNodes &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawNodes
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiUpdateDisplayAll
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuControlFun
</UL>

<P><STRONG><a name="[401]"></a>GuiMenuItemUpMove</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lkdguimenu.o(i.GuiMenuItemUpMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = GuiMenuItemUpMove &rArr; DrawNodes &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawNodes
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiUpdateDisplayAll
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuControlFun
</UL>

<P><STRONG><a name="[2d0]"></a>GuiMenuRedrawMenu</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lkdguimenu.o(i.GuiMenuRedrawMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = GuiMenuRedrawMenu &rArr; DrawAllMenu &rArr; DrawNodes &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawAllMenu
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiUpdateDisplayAll
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoxinFun
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VersionWinFun
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeModfiyFun
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoeCoDisplay
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultEventFun
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSendWinFun
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaoCeDisplay
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordModfiyWinFun
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWordFun
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyDisplay
</UL>

<P><STRONG><a name="[3ac]"></a>GuiRLine</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, gui_101_cmd.o(i.GuiRLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = GuiRLine &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd101DownControl
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIWindowDraw
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawNodes
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeWindowFun
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawModfiyKey
</UL>

<P><STRONG><a name="[3a4]"></a>GuiRPointLine</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, gui_101_cmd.o(i.GuiRPointLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = GuiRPointLine &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd101DownControl
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeModfiyFun
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoeCoDisplay
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultEventFun
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDZ
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawList
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeWindowFun
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyInit
</UL>

<P><STRONG><a name="[3a2]"></a>GuiRect</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, gui_101_cmd.o(i.GuiRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = GuiRect &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd101DownControl
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIWindowDraw
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawList
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordModfiyWinFun
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyInit
</UL>

<P><STRONG><a name="[3e0]"></a>GuiSetForecolor</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, gui_101_cmd.o(i.GuiSetForecolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = GuiSetForecolor &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd101DownControl
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDisplayInit
</UL>

<P><STRONG><a name="[3e1]"></a>GuiSetbackcolor</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, gui_101_cmd.o(i.GuiSetbackcolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = GuiSetbackcolor &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd101DownControl
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDisplayInit
</UL>

<P><STRONG><a name="[2cb]"></a>GuiUpdateDisplayAll</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gui_101_cmd.o(i.GuiUpdateDisplayAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = GuiUpdateDisplayAll &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCmd101Down
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd101DownControl
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoxinFun
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VersionWinFun
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeModfiyFun
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoeCoDisplay
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultEventFun
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSendWinFun
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIWindowDraw
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuRedrawMenu
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuItemUpMove
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuItemDownMove
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuCurrentNodeSonUnfold
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuCurrentNodeHide
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaoCeDisplay
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordModfiyWinFun
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWordFun
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageFun
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeWindowFun
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIUpdataProgram
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DzhiChangeFun
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawModfiyKey
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyFun
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyDisplay
</UL>

<P><STRONG><a name="[2ca]"></a>GuiVScroll</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, gui_101_cmd.o(i.GuiVScroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = GuiVScroll &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd101DownControl
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoxinFun
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VersionWinFun
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoeCoDisplay
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultEventFun
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSendWinFun
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaoCeDisplay
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyDisplay
</UL>

<P><STRONG><a name="[395]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 574 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream4_IRQHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[3ba]"></a>HAL_Delay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board.o(i.HAL_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
</UL>

<P><STRONG><a name="[7d4]"></a>HAL_ETH_DMARxDescListInit</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32f4xx_hal_eth.o(i.HAL_ETH_DMARxDescListInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ETH_DMARxDescListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>

<P><STRONG><a name="[7d3]"></a>HAL_ETH_DMATxDescListInit</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f4xx_hal_eth.o(i.HAL_ETH_DMATxDescListInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ETH_DMATxDescListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>

<P><STRONG><a name="[402]"></a>HAL_ETH_DeInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_eth.o(i.HAL_ETH_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ETH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>

<P><STRONG><a name="[406]"></a>HAL_ETH_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_eth.o(i.HAL_ETH_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[7d5]"></a>HAL_ETH_GetReceivedFrame_IT</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, stm32f4xx_hal_eth.o(i.HAL_ETH_GetReceivedFrame_IT))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_rx
</UL>

<P><STRONG><a name="[3b7]"></a>HAL_ETH_IRQHandler</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, stm32f4xx_hal_eth.o(i.HAL_ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = HAL_ETH_IRQHandler &rArr; HAL_ETH_RxCpltCallback &rArr; eth_device_ready &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_TxCpltCallback
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_RxCpltCallback
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[407]"></a>HAL_ETH_Init</STRONG> (Thumb, 642 bytes, Stack size 32 bytes, stm32f4xx_hal_eth.o(i.HAL_ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = HAL_ETH_Init &rArr; ETH_MACDMAConfig &rArr; ETH_MACAddressConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>

<P><STRONG><a name="[403]"></a>HAL_ETH_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_eth.o(i.HAL_ETH_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_DeInit
</UL>

<P><STRONG><a name="[408]"></a>HAL_ETH_MspInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_eth.o(i.HAL_ETH_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_ETH_MspInit &rArr; GPIO_Configuration &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[40b]"></a>HAL_ETH_ReadPHYRegister</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, stm32f4xx_hal_eth.o(i.HAL_ETH_ReadPHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ETH_ReadPHYRegister &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[404]"></a>HAL_ETH_RxCpltCallback</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, drv_eth.o(i.HAL_ETH_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = HAL_ETH_RxCpltCallback &rArr; eth_device_ready &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[40e]"></a>HAL_ETH_Start</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_hal_eth.o(i.HAL_ETH_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ETH_Start &rArr; ETH_MACTransmissionEnable &rArr; ETH_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACTransmissionEnable
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACReceptionEnable
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_FlushTransmitFIFO
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATransmissionEnable
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAReceptionEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>

<P><STRONG><a name="[7d6]"></a>HAL_ETH_TransmitFrame</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, stm32f4xx_hal_eth.o(i.HAL_ETH_TransmitFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ETH_TransmitFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_tx
</UL>

<P><STRONG><a name="[405]"></a>HAL_ETH_TxCpltCallback</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_eth.o(i.HAL_ETH_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = HAL_ETH_TxCpltCallback &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[40a]"></a>HAL_ETH_WritePHYRegister</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, stm32f4xx_hal_eth.o(i.HAL_ETH_WritePHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ETH_WritePHYRegister &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[3c2]"></a>HAL_FLASHEx_OBGetConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_flash_ex.o(i.HAL_FLASHEx_OBGetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FLASHEx_OBGetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_GetWRP
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_GetUser
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_GetRDP
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_GetBOR
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Init
</UL>

<P><STRONG><a name="[3c5]"></a>HAL_FLASHEx_OBProgram</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32f4xx_hal_flash_ex.o(i.HAL_FLASHEx_OBProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_FLASHEx_OBProgram &rArr; FLASH_OB_UserConfig &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_UserConfig
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_RDP_LevelConfig
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_EnableWRP
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_DisableWRP
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_BOR_LevelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Init
</UL>

<P><STRONG><a name="[3c8]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Init
</UL>

<P><STRONG><a name="[3c6]"></a>HAL_FLASH_OB_Launch</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_OB_Launch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_FLASH_OB_Launch &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Init
</UL>

<P><STRONG><a name="[3c7]"></a>HAL_FLASH_OB_Lock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_OB_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Init
</UL>

<P><STRONG><a name="[3c4]"></a>HAL_FLASH_OB_Unlock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_OB_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Init
</UL>

<P><STRONG><a name="[3c3]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Init
</UL>

<P><STRONG><a name="[466]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 336 bytes, Stack size 20 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[417]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, drv_gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[3be]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[28e]"></a>HAL_GPIO_Init</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_mode
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_irq_enable
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi2_init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi5_init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi4_init
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iic_gpio_init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7616_FSMC_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_led_init
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
</UL>

<P><STRONG><a name="[540]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_read
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iic_get_sda
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iic_get_scl
</UL>

<P><STRONG><a name="[542]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_alarm_led_operate
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_pin_reset
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_write
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi5_init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi4_init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iic_set_sda
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iic_set_scl
</UL>

<P><STRONG><a name="[3cb]"></a>HAL_GetTick</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, board.o(i.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_w5500_init
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[41a]"></a>HAL_IWDG_Init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_hal_iwdg.o(i.HAL_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_IWDG_Init &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_iwdg_init
</UL>

<P><STRONG><a name="[7a4]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_iwdg.o(i.HAL_IWDG_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_wdg_deal_task
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_wdg_deal_init
</UL>

<P><STRONG><a name="[791]"></a>HAL_IWDG_Start</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32f4xx_hal_iwdg.o(i.HAL_IWDG_Start))
<BR><BR>[Called By]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_iwdg_init
</UL>

<P><STRONG><a name="[41b]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[41d]"></a>HAL_InitTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board.o(i.HAL_InitTick))
<BR><BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[41e]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[467]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_irq_enable
</UL>

<P><STRONG><a name="[3dd]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_irq_enable
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_WakeUp
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[3dc]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_irq_enable
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_system_clock_init
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_WakeUp
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[41c]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[430]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[421]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 856 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_system_clock_init
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[422]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_system_clock_init
</UL>

<P><STRONG><a name="[409]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_system_clock_init
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[424]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[425]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[423]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[426]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1098 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_system_clock_init
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[42b]"></a>HAL_RTCEx_AlarmBEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(i.HAL_RTCEx_AlarmBEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[4b5]"></a>HAL_RTCEx_BKUPRead</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(i.HAL_RTCEx_BKUPRead))
<BR><BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[4b7]"></a>HAL_RTCEx_BKUPWrite</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc_ex.o(i.HAL_RTCEx_BKUPWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTCEx_BKUPWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[4b9]"></a>HAL_RTCEx_SetWakeUpTimer_IT</STRONG> (Thumb, 316 bytes, Stack size 12 bytes, stm32f4xx_hal_rtc_ex.o(i.HAL_RTCEx_SetWakeUpTimer_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RTCEx_SetWakeUpTimer_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_WakeUp
</UL>

<P><STRONG><a name="[427]"></a>HAL_RTCEx_WakeUpTimerEventCallback</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, drv_rtc.o(i.HAL_RTCEx_WakeUpTimerEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTCEx_WakeUpTimerEventCallback &rArr; rt_device_read &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerIRQHandler
</UL>

<P><STRONG><a name="[428]"></a>HAL_RTCEx_WakeUpTimerIRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc_ex.o(i.HAL_RTCEx_WakeUpTimerIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RTCEx_WakeUpTimerIRQHandler &rArr; HAL_RTCEx_WakeUpTimerEventCallback &rArr; rt_device_read &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[42a]"></a>HAL_RTC_AlarmAEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_rtc.o(i.HAL_RTC_AlarmAEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[429]"></a>HAL_RTC_AlarmIRQHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_AlarmIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_AlarmIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_AlarmBEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[3f4]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRTCTimeStamp
</UL>

<P><STRONG><a name="[3f3]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRTCTimeStamp
</UL>

<P><STRONG><a name="[42d]"></a>HAL_RTC_Init</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[42e]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 84 bytes, Stack size 112 bytes, drv_rtc.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[431]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTCTimeStamp
</UL>

<P><STRONG><a name="[434]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTCTimeStamp
</UL>

<P><STRONG><a name="[433]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_WaitForSynchro &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[435]"></a>HAL_SDRAM_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal_sdram.o(i.HAL_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Timing_Init
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdram_init
</UL>

<P><STRONG><a name="[436]"></a>HAL_SDRAM_MspInit</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, drv_sdram.o(i.HAL_SDRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[439]"></a>HAL_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f4xx_hal_sdram.o(i.HAL_SDRAM_ProgramRefreshRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Initialization_Sequence
</UL>

<P><STRONG><a name="[43b]"></a>HAL_SDRAM_SendCommand</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f4xx_hal_sdram.o(i.HAL_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Initialization_Sequence
</UL>

<P><STRONG><a name="[43c]"></a>HAL_SPI_Init</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[43d]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[28f]"></a>HAL_SRAM_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_hal_sram.o(i.HAL_SRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SRAM_Init &rArr; FMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_MspInit
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NORSRAM_Timing_Init
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NORSRAM_Init
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7616_FSMC_Init
</UL>

<P><STRONG><a name="[43e]"></a>HAL_SRAM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sram.o(i.HAL_SRAM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[79e]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_system_clock_init
</UL>

<P><STRONG><a name="[442]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_system_clock_init
</UL>

<P><STRONG><a name="[454]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[456]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[443]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Init
</UL>

<P><STRONG><a name="[444]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, drv_timer.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[4db]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Init
</UL>

<P><STRONG><a name="[446]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drv_timer.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_IC_CaptureCallback &rArr; FreGatherHandleUab &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreGatherHandleUab
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreGatherHandleUCB
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[447]"></a>HAL_TIM_IC_ConfigChannel</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_IC_ConfigChannel &rArr; TIM_TI1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI4_SetConfig
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI3_SetConfig
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_CH1_Cap_Init
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_CH1_Cap_Init
</UL>

<P><STRONG><a name="[44c]"></a>HAL_TIM_IC_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_TIM_IC_Init &rArr; HAL_TIM_IC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_CH1_Cap_Init
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_CH1_Cap_Init
</UL>

<P><STRONG><a name="[44d]"></a>HAL_TIM_IC_MspInit</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, drv_timer.o(i.HAL_TIM_IC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_IC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
</UL>

<P><STRONG><a name="[44e]"></a>HAL_TIM_IC_Start_IT</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_IC_Start_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_CH1_Cap_Init
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_CH1_Cap_Init
</UL>

<P><STRONG><a name="[450]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[451]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[457]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_PWM_Init
</UL>

<P><STRONG><a name="[45c]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_PWM_Init &rArr; HAL_TIM_PWM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_PWM_Init
</UL>

<P><STRONG><a name="[45d]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, drv_timer.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_TIM_PWM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[452]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[45e]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_PWM_Init
</UL>

<P><STRONG><a name="[453]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, drv_timer.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_wdg_deal_task
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_do_operate
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_di_check_task
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[3d8]"></a>HAL_TIM_ReadCapturedValue</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ReadCapturedValue))
<BR><BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreGatherHandleUab
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreGatherHandleUCB
</UL>

<P><STRONG><a name="[455]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[461]"></a>HAL_UART_DeInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_UART_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usart_configure
</UL>

<P><STRONG><a name="[463]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usart_configure
</UL>

<P><STRONG><a name="[462]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, drv_usart.o(i.HAL_UART_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[464]"></a>HAL_UART_MspInit</STRONG> (Thumb, 846 bytes, Stack size 32 bytes, drv_usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[468]"></a>Hmi101CmdResult</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gui_101_cmd.o(i.Hmi101CmdResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = Hmi101CmdResult &rArr; HmiCmd002Fun &rArr; KeyCmdResult &rArr; YaoKongKeyResult &rArr; YaoKongKeyCmdResult &rArr; rt_multi_telecontrl_operate &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCmd003Fun
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCmd002Fun
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmi101Scan
</UL>

<P><STRONG><a name="[394]"></a>Hmi101Init</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, gui_101_cmd.o(i.Hmi101Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Hmi101Init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiThreadDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SlaveTask
</UL>

<P><STRONG><a name="[393]"></a>Hmi101RunTimerOut</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gui_101_cmd.o(i.Hmi101RunTimerOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Hmi101RunTimerOut
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimer1Tick
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimer1IntervalTick
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SlaveTask
</UL>

<P><STRONG><a name="[474]"></a>Hmi101ThreadRunMontor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_101_cmd.o(i.Hmi101ThreadRunMontor))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi101ThreadEntity
</UL>

<P><STRONG><a name="[476]"></a>HmiCmd001Fill</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, gui_101_cmd.o(i.HmiCmd001Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = HmiCmd001Fill &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCmd101Down
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd101DownControl
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULedStateSend
</UL>

<P><STRONG><a name="[469]"></a>HmiCmd002Fun</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gui_101_cmd.o(i.HmiCmd002Fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = HmiCmd002Fun &rArr; KeyCmdResult &rArr; YaoKongKeyResult &rArr; YaoKongKeyCmdResult &rArr; rt_multi_telecontrl_operate &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi101CmdResult
</UL>

<P><STRONG><a name="[46a]"></a>HmiCmd003Fun</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, gui_101_cmd.o(i.HmiCmd003Fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HmiCmd003Fun
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi101CmdResult
</UL>

<P><STRONG><a name="[472]"></a>HmiInOutInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hmiinout.o(i.HmiInOutInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = HmiInOutInit &rArr; YaoxinMapToLed &rArr; ULedStateSend &rArr; HmiCmd001Fill &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoxinMapToLed
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi101ThreadEntity
</UL>

<P><STRONG><a name="[46b]"></a>HmiThreadDelete</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gui_101_cmd.o(i.HmiThreadDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HmiThreadDelete &rArr; rt_event_detach &rArr; rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_static_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi101Init
</UL>

<P><STRONG><a name="[d]"></a>HomeWindowFun</STRONG> (Thumb, 854 bytes, Stack size 48 bytes, guidisplay.o(i.HomeWindowFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = HomeWindowFun &rArr; userGUIWindowAdd &rArr; GUIWindowDraw &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentTick
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntervalTick
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUIWindowAdd
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiUpdateDisplayAll
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiRPointLine
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiRLine
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiHPointLine
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiHLine
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFont12Align
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFillRect
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiExchangeColor
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiAreaBitMap
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayTime
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidisplay.o(.data)
</UL>
<P><STRONG><a name="[47d]"></a>InherentParaCfg_StructToJson</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, interface_s2j.o(i.InherentParaCfg_StructToJson))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = InherentParaCfg_StructToJson &rArr; cJSON_CreateNumber &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Struct_To_Json
</UL>

<P><STRONG><a name="[2d7]"></a>InitAnalogChannelData</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, wave_recording.o(i.InitAnalogChannelData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InitAnalogChannelData
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatConfigurationHandler
</UL>

<P><STRONG><a name="[2d8]"></a>InitDigitalChannelData</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, wave_recording.o(i.InitDigitalChannelData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitDigitalChannelData
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatConfigurationHandler
</UL>

<P><STRONG><a name="[477]"></a>KeyCmdResult</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, hmiinout.o(i.KeyCmdResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = KeyCmdResult &rArr; YaoKongKeyResult &rArr; YaoKongKeyCmdResult &rArr; rt_multi_telecontrl_operate &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoKongKeyResult
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchResult
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuKeyResult
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCmd002Fun
</UL>

<P><STRONG><a name="[473]"></a>LedChangeCheck</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, hmiinout.o(i.LedChangeCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = LedChangeCheck &rArr; ULedStateSend &rArr; HmiCmd001Fill &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULedStateSet
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULedStateSend
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedReverseScan
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi101ThreadEntity
</UL>

<P><STRONG><a name="[484]"></a>MainProtectCtrlClock</STRONG> (Thumb, 1294 bytes, Stack size 8 bytes, main_protect_ctrl.o(i.MainProtectCtrlClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MainProtectCtrlClock &rArr; state_judge &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_judge_rest
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_judge
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondaryRecloseLock_rest
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondaryRecloseLock_ctrl
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rest_ctrl
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reclose_rest
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reclose_ctrl
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recloseI0_rest
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recloseI0_ctrl
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;overcur_rest
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;overcur_ctrl
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;overcurI0_rest
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;overcurI0_ctrl
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openCloseLocking_rest
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openCloseLocking_ctrl
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lossTrip_rest
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lossTrip_ctrl
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iACC_rest
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iACC_ctrl
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVolClose_rest
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVolClose_ctrl
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fewVolLock_rest
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fewVolLock_ctrl
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubleVol_rest
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubleVol_ctrl
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timers
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleLossClose_rest
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleLossClose_ctrl
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OverTelemetryUp_ctrl
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OverTelemetryDown_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_protect_thread_entry
</UL>

<P><STRONG><a name="[4a4]"></a>MainProtectCtrlInit</STRONG> (Thumb, 6666 bytes, Stack size 8 bytes, main_protect_ctrl.o(i.MainProtectCtrlInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = MainProtectCtrlInit &rArr; addtimers &rArr; list_ins_next &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addtimers
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_protect_thread_entry
</UL>

<P><STRONG><a name="[2e9]"></a>MainProtectCtrlReset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main_protect_ctrl.o(i.MainProtectCtrlReset))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBRevert
</UL>

<P><STRONG><a name="[21]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>MenuControlFun</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, guidisplay.o(i.MenuControlFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = MenuControlFun &rArr; MenuItemDealWith &rArr; GuiMenuCurrentNodeSonUnfold &rArr; GuiMenuNodesDisplay &rArr; DrawMenu &rArr; DrawNodes &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemDealWith
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUITopWindowRedraw
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUITopWindowHide
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuItemUpMove
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuItemDownMove
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuGetCurrentpNode
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuCurrentNodeHide
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidisplay.o(i.UserMenuInit)
</UL>
<P><STRONG><a name="[47e]"></a>MenuKeyResult</STRONG> (Thumb, 374 bytes, Stack size 0 bytes, hmiinout.o(i.MenuKeyResult))
<BR><BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCmdResult
</UL>

<P><STRONG><a name="[4d1]"></a>MenuTreeSNodeInsert</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lkdguimenu.o(i.MenuTreeSNodeInsert))
<BR><BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDzhiSonNode
</UL>

<P><STRONG><a name="[19]"></a>MessageFun</STRONG> (Thumb, 544 bytes, Stack size 24 bytes, guidisplay.o(i.MessageFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = MessageFun &rArr; userGUITopWindowRedraw &rArr; GUIWindowDraw &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUITopWindowRedraw
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUITopWindowHide
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiUpdateDisplayAll
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiHPointLine
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiHLine
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFont12Align
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFillRect
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiButton
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidisplay.o(.data)
</UL>
<P><STRONG><a name="[331]"></a>MonitoringDataTransmission</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, channel_monitor.o(i.MonitoringDataTransmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = MonitoringDataTransmission &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_WriteData
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_ReadData
</UL>

<P><STRONG><a name="[1f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4a8]"></a>NeedPasswordCheck</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, guidisplay.o(i.NeedPasswordCheck))
<BR><BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemDealWith
</UL>

<P><STRONG><a name="[160]"></a>OP_add_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_add_byte))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[162]"></a>OP_add_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_add_dword))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[161]"></a>OP_add_word</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_add_word))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[16f]"></a>OP_and_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_and_byte))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[171]"></a>OP_and_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_and_dword))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[170]"></a>OP_and_word</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_and_word))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[178]"></a>OP_bw_byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_bw_byte))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[17a]"></a>OP_bw_dword</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_bw_dword))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[179]"></a>OP_bw_word</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_bw_word))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[18b]"></a>OP_call</STRONG> (Thumb, 898 bytes, Stack size 152 bytes, finsh_ops.o(i.OP_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OP_call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[166]"></a>OP_div_byte</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_div_byte))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[168]"></a>OP_div_dword</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_div_dword))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[167]"></a>OP_div_word</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_div_word))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[181]"></a>OP_ld_byte</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_ld_byte))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[183]"></a>OP_ld_dword</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_ld_dword))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[184]"></a>OP_ld_value_byte</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_ld_value_byte))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[18c]"></a>OP_ld_value_byte_stack</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_ld_value_byte_stack))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[186]"></a>OP_ld_value_dword</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_ld_value_dword))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[18e]"></a>OP_ld_value_dword_stack</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_ld_value_dword_stack))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[185]"></a>OP_ld_value_word</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_ld_value_word))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[18d]"></a>OP_ld_value_word_stack</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_ld_value_word_stack))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[182]"></a>OP_ld_word</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_ld_word))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[169]"></a>OP_mod_byte</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_mod_byte))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[16b]"></a>OP_mod_dword</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_mod_dword))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[16a]"></a>OP_mod_word</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_mod_word))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[16c]"></a>OP_mul_byte</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_mul_byte))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[16e]"></a>OP_mul_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_mul_dword))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[16d]"></a>OP_mul_word</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_mul_word))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[15f]"></a>OP_no_op</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_no_op))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[172]"></a>OP_or_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_or_byte))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[174]"></a>OP_or_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_or_dword))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[173]"></a>OP_or_word</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_or_word))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[18a]"></a>OP_pop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_pop))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[17b]"></a>OP_shl_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_shl_byte))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[17d]"></a>OP_shl_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_shl_dword))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[17c]"></a>OP_shl_word</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_shl_word))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[17e]"></a>OP_shr_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_shr_byte))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[180]"></a>OP_shr_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_shr_dword))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[17f]"></a>OP_shr_word</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_shr_word))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[187]"></a>OP_st_byte</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_st_byte))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[189]"></a>OP_st_dword</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_st_dword))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[188]"></a>OP_st_word</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_st_word))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[163]"></a>OP_sub_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_sub_byte))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[165]"></a>OP_sub_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_sub_dword))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[164]"></a>OP_sub_word</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_sub_word))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[175]"></a>OP_xor_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_xor_byte))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[177]"></a>OP_xor_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_xor_dword))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[176]"></a>OP_xor_word</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(i.OP_xor_word))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[3e5]"></a>OpenLcdDisplay</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gui_101_cmd.o(i.OpenLcdDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = OpenLcdDisplay &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCmd101Down
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd101DownControl
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDisplayONOFF
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDisplayMian
</UL>

<P><STRONG><a name="[4ab]"></a>ParameterCfg_StructToJson</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, interface_s2j.o(i.ParameterCfg_StructToJson))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ParameterCfg_StructToJson &rArr; cJSON_CreateNumber &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToArray
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Struct_To_Json
</UL>

<P><STRONG><a name="[2ed]"></a>ParameterCheck</STRONG> (Thumb, 2830 bytes, Stack size 224 bytes, common_data.o(i.ParameterCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteSOE
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinff
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_save_value_to_fram
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_read_config_from_fram
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBSwitchValueArea
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_protect_thread_entry
</UL>

<P><STRONG><a name="[1a]"></a>PassWordFun</STRONG> (Thumb, 810 bytes, Stack size 32 bytes, guidisplay.o(i.PassWordFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = PassWordFun &rArr; GuiMenuRedrawMenu &rArr; DrawAllMenu &rArr; DrawNodes &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUITopWindowRedraw
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUITopWindowHide
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuRedrawMenu
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiUpdateDisplayAll
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiHPointLine
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiHLine
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFont12Align
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFillRect
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiExchangeColor
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidisplay.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>PasswordModfiyWinFun</STRONG> (Thumb, 1448 bytes, Stack size 40 bytes, guidisplay.o(i.PasswordModfiyWinFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = PasswordModfiyWinFun &rArr; GuiMenuRedrawMenu &rArr; DrawAllMenu &rArr; DrawNodes &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_fram_record_write
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUITopWindowRedraw
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUITopWindowHide
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuRedrawMenu
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiUpdateDisplayAll
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiRect
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFont12Align
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFillRect
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiExchangeColor
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidisplay.o(.data)
</UL>
<P><STRONG><a name="[2e0]"></a>ProductID_StructToJson</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, interface_s2j.o(i.ProductID_StructToJson))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ProductID_StructToJson &rArr; cJSON_CreateString &rArr; cJSON_strdup &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_JsonFile
</UL>

<P><STRONG><a name="[776]"></a>QueueCreate</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, queue.o(i.QueueCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = QueueCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dp83848_tcpserver_thread_entry
</UL>

<P><STRONG><a name="[651]"></a>QueueRead</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, queue.o(i.QueueRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QueueRead
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_tcpserver_getc
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp83848_tcpserver_getc
</UL>

<P><STRONG><a name="[4b1]"></a>QueueRecordToSDRAM</STRONG> (Thumb, 1632 bytes, Stack size 24 bytes, wave_recording.o(i.QueueRecordToSDRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QueueRecordToSDRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ad7616_data
</UL>

<P><STRONG><a name="[4b3]"></a>QueueWrite</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, queue.o(i.QueueWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = QueueWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueWriteBlock
</UL>

<P><STRONG><a name="[4b2]"></a>QueueWriteBlock</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, queue.o(i.QueueWriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = QueueWriteBlock &rArr; QueueWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dp83848_tcpserver_thread_entry
</UL>

<P><STRONG><a name="[51]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_rtc.o(i.RTC_Alarm_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_Alarm_IRQHandler &rArr; HAL_RTC_AlarmIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[42c]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[432]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[42f]"></a>RTC_EnterInitMode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_EnterInitMode &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[4b4]"></a>RTC_Init</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, drv_rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = RTC_Init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTCTimeStamp
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_init
</UL>

<P><STRONG><a name="[4b8]"></a>RTC_Set_WakeUp</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, drv_rtc.o(i.RTC_Set_WakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RTC_Set_WakeUp &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_init
</UL>

<P><STRONG><a name="[2b]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_rtc.o(i.RTC_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RTC_WKUP_IRQHandler &rArr; HAL_RTCEx_WakeUpTimerIRQHandler &rArr; HAL_RTCEx_WakeUpTimerEventCallback &rArr; rt_device_read &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4c5]"></a>ReadDoc_Record</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, file_operate.o(i.ReadDoc_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ReadDoc_Record &rArr; open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_fram_record_write
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_WriteFileAct
</UL>

<P><STRONG><a name="[24]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4cb]"></a>Scan_Files</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, file_operate.o(i.Scan_Files))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = Scan_Files &rArr;  Scan_Files (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Files
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_DirCall
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_Dir_Clear
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Files
</UL>

<P><STRONG><a name="[4cf]"></a>SetDisplayTime</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, uservariable.o(i.SetDisplayTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SetDisplayTime &rArr; DBWriteSystemTime &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteSystemTime
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBReadSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeModfiyFun
</UL>

<P><STRONG><a name="[4d0]"></a>SetDzhiSonNode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, guidisplay.o(i.SetDzhiSonNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetDzhiSonNode
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuTreeSNodeInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserDefineDzhiInit
</UL>

<P><STRONG><a name="[3e4]"></a>SetKeyIsNoKey</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hmiinout.o(i.SetKeyIsNoKey))
<BR><BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDisplayMian
</UL>

<P><STRONG><a name="[2cc]"></a>SetMessageWin</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, guidisplay.o(i.SetMessageWin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetMessageWin
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSendWinFun
</UL>

<P><STRONG><a name="[4a9]"></a>SetPassWordWin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidisplay.o(i.SetPassWordWin))
<BR><BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemDealWith
</UL>

<P><STRONG><a name="[8a3]"></a>SoeCoInfoInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, uservariable.o(i.SoeCoInfoInit))
<BR><BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userVariableDisplayInit
</UL>

<P><STRONG><a name="[14]"></a>SoeCoWinFun</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, guidisplay.o(i.SoeCoWinFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = SoeCoWinFun &rArr; SoeCoDisplay &rArr; GuiMenuRedrawMenu &rArr; DrawAllMenu &rArr; DrawNodes &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoeCoDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidisplay.o(.data)
</UL>
<P><STRONG><a name="[480]"></a>SwitchResult</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, hmiinout.o(i.SwitchResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SwitchResult &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCmdResult
</UL>

<P><STRONG><a name="[27]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[4d7]"></a>TIM2_CH1_Cap_Init</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, drv_timer.o(i.TIM2_CH1_Cap_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TIM2_CH1_Cap_Init &rArr; HAL_TIM_IC_Init &rArr; HAL_TIM_IC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_frequency_timer_int
</UL>

<P><STRONG><a name="[44]"></a>TIM2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_timer.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4d8]"></a>TIM3_CH1_Cap_Init</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, drv_timer.o(i.TIM3_CH1_Cap_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TIM3_CH1_Cap_Init &rArr; HAL_TIM_IC_Init &rArr; HAL_TIM_IC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_frequency_timer_int
</UL>

<P><STRONG><a name="[45]"></a>TIM3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_timer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4d9]"></a>TIM5_PWM_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, drv_timer.o(i.TIM5_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TIM5_PWM_Init &rArr; HAL_TIM_PWM_Init &rArr; HAL_TIM_PWM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_adc_init
</UL>

<P><STRONG><a name="[5e]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_timer.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4da]"></a>TIM6_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, drv_timer.o(i.TIM6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIM6_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_tim1ms_init
</UL>

<P><STRONG><a name="[5f]"></a>TIM7_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_timer.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TIM7_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[29a]"></a>TIME_TO_STR</STRONG> (Thumb, 226 bytes, Stack size 280 bytes, file_operate.o(i.TIME_TO_STR))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = TIME_TO_STR &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_SOE
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_FEVNET
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_CO
</UL>

<P><STRONG><a name="[445]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[44f]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
</UL>

<P><STRONG><a name="[459]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[448]"></a>TIM_TI1_SetConfig</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.TIM_TI1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[4d5]"></a>TelecontrolCfg_StructToJson</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, interface_s2j.o(i.TelecontrolCfg_StructToJson))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TelecontrolCfg_StructToJson &rArr; cJSON_CreateNumber &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Struct_To_Json
</UL>

<P><STRONG><a name="[4d3]"></a>TelemetryCfg_StructToJson</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, interface_s2j.o(i.TelemetryCfg_StructToJson))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TelemetryCfg_StructToJson &rArr; cJSON_CreateNumber &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Struct_To_Json
</UL>

<P><STRONG><a name="[4d4]"></a>TelesignalCfg_StructToJson</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, interface_s2j.o(i.TelesignalCfg_StructToJson))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TelesignalCfg_StructToJson &rArr; cJSON_CreateNumber &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToArray
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Struct_To_Json
</UL>

<P><STRONG><a name="[5c]"></a>UART4_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = UART4_IRQHandler &rArr; uart_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>UART5_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = UART5_IRQHandler &rArr; uart_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[483]"></a>ULedStateSend</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hmiinout.o(i.ULedStateSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ULedStateSend &rArr; HmiCmd001Fill &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCmd001Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedChangeCheck
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoxinMapToLed
</UL>

<P><STRONG><a name="[482]"></a>ULedStateSet</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, hmiinout.o(i.ULedStateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ULedStateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedChangeCheck
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoxinMapToLed
</UL>

<P><STRONG><a name="[4d]"></a>USART1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = USART1_IRQHandler &rArr; uart_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>USART3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = USART3_IRQHandler &rArr; uart_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>USART6_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = USART6_IRQHandler &rArr; uart_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3b2]"></a>UserDefineDzhiInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, uservariable.o(i.UserDefineDzhiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = UserDefineDzhiInit &rArr; Dzhi1DisplayInit &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dzhi1DisplayInit
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDzhiSonNode
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userVariableDisplayInit
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DzhiChangeFun
</UL>

<P><STRONG><a name="[4aa]"></a>UserItemsUseDealWith</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, guidisplay.o(i.UserItemsUseDealWith))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserItemsUseDealWith
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDingZhiSetOrSee
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemDealWith
</UL>

<P><STRONG><a name="[3de]"></a>UserMenuInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, guidisplay.o(i.UserMenuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserMenuInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDisplayInit
</UL>

<P><STRONG><a name="[5b2]"></a>WIZCHIP_READ</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, drv_w5500.o(i.WIZCHIP_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_close
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphypmode
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphylink
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphyconf
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetmode
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_gettimeout
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetmode
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterruptmask
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterrupt
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
</UL>

<P><STRONG><a name="[8a7]"></a>WIZCHIP_READ_BUF</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, drv_w5500.o(i.WIZCHIP_READ_BUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetinfo
</UL>

<P><STRONG><a name="[5b1]"></a>WIZCHIP_WRITE</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, drv_w5500.o(i.WIZCHIP_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_close
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphyconf
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_settimeout
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetmode
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setinterruptmask
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_clrinterrupt
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
</UL>

<P><STRONG><a name="[8a6]"></a>WIZCHIP_WRITE_BUF</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, drv_w5500.o(i.WIZCHIP_WRITE_BUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetinfo
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
</UL>

<P><STRONG><a name="[3df]"></a>WinManageInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lkdguiwindow.o(i.WinManageInit))
<BR><BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDisplayInit
</UL>

<P><STRONG><a name="[4e6]"></a>YaoKongKeyCmdResult</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, hmiinout.o(i.YaoKongKeyCmdResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = YaoKongKeyCmdResult &rArr; rt_multi_telecontrl_operate &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_do_operate
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_telecontrl_operate
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoKongKeyResult
</UL>

<P><STRONG><a name="[47f]"></a>YaoKongKeyResult</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, hmiinout.o(i.YaoKongKeyResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = YaoKongKeyResult &rArr; YaoKongKeyCmdResult &rArr; rt_multi_telecontrl_operate &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoKongKeyCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCmdResult
</UL>

<P><STRONG><a name="[17]"></a>YaoceWinFun</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, guidisplay.o(i.YaoceWinFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = YaoceWinFun &rArr; yaoCeDisplay &rArr; GuiMenuRedrawMenu &rArr; DrawAllMenu &rArr; DrawNodes &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaoCeDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidisplay.o(.data)
</UL>
<P><STRONG><a name="[479]"></a>YaoxinMapToLed</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, hmiinout.o(i.YaoxinMapToLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = YaoxinMapToLed &rArr; ULedStateSend &rArr; HmiCmd001Fill &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULedStateSet
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULedStateSend
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedReverseScan
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiInOutInit
</UL>

<P><STRONG><a name="[4ec]"></a>_BufFlush</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, uffs_buf.o(i._BufFlush))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoPut
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoGet
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindFileNode
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNode
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDataNode
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetFreePagesCount
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_Enough_FreePage
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckDirtyList
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush_NewBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushMostDirtyGroup
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushGroupMatchParent
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushGroupEx
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushGroup
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushAll
</UL>

<P><STRONG><a name="[515]"></a>_CheckObjBufRef</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, uffs_fs.o(i._CheckObjBufRef))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _CheckObjBufRef &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFindFrom
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFind
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFdnByOfs
</UL>
<BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
</UL>

<P><STRONG><a name="[51c]"></a>_FindMinimunPageIdFromDirtyList</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, uffs_buf.o(i._FindMinimunPageIdFromDirtyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _FindMinimunPageIdFromDirtyList &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_Enough_FreePage
</UL>

<P><STRONG><a name="[24b]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[2ac]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateAngleU_I
</UL>

<P><STRONG><a name="[3a1]"></a>__hardfp_atof</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, atof.o(i.__hardfp_atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __ARM_scalbn &rArr; __dunder &rArr; __fpl_exception &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyFun
</UL>

<P><STRONG><a name="[2b4]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateData
</UL>

<P><STRONG><a name="[2b6]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateData
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closing_loop_clock
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[535]"></a>__hardfp_floor</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __hardfp_floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[537]"></a>__hardfp_ldexp</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, ldexp.o(i.__hardfp_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = __hardfp_ldexp &rArr; __ARM_scalbn &rArr; __dunder &rArr; __fpl_exception &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[2b5]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateData
</UL>

<P><STRONG><a name="[2af]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt_full.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf &rArr; __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateData
</UL>

<P><STRONG><a name="[532]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[534]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[52e]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[533]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[52a]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[531]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[53a]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[52b]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[278]"></a>__mathlib_narrow</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __mathlib_narrow &rArr; frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[7c2]"></a>__rt_ffs</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, kservice.o(i.__rt_ffs))
<BR><BR>[Called By]<UL><LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[286]"></a>__support_ldexp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = __support_ldexp &rArr; __hardfp_ldexp &rArr; __ARM_scalbn &rArr; __dunder &rArr; __fpl_exception &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[f9]"></a>__wqueue_default_wake</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, waitqueue.o(i.__wqueue_default_wake))
<BR>[Address Reference Count : 1]<UL><LI> waitqueue.o(i.rt_wqueue_wait)
</UL>
<P><STRONG><a name="[22b]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[556]"></a>_rt_errno</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, kservice.o(i._rt_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rt_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>

<P><STRONG><a name="[26c]"></a>_sys_close</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stubs.o(i._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _sys_close &rArr; close &rArr; dfs_file_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[219]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stubs.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[27b]"></a>_sys_flen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stubs.o(i._sys_flen))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[279]"></a>_sys_istty</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stubs.o(i._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[269]"></a>_sys_open</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, stubs.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = _sys_open &rArr; open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[261]"></a>_sys_read</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, stubs.o(i._sys_read), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_stdio_read
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[266]"></a>_sys_seek</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stubs.o(i._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _sys_seek &rArr; lseek &rArr; fd_get &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[27d]"></a>_sys_write</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, stubs.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _sys_write &rArr; libc_stdio_write &rArr; write &rArr; fd_get &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_stdio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[283]"></a>_ttywrch</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stubs.o(i._ttywrch))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[3d6]"></a>cJSON_AddItemToArray</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cjson.o(i.cJSON_AddItemToArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cJSON_AddItemToArray
</UL>
<BR>[Calls]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffix_object
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelesignalCfg_StructToJson
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterCfg_StructToJson
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedValueCfg1_StructToJson
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
</UL>

<P><STRONG><a name="[2be]"></a>cJSON_AddItemToObject</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cjson.o(i.cJSON_AddItemToObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cJSON_AddItemToObject &rArr; cJSON_strdup &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToArray
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelesignalCfg_StructToJson
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelemetryCfg_StructToJson
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelecontrolCfg_StructToJson
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProductID_StructToJson
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterCfg_StructToJson
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InherentParaCfg_StructToJson
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedValueCfg1_StructToJson
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateFactorCfg_StructToJson
</UL>

<P><STRONG><a name="[3d5]"></a>cJSON_CreateArray</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cjson.o(i.cJSON_CreateArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cJSON_CreateArray &rArr; cJSON_New_Item &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelesignalCfg_StructToJson
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterCfg_StructToJson
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedValueCfg1_StructToJson
</UL>

<P><STRONG><a name="[2bd]"></a>cJSON_CreateNumber</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cjson.o(i.cJSON_CreateNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cJSON_CreateNumber &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelesignalCfg_StructToJson
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelemetryCfg_StructToJson
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelecontrolCfg_StructToJson
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterCfg_StructToJson
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InherentParaCfg_StructToJson
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedValueCfg1_StructToJson
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateFactorCfg_StructToJson
</UL>

<P><STRONG><a name="[2bb]"></a>cJSON_CreateObject</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cjson.o(i.cJSON_CreateObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cJSON_CreateObject &rArr; cJSON_New_Item &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelesignalCfg_StructToJson
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelemetryCfg_StructToJson
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelecontrolCfg_StructToJson
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProductID_StructToJson
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterCfg_StructToJson
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InherentParaCfg_StructToJson
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedValueCfg1_StructToJson
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateFactorCfg_StructToJson
</UL>

<P><STRONG><a name="[2bf]"></a>cJSON_CreateString</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cjson.o(i.cJSON_CreateString))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cJSON_CreateString &rArr; cJSON_strdup &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelesignalCfg_StructToJson
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelemetryCfg_StructToJson
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelecontrolCfg_StructToJson
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProductID_StructToJson
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterCfg_StructToJson
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InherentParaCfg_StructToJson
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedValueCfg1_StructToJson
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateFactorCfg_StructToJson
</UL>

<P><STRONG><a name="[7f8]"></a>cJSON_InitHooks</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cjson.o(i.cJSON_InitHooks))
<BR><BR>[Called By]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s2j_init
</UL>

<P><STRONG><a name="[584]"></a>cJSON_Print</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cjson.o(i.cJSON_Print))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = cJSON_Print &rArr; print_value &rArr; print_object &rArr;  print_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_Print_cJSON
</UL>

<P><STRONG><a name="[193]"></a>calculate_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, calculator.o(i.calculate_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = calculate_init &rArr; arm_cfft_radix2_init_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_radix2_init_f32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> calculator.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[1be]"></a>cat</STRONG> (Thumb, 78 bytes, Stack size 96 bytes, dfs_file.o(i.cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = cat &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1c3]"></a>chdir</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, dfs_posix.o(i.chdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = chdir &rArr; opendir &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(FSymTab)
</UL>
<P><STRONG><a name="[2a0]"></a>close</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dfs_posix.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = close &rArr; dfs_file_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_JsonFile
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_Comtrade
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_WriteFileAct
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_ReadFileAct
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_ReadFile
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_DirRead
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDoc_Record
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_SOE
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_Record
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_FEVENT
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_CO
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_SOE
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_FEVNET
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_CO
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_test
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_stdio_set_console
</UL>

<P><STRONG><a name="[4ce]"></a>closedir</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfs_posix.o(i.closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = closedir &rArr; dfs_file_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Files
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_test
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>

<P><STRONG><a name="[594]"></a>closing_loop_clock</STRONG> (Thumb, 932 bytes, Stack size 40 bytes, drv_do.o(i.closing_loop_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = closing_loop_clock &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteCO
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;other_protect_clock
</UL>

<P><STRONG><a name="[1bf]"></a>copy</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, dfs_file.o(i.copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = copy &rArr; copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_path_lastname
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_file.o(FSymTab)
</UL>
<P><STRONG><a name="[5a3]"></a>ctlnetwork</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_w5500_conf.o(i.ctlnetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ctlnetwork &rArr; wizchip_setnetmode &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_settimeout
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetmode
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetinfo
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_gettimeout
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetmode
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_config
</UL>

<P><STRONG><a name="[5aa]"></a>ctlwizchip</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, drv_w5500_conf.o(i.ctlwizchip))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphyconf
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphypmode
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphylink
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphyconf
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setinterruptmask
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterruptmask
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterrupt
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_clrinterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_w5500_init
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_config
</UL>

<P><STRONG><a name="[5b9]"></a>devfs_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, devfs.o(i.devfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = devfs_init &rArr; dfs_register &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
</UL>

<P><STRONG><a name="[1c1]"></a>df</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, dfs_fs.o(i.df))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = df &rArr; dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_fs.o(FSymTab)
</UL>
<P><STRONG><a name="[124]"></a>dfs_device_fs_close</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = dfs_device_fs_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>dfs_device_fs_getdents</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, devfs.o(i.dfs_device_fs_getdents))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dfs_device_fs_getdents &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[125]"></a>dfs_device_fs_ioctl</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dfs_device_fs_ioctl &rArr; rt_device_control
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>dfs_device_fs_mount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, devfs.o(i.dfs_device_fs_mount))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>dfs_device_fs_open</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, devfs.o(i.dfs_device_fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = dfs_device_fs_open &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[126]"></a>dfs_device_fs_read</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dfs_device_fs_read &rArr; rt_device_read &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>dfs_device_fs_stat</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = dfs_device_fs_stat &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>dfs_device_fs_write</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dfs_device_fs_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[12d]"></a>dfs_elm_close</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dfs_elm.o(i.dfs_elm_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = dfs_elm_close &rArr; f_close &rArr; f_sync &rArr; get_fattime &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>dfs_elm_flush</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dfs_elm.o(i.dfs_elm_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dfs_elm_flush &rArr; f_sync &rArr; get_fattime &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[133]"></a>dfs_elm_getdents</STRONG> (Thumb, 204 bytes, Stack size 320 bytes, dfs_elm.o(i.dfs_elm_getdents))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = dfs_elm_getdents &rArr; f_readdir &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>dfs_elm_ioctl</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dfs_elm.o(i.dfs_elm_ioctl))
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[132]"></a>dfs_elm_lseek</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, dfs_elm.o(i.dfs_elm_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dfs_elm_lseek &rArr; f_seekdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>dfs_elm_mkfs</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, dfs_elm.o(i.dfs_elm_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = dfs_elm_mkfs &rArr; f_mkfs &rArr; get_fattime &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>dfs_elm_mount</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, dfs_elm.o(i.dfs_elm_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = dfs_elm_mount &rArr; f_opendir &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>dfs_elm_open</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, dfs_elm.o(i.dfs_elm_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = dfs_elm_open &rArr; f_open &rArr; get_fattime &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[12f]"></a>dfs_elm_read</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, dfs_elm.o(i.dfs_elm_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = dfs_elm_read &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>dfs_elm_rename</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, dfs_elm.o(i.dfs_elm_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = dfs_elm_rename &rArr; f_rename &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>dfs_elm_stat</STRONG> (Thumb, 190 bytes, Stack size 376 bytes, dfs_elm.o(i.dfs_elm_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = dfs_elm_stat &rArr; f_stat &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>dfs_elm_statfs</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, dfs_elm.o(i.dfs_elm_statfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = dfs_elm_statfs &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>dfs_elm_unlink</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, dfs_elm.o(i.dfs_elm_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = dfs_elm_unlink &rArr; f_unlink &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[135]"></a>dfs_elm_unmount</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, dfs_elm.o(i.dfs_elm_unmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = dfs_elm_unmount &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>dfs_elm_write</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, dfs_elm.o(i.dfs_elm_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = dfs_elm_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[58a]"></a>dfs_file_close</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dfs_file.o(i.dfs_file_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = dfs_file_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[59a]"></a>dfs_file_getdents</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dfs_file.o(i.dfs_file_getdents))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfs_file_getdents
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[6f9]"></a>dfs_file_lseek</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dfs_file.o(i.dfs_file_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfs_file_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
</UL>

<P><STRONG><a name="[588]"></a>dfs_file_open</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, dfs_file.o(i.dfs_file_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[589]"></a>dfs_file_read</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, dfs_file.o(i.dfs_file_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfs_file_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[597]"></a>dfs_file_stat</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, dfs_file.o(i.dfs_file_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[5d5]"></a>dfs_file_unlink</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, dfs_file.o(i.dfs_file_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
</UL>

<P><STRONG><a name="[59b]"></a>dfs_file_write</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dfs_file.o(i.dfs_file_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfs_file_write
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[5d2]"></a>dfs_filesystem_lookup</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, dfs_fs.o(i.dfs_filesystem_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = dfs_filesystem_lookup &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
</UL>

<P><STRONG><a name="[1a1]"></a>dfs_init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, dfs.o(i.dfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = dfs_init &rArr; dfs_mount &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devfs_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[58b]"></a>dfs_lock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dfs.o(i.dfs_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dfs_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[5d9]"></a>dfs_mkfs</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, dfs_fs.o(i.dfs_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = dfs_mkfs &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_Format
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkfs
</UL>

<P><STRONG><a name="[5d7]"></a>dfs_mount</STRONG> (Thumb, 402 bytes, Stack size 88 bytes, dfs_fs.o(i.dfs_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = dfs_mount &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_Init
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_Format
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
</UL>

<P><STRONG><a name="[58d]"></a>dfs_normalize_path</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, dfs.o(i.dfs_normalize_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
</UL>

<P><STRONG><a name="[5ba]"></a>dfs_register</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, dfs_fs.o(i.dfs_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = dfs_register &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devfs_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_init
</UL>

<P><STRONG><a name="[13c]"></a>dfs_romfs_close</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dfs_romfs.o(i.dfs_romfs_close))
<BR>[Address Reference Count : 1]<UL><LI> dfs_romfs.o(.constdata)
</UL>
<P><STRONG><a name="[140]"></a>dfs_romfs_getdents</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, dfs_romfs.o(i.dfs_romfs_getdents))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dfs_romfs_getdents &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dirent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_romfs.o(.constdata)
</UL>
<P><STRONG><a name="[1ad]"></a>dfs_romfs_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dfs_romfs.o(i.dfs_romfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = dfs_romfs_init &rArr; dfs_register &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_romfs.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[13d]"></a>dfs_romfs_ioctl</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dfs_romfs.o(i.dfs_romfs_ioctl))
<BR>[Address Reference Count : 1]<UL><LI> dfs_romfs.o(.constdata)
</UL>
<P><STRONG><a name="[5db]"></a>dfs_romfs_lookup</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, dfs_romfs.o(i.dfs_romfs_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = dfs_romfs_lookup &rArr; rt_strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dirent
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_stat
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_open
</UL>

<P><STRONG><a name="[13f]"></a>dfs_romfs_lseek</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dfs_romfs.o(i.dfs_romfs_lseek))
<BR>[Address Reference Count : 1]<UL><LI> dfs_romfs.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>dfs_romfs_mount</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dfs_romfs.o(i.dfs_romfs_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dfs_romfs_mount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_romfs.o(.constdata)
</UL>
<P><STRONG><a name="[13b]"></a>dfs_romfs_open</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, dfs_romfs.o(i.dfs_romfs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = dfs_romfs_open &rArr; dfs_romfs_lookup &rArr; rt_strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_lookup
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dirent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_romfs.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>dfs_romfs_read</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, dfs_romfs.o(i.dfs_romfs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfs_romfs_read
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dirent
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_romfs.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>dfs_romfs_stat</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, dfs_romfs.o(i.dfs_romfs_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = dfs_romfs_stat &rArr; dfs_romfs_lookup &rArr; rt_strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_romfs.o(.constdata)
</UL>
<P><STRONG><a name="[142]"></a>dfs_romfs_unmount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dfs_romfs.o(i.dfs_romfs_unmount))
<BR>[Address Reference Count : 1]<UL><LI> dfs_romfs.o(.constdata)
</UL>
<P><STRONG><a name="[5bb]"></a>dfs_statfs</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dfs_fs.o(i.dfs_statfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
</UL>

<P><STRONG><a name="[5d3]"></a>dfs_subdir</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, dfs.o(i.dfs_subdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dfs_subdir &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>

<P><STRONG><a name="[1c4]"></a>dfs_test</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, dfs_posix.o(i.dfs_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = dfs_test &rArr; open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(FSymTab)
</UL>
<P><STRONG><a name="[1ae]"></a>dfs_uffs_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dfs_uffs.o(i.dfs_uffs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = dfs_uffs_init &rArr; uffs_InitObjectBuf &rArr; uffs_PoolInit &rArr; uffs_SemCreate &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitObjectBuf
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitGlobalFsLock
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DirEntryBufInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[58c]"></a>dfs_unlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dfs.o(i.dfs_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[681]"></a>disk_initialize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dfs_elm.o(i.disk_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[609]"></a>disk_ioctl</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, dfs_elm.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = disk_ioctl &rArr; rt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[60a]"></a>disk_read</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, dfs_elm.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = disk_read &rArr; rt_device_read &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[68f]"></a>disk_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dfs_elm.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[60b]"></a>disk_write</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, dfs_elm.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = disk_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[6f5]"></a>dns_getserver</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dns.o(i.dns_getserver))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
</UL>

<P><STRONG><a name="[610]"></a>dns_init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, dns.o(i.dns_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = dns_init &rArr; udp_new &rArr; memp_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>
<BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[615]"></a>dns_setserver</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dns.o(i.dns_setserver))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dns
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
</UL>

<P><STRONG><a name="[620]"></a>dns_tmr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dns.o(i.dns_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = dns_tmr &rArr; dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_timer
</UL>

<P><STRONG><a name="[b8]"></a>do_bind</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, api_msg.o(i.do_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = do_bind &rArr; tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_bind)
</UL>
<P><STRONG><a name="[b9]"></a>do_delconn</STRONG> (Thumb, 298 bytes, Stack size 8 bytes, api_msg.o(i.do_delconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = do_delconn &rArr; netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_delete)
</UL>
<P><STRONG><a name="[ba]"></a>do_getaddr</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, api_msg.o(i.do_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = do_getaddr &rArr; sys_sem_signal &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_getaddr)
</UL>
<P><STRONG><a name="[bb]"></a>do_listen</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, api_msg.o(i.do_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = do_listen &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_listen_with_backlog)
</UL>
<P><STRONG><a name="[bf]"></a>do_netifapi_netif_add</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, netifapi.o(i.do_netifapi_netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = do_netifapi_netif_add &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netifapi.o(i.netifapi_netif_add)
</UL>
<P><STRONG><a name="[c0]"></a>do_netifapi_netif_common</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, netifapi.o(i.do_netifapi_netif_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = do_netifapi_netif_common &rArr; sys_sem_signal &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netifapi.o(i.netifapi_netif_common)
</UL>
<P><STRONG><a name="[c1]"></a>do_netifapi_netif_set_addr</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, netifapi.o(i.do_netifapi_netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = do_netifapi_netif_set_addr &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netifapi.o(i.netifapi_netif_set_addr)
</UL>
<P><STRONG><a name="[bc]"></a>do_newconn</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, api_msg.o(i.do_newconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = do_newconn &rArr; pcb_new &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_new_with_proto_and_callback)
</UL>
<P><STRONG><a name="[b7]"></a>do_recv</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, api_msg.o(i.do_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = do_recv &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 3]<UL><LI> api_lib.o(i.netconn_recv_data)
<LI> api_lib.o(i.netconn_recved)
<LI> api_lib.o(i.netconn_accept)
</UL>
<P><STRONG><a name="[bd]"></a>do_send</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, api_msg.o(i.do_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = do_send &rArr; udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_send)
</UL>
<P><STRONG><a name="[be]"></a>do_write</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, api_msg.o(i.do_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = do_write &rArr; do_writemore &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_write_partly)
</UL>
<P><STRONG><a name="[367]"></a>dp83848_tcpserver_disconnect</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tcp_server.o(i.dp83848_tcpserver_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_StopLink
</UL>

<P><STRONG><a name="[35f]"></a>dp83848_tcpserver_getc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tcp_server.o(i.dp83848_tcpserver_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dp83848_tcpserver_getc &rArr; QueueRead
</UL>
<BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueRead
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_ReadData
</UL>

<P><STRONG><a name="[348]"></a>dp83848_tcpserver_linkstate</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp_server.o(i.dp83848_tcpserver_linkstate))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_CheckLink
</UL>

<P><STRONG><a name="[36a]"></a>dp83848_tcpserver_putc</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tcp_server.o(i.dp83848_tcpserver_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dp83848_tcpserver_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_WriteData
</UL>

<P><STRONG><a name="[1ac]"></a>elm_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dfs_elm.o(i.elm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = elm_init &rArr; dfs_register &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[654]"></a>eth_device_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ethernetif.o(i.eth_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = eth_device_init &rArr; eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_eth_init
</UL>

<P><STRONG><a name="[655]"></a>eth_device_init_with_flag</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, ethernetif.o(i.eth_device_init_with_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_add
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init
</UL>

<P><STRONG><a name="[40d]"></a>eth_device_ready</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ethernetif.o(i.eth_device_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = eth_device_ready &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_RxCpltCallback
</UL>

<P><STRONG><a name="[1a2]"></a>eth_system_device_init</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ethernetif.o(i.eth_system_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = eth_system_device_init &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[a8]"></a>etharp_output</STRONG> (Thumb, 380 bytes, Stack size 40 bytes, etharp.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_device_init_with_flag)
</UL>
<P><STRONG><a name="[669]"></a>etharp_query</STRONG> (Thumb, 496 bytes, Stack size 40 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[66b]"></a>etharp_request</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</UL>

<P><STRONG><a name="[57f]"></a>etharp_tmr</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, etharp.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = etharp_tmr &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
</UL>

<P><STRONG><a name="[671]"></a>ethernet_input</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, etharp.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[5be]"></a>f_close</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = f_close &rArr; f_sync &rArr; get_fattime &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
</UL>

<P><STRONG><a name="[5ce]"></a>f_getfree</STRONG> (Thumb, 252 bytes, Stack size 72 bytes, ff.o(i.f_getfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
</UL>

<P><STRONG><a name="[5c2]"></a>f_lseek</STRONG> (Thumb, 730 bytes, Stack size 72 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
</UL>

<P><STRONG><a name="[5c9]"></a>f_mkdir</STRONG> (Thumb, 390 bytes, Stack size 96 bytes, ff.o(i.f_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = f_mkdir &rArr; get_fattime &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[5c6]"></a>f_mkfs</STRONG> (Thumb, 1702 bytes, Stack size 136 bytes, ff.o(i.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = f_mkfs &rArr; get_fattime &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[5c5]"></a>f_mount</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[5ca]"></a>f_open</STRONG> (Thumb, 548 bytes, Stack size 112 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = f_open &rArr; get_fattime &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[5c8]"></a>f_opendir</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = f_opendir &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
</UL>

<P><STRONG><a name="[5cb]"></a>f_read</STRONG> (Thumb, 478 bytes, Stack size 72 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
</UL>

<P><STRONG><a name="[5c1]"></a>f_readdir</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = f_readdir &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
</UL>

<P><STRONG><a name="[5cc]"></a>f_rename</STRONG> (Thumb, 306 bytes, Stack size 160 bytes, ff.o(i.f_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = f_rename &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
</UL>

<P><STRONG><a name="[5c3]"></a>f_seekdir</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ff.o(i.f_seekdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = f_seekdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
</UL>

<P><STRONG><a name="[5cd]"></a>f_stat</STRONG> (Thumb, 88 bytes, Stack size 72 bytes, ff.o(i.f_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = f_stat &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
</UL>

<P><STRONG><a name="[5c0]"></a>f_sync</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = f_sync &rArr; get_fattime &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
</UL>

<P><STRONG><a name="[5cf]"></a>f_unlink</STRONG> (Thumb, 196 bytes, Stack size 120 bytes, ff.o(i.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = f_unlink &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
</UL>

<P><STRONG><a name="[5d0]"></a>f_write</STRONG> (Thumb, 548 bytes, Stack size 72 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
</UL>

<P><STRONG><a name="[52c]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[592]"></a>fd_get</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dfs.o(i.fd_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = fd_get &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>

<P><STRONG><a name="[5d1]"></a>fd_is_open</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, dfs.o(i.fd_is_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>

<P><STRONG><a name="[685]"></a>fd_new</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfs.o(i.fd_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = fd_new &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>

<P><STRONG><a name="[593]"></a>fd_put</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dfs.o(i.fd_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = fd_put &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>

<P><STRONG><a name="[5a0]"></a>ff_convert</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ccsbcs.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[678]"></a>ff_memalloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dfs_elm.o(i.ff_memalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ff_memalloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[67f]"></a>ff_memfree</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dfs_elm.o(i.ff_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ff_memfree &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[596]"></a>ff_wtoupper</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, ccsbcs.o(i.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[231]"></a>fgetc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fgetc.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fgetc &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>

<P><STRONG><a name="[687]"></a>file_Dir_Clear</STRONG> (Thumb, 138 bytes, Stack size 280 bytes, file_operate.o(i.file_Dir_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = file_Dir_Clear &rArr; Scan_Files &rArr;  Scan_Files (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Files
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_Comtrade
</UL>

<P><STRONG><a name="[688]"></a>file_operate</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, file_operate.o(i.file_operate))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = file_operate &rArr; start_Comtrade &rArr; file_Dir_Clear &rArr; Scan_Files &rArr;  Scan_Files (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_powerdown_storage
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_JsonFile
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_Comtrade
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_Clear
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_Record
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_Random
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ftuidle_thread_entry
</UL>

<P><STRONG><a name="[689]"></a>file_operate_Clear</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, file_operate.o(i.file_operate_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = file_operate_Clear &rArr; file_operate_Format &rArr; dfs_mount &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_Format
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate
</UL>

<P><STRONG><a name="[326]"></a>file_operate_DirCall</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, file_operate.o(i.file_operate_DirCall))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = file_operate_DirCall &rArr; file_operate_DirRead &rArr; open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_DirRead
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Files
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_R_IDLE
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_IdleProcess
</UL>

<P><STRONG><a name="[328]"></a>file_operate_DirRead</STRONG> (Thumb, 1058 bytes, Stack size 40 bytes, file_operate.o(i.file_operate_DirRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = file_operate_DirRead &rArr; open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBReadSystemTime
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_DirCall
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_R_IDLE
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_IdleProcess
</UL>

<P><STRONG><a name="[68b]"></a>file_operate_Format</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, file_operate.o(i.file_operate_Format))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = file_operate_Format &rArr; dfs_mount &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_SOE
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_FEVENT
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_CO
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_Init
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_Clear
</UL>

<P><STRONG><a name="[68d]"></a>file_operate_Init</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, file_operate.o(i.file_operate_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = file_operate_Init &rArr; file_operate_Format &rArr; dfs_mount &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_s2j_init
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_Format
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ftuidle_thread_entry
</UL>

<P><STRONG><a name="[329]"></a>file_operate_ReadFile</STRONG> (Thumb, 598 bytes, Stack size 32 bytes, file_operate.o(i.file_operate_ReadFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = file_operate_ReadFile &rArr; open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_R_IDLE
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_IdleProcess
</UL>

<P><STRONG><a name="[327]"></a>file_operate_ReadFileAct</STRONG> (Thumb, 414 bytes, Stack size 32 bytes, file_operate.o(i.file_operate_ReadFileAct))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = file_operate_ReadFileAct &rArr; open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_R_IDLE
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_IdleProcess
</UL>

<P><STRONG><a name="[319]"></a>file_operate_WriteFileAct</STRONG> (Thumb, 568 bytes, Stack size 24 bytes, file_operate.o(i.file_operate_WriteFileAct))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = file_operate_WriteFileAct &rArr; ReadDoc_Record &rArr; open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDoc_Record
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_F_FR
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_FileHandleProcess
</UL>

<P><STRONG><a name="[692]"></a>finsh_compiler_run</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, finsh_compiler.o(i.finsh_compiler_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = finsh_compiler_run &rArr; finsh_type_check &rArr;  finsh_type_check (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_type_check
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compile
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[6b5]"></a>finsh_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, finsh_error.o(i.finsh_errno))
<BR><BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[697]"></a>finsh_error_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, finsh_error.o(i.finsh_error_init))
<BR><BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_flush
</UL>

<P><STRONG><a name="[691]"></a>finsh_error_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, finsh_error.o(i.finsh_error_set))
<BR><BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_type_check
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compile
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_string
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_type
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_param_list
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr_statement
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_ptr
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_long
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_int
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_char
</UL>

<P><STRONG><a name="[6b6]"></a>finsh_error_string</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, finsh_error.o(i.finsh_error_string))
<BR><BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[694]"></a>finsh_flush</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, finsh_init.o(i.finsh_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = finsh_flush &rArr; finsh_parser_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_init
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_init
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[6bc]"></a>finsh_get_password</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(i.finsh_get_password))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_wait_auth
</UL>

<P><STRONG><a name="[698]"></a>finsh_get_prompt</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, shell.o(i.finsh_get_prompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = finsh_get_prompt &rArr; getcwd &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[69b]"></a>finsh_heap_allocate</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, finsh_heap.o(i.finsh_heap_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = finsh_heap_allocate &rArr; finsh_heap_gc &rArr; finsh_heap_free &rArr; finsh_block_merge
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_gc
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_split
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_remove
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_insert
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
</UL>

<P><STRONG><a name="[6a0]"></a>finsh_heap_free</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, finsh_heap.o(i.finsh_heap_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = finsh_heap_free &rArr; finsh_block_merge
</UL>
<BR>[Calls]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_remove
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_merge
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_gc
</UL>

<P><STRONG><a name="[6a2]"></a>finsh_heap_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, finsh_heap.o(i.finsh_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = finsh_heap_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
</UL>

<P><STRONG><a name="[6a3]"></a>finsh_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, finsh_init.o(i.finsh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = finsh_init &rArr; finsh_heap_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_init
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_init
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_init
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_init
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[6a6]"></a>finsh_node_allocate</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, finsh_node.o(i.finsh_node_allocate))
<BR><BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_ptr
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_long
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_int
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_char
</UL>

<P><STRONG><a name="[696]"></a>finsh_node_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, finsh_node.o(i.finsh_node_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = finsh_node_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_flush
</UL>

<P><STRONG><a name="[6a5]"></a>finsh_node_new_char</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, finsh_node.o(i.finsh_node_new_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_node_new_char
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[6a7]"></a>finsh_node_new_id</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, finsh_node.o(i.finsh_node_new_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = finsh_node_new_id &rArr; finsh_sysvar_lookup &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_lookup
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_lookup
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_lookup
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[6ab]"></a>finsh_node_new_int</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, finsh_node.o(i.finsh_node_new_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_node_new_int
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[6ac]"></a>finsh_node_new_long</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, finsh_node.o(i.finsh_node_new_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_node_new_long
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[6ad]"></a>finsh_node_new_ptr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, finsh_node.o(i.finsh_node_new_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_node_new_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[6ae]"></a>finsh_node_new_string</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, finsh_node.o(i.finsh_node_new_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = finsh_node_new_string &rArr; finsh_heap_allocate &rArr; finsh_heap_gc &rArr; finsh_heap_free &rArr; finsh_block_merge
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[695]"></a>finsh_parser_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, finsh_parser.o(i.finsh_parser_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = finsh_parser_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_flush
</UL>

<P><STRONG><a name="[6af]"></a>finsh_parser_run</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, finsh_parser.o(i.finsh_parser_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = finsh_parser_run &rArr; proc_variable_decl &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_init
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr_statement
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[6b4]"></a>finsh_run_line</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, shell.o(i.finsh_run_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = finsh_run_line &rArr; finsh_parser_run &rArr; proc_variable_decl &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_vm_run
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_stack_bottom
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_flush
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_string
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_errno
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compiler_run
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[6b9]"></a>finsh_set_password</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, shell.o(i.finsh_set_password))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = finsh_set_password &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[6b8]"></a>finsh_stack_bottom</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, finsh_init.o(i.finsh_stack_bottom))
<BR><BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[6aa]"></a>finsh_syscall_lookup</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, finsh_vm.o(i.finsh_syscall_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = finsh_syscall_lookup &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
</UL>

<P><STRONG><a name="[6ba]"></a>finsh_system_function_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(i.finsh_system_function_init))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[1b7]"></a>finsh_system_init</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, shell.o(i.finsh_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = finsh_system_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_var_init
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_function_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[6bb]"></a>finsh_system_var_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(i.finsh_system_var_init))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[6a9]"></a>finsh_sysvar_lookup</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, finsh_var.o(i.finsh_sysvar_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = finsh_sysvar_lookup &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
</UL>

<P><STRONG><a name="[b0]"></a>finsh_thread_entry</STRONG> (Thumb, 1328 bytes, Stack size 0 bytes, shell.o(i.finsh_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = finsh_thread_entry &rArr; finsh_run_line &rArr; finsh_parser_run &rArr; proc_variable_decl &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_password
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_password
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_wait_auth
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(i.finsh_system_init)
</UL>
<P><STRONG><a name="[6b0]"></a>finsh_token_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, finsh_token.o(i.finsh_token_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = finsh_token_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
</UL>

<P><STRONG><a name="[6b1]"></a>finsh_token_token</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, finsh_token.o(i.finsh_token_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = finsh_token_token &rArr; token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_type
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_param_list
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr_statement
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
</UL>

<P><STRONG><a name="[6a4]"></a>finsh_var_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, finsh_var.o(i.finsh_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = finsh_var_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
</UL>

<P><STRONG><a name="[6c3]"></a>finsh_var_insert</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, finsh_var.o(i.finsh_var_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = finsh_var_insert &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
</UL>

<P><STRONG><a name="[6a8]"></a>finsh_var_lookup</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, finsh_var.o(i.finsh_var_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = finsh_var_lookup &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
</UL>

<P><STRONG><a name="[6b7]"></a>finsh_vm_run</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, finsh_vm.o(i.finsh_vm_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_vm_run
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[1d]"></a>free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mem_std.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Address Reference Count : 4]<UL><LI> s2j.o(.data)
<LI> s2j.o(i.s2j_init)
<LI> cjson.o(i.cJSON_InitHooks)
<LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[53d]"></a>frexp</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[68c]"></a>fstat</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, dfs_posix.o(i.fstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = fstat &rArr; fd_get &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_ReadFileAct
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_DirRead
</UL>

<P><STRONG><a name="[6c7]"></a>getSn_TX_FSR</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drv_w5500.o(i.getSn_TX_FSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getSn_TX_FSR &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send
</UL>

<P><STRONG><a name="[67a]"></a>get_fattime</STRONG> (Thumb, 46 bytes, Stack size 64 bytes, dfs_elm.o(i.get_fattime))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = get_fattime &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[699]"></a>getcwd</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dfs_posix.o(i.getcwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = getcwd &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[1cb]"></a>hello</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(i.hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = hello &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[390]"></a>hmi101Scan</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, gui_101_cmd.o(i.hmi101Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = hmi101Scan &rArr; Hmi101CmdResult &rArr; HmiCmd002Fun &rArr; KeyCmdResult &rArr; YaoKongKeyResult &rArr; YaoKongKeyCmdResult &rArr; rt_multi_telecontrl_operate &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi101CmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_TO_HMI
</UL>

<P><STRONG><a name="[6de]"></a>icmp_dest_unreach</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[6e0]"></a>icmp_input</STRONG> (Thumb, 494 bytes, Stack size 48 bytes, icmp.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = icmp_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[6e2]"></a>inet_chksum</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, inet_chksum.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[6e1]"></a>inet_chksum_pbuf</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, inet_chksum.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[6e6]"></a>inet_chksum_pseudo</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, inet_chksum.o(i.inet_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inet_chksum_pseudo &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[667]"></a>ip4_addr_isbroadcast</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, ip_addr.o(i.ip4_addr_isbroadcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[672]"></a>ip_input</STRONG> (Thumb, 390 bytes, Stack size 32 bytes, ip.o(i.ip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[6e4]"></a>ip_output</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, ip.o(i.ip_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; pbuf_header &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[6e3]"></a>ip_output_if</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, ip.o(i.ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ip_output_if &rArr; pbuf_header &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>

<P><STRONG><a name="[6ee]"></a>ip_route</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ip.o(i.ip_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>

<P><STRONG><a name="[611]"></a>ipaddr_addr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ip_addr.o(i.ipaddr_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ipaddr_addr &rArr; ipaddr_aton &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
</UL>

<P><STRONG><a name="[6ef]"></a>ipaddr_aton</STRONG> (Thumb, 366 bytes, Stack size 48 bytes, ip_addr.o(i.ipaddr_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ipaddr_aton &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dns
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
</UL>

<P><STRONG><a name="[6f1]"></a>ipaddr_ntoa</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ip_addr.o(i.ipaddr_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ipaddr_ntoa &rArr; ipaddr_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
</UL>

<P><STRONG><a name="[6f2]"></a>ipaddr_ntoa_r</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, ip_addr.o(i.ipaddr_ntoa_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ipaddr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
</UL>

<P><STRONG><a name="[56a]"></a>libc_stdio_read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stdio.o(i.libc_stdio_read), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[6f3]"></a>libc_stdio_set_console</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, stdio.o(i.libc_stdio_set_console))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = libc_stdio_set_console &rArr; open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_system_init
</UL>

<P><STRONG><a name="[56b]"></a>libc_stdio_write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stdio.o(i.libc_stdio_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = libc_stdio_write &rArr; write &rArr; fd_get &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[1b0]"></a>libc_system_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, libc.o(i.libc_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = libc_system_init &rArr; libc_stdio_set_console &rArr; open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_stdio_set_console
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libc.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[1d7]"></a>list</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, cmd.o(i.list))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = list &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1c5]"></a>list_date</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rtc.o(i.list_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = list_date &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(FSymTab)
</UL>
<P><STRONG><a name="[1d6]"></a>list_device</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = list_device &rArr; _list_device &rArr; object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1cf]"></a>list_event</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = list_event &rArr; _list_event &rArr; object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1da]"></a>list_if</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ethernetif.o(i.list_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = list_if &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_getserver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(FSymTab)
</UL>
<P><STRONG><a name="[4a5]"></a>list_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, single_list.o(i.list_init))
<BR><BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_config
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;other_protect_init
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlInit
</UL>

<P><STRONG><a name="[2a8]"></a>list_ins_next</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, single_list.o(i.list_ins_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = list_ins_next &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplyForCounter
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addtimers
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_config
</UL>

<P><STRONG><a name="[1d1]"></a>list_mailbox</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = list_mailbox &rArr; _list_mailbox &rArr; object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1bb]"></a>list_mem</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mem.o(i.list_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = list_mem &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem.o(FSymTab)
</UL>
<P><STRONG><a name="[1d3]"></a>list_memheap</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_memheap))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = list_memheap &rArr; _list_memheap &rArr; object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_memheap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1d4]"></a>list_mempool</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_mempool))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = list_mempool &rArr; _list_mempool &rArr; object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mempool
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1d2]"></a>list_msgqueue</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_msgqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = list_msgqueue &rArr; _list_msgqueue &rArr; object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1d0]"></a>list_mutex</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = list_mutex &rArr; _list_mutex &rArr; object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mutex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[6f6]"></a>list_prefix</STRONG> (Thumb, 434 bytes, Stack size 40 bytes, cmd.o(i.list_prefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = list_prefix &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_is_prefix
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[1ce]"></a>list_sem</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = list_sem &rArr; _list_sem &rArr; object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1db]"></a>list_tcps</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, ethernetif.o(i.list_tcps))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = list_tcps &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(FSymTab)
</UL>
<P><STRONG><a name="[1cd]"></a>list_thread</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = list_thread &rArr; _list_thread &rArr; object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1d5]"></a>list_timer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = list_timer &rArr; _list_timer &rArr; object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1bc]"></a>ls</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, dfs_file.o(i.ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ls &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_file.o(FSymTab)
</UL>
<P><STRONG><a name="[298]"></a>lseek</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, dfs_posix.o(i.lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lseek &rArr; fd_get &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_WriteFileAct
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_ReadFile
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_SOE
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_FEVNET
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_CO
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>

<P><STRONG><a name="[6fa]"></a>lwip_accept</STRONG> (Thumb, 520 bytes, Stack size 64 bytes, sockets.o(i.lwip_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lwip_accept &rArr; netconn_getaddr &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dp83848_tcpserver_thread_entry
</UL>

<P><STRONG><a name="[6fe]"></a>lwip_bind</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, sockets.o(i.lwip_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = lwip_bind &rArr; netconn_bind &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dp83848_tcpserver_thread_entry
</UL>

<P><STRONG><a name="[700]"></a>lwip_close</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, sockets.o(i.lwip_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lwip_close &rArr; netconn_delete &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dp83848_tcpserver_thread_entry
</UL>

<P><STRONG><a name="[6f0]"></a>lwip_htonl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, def.o(i.lwip_htonl))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dp83848_tcpserver_thread_entry
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>

<P><STRONG><a name="[617]"></a>lwip_htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, def.o(i.lwip_htons))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dp83848_tcpserver_thread_entry
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>

<P><STRONG><a name="[701]"></a>lwip_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, init.o(i.lwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_init
</UL>
<BR>[Called By]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[709]"></a>lwip_listen</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, sockets.o(i.lwip_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lwip_listen &rArr; netconn_listen_with_backlog &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dp83848_tcpserver_thread_entry
</UL>

<P><STRONG><a name="[61a]"></a>lwip_ntohl</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, def.o(i.lwip_ntohl))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[6ea]"></a>lwip_ntohs</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, def.o(i.lwip_ntohs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[70b]"></a>lwip_recv</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, sockets.o(i.lwip_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dp83848_tcpserver_thread_entry
</UL>

<P><STRONG><a name="[70c]"></a>lwip_recvfrom</STRONG> (Thumb, 644 bytes, Stack size 96 bytes, sockets.o(i.lwip_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recved
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
</UL>

<P><STRONG><a name="[710]"></a>lwip_select</STRONG> (Thumb, 770 bytes, Stack size 104 bytes, sockets.o(i.lwip_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = lwip_select &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dp83848_tcpserver_thread_entry
</UL>

<P><STRONG><a name="[36f]"></a>lwip_send</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, sockets.o(i.lwip_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dp83848_tcpserver_thread_entry
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MonitoringDataTransmission
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_SlaveFrame12Response
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_SlaveFrame11Response
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_SlaveFrame01Response
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_AddError
</UL>

<P><STRONG><a name="[716]"></a>lwip_sendto</STRONG> (Thumb, 276 bytes, Stack size 72 bytes, sockets.o(i.lwip_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + In Cycle
<LI>Call Chain = lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[71b]"></a>lwip_setsockopt</STRONG> (Thumb, 366 bytes, Stack size 56 bytes, sockets.o(i.lwip_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lwip_setsockopt &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dp83848_tcpserver_thread_entry
</UL>

<P><STRONG><a name="[71d]"></a>lwip_socket</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, sockets.o(i.lwip_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dp83848_tcpserver_thread_entry
</UL>

<P><STRONG><a name="[705]"></a>lwip_socket_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sockets.o(i.lwip_socket_init))
<BR><BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[1b4]"></a>lwip_system_init</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, sys_arch.o(i.lwip_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = lwip_system_init &rArr; netifapi_netif_set_addr &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_set_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(.rti_fn.5)
</UL>
<P><STRONG><a name="[214]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, startup.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1c]"></a>malloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mem_std.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = malloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>
<BR>[Address Reference Count : 4]<UL><LI> s2j.o(.data)
<LI> s2j.o(i.s2j_init)
<LI> cjson.o(i.cJSON_InitHooks)
<LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[670]"></a>memp_free</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, memp.o(i.memp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = memp_free &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[703]"></a>memp_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, memp.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[66e]"></a>memp_malloc</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, memp.o(i.memp_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = memp_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>

<P><STRONG><a name="[1c2]"></a>mkdir</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, dfs_posix.o(i.mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = mkdir &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_Format
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_SOE
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_FEVENT
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_CO
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(FSymTab)
</UL>
<P><STRONG><a name="[1c0]"></a>mkfs</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dfs_fs.o(i.mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = mkfs &rArr; dfs_mkfs &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_fs.o(FSymTab)
</UL>
<P><STRONG><a name="[6c5]"></a>netbuf_delete</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, netbuf.o(i.netbuf_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = netbuf_delete &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
</UL>

<P><STRONG><a name="[71a]"></a>netbuf_free</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, netbuf.o(i.netbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = netbuf_free &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[718]"></a>netbuf_ref</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, netbuf.o(i.netbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[6fb]"></a>netconn_accept</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, api_lib.o(i.netconn_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = netconn_accept &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[573]"></a>netconn_alloc</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, api_msg.o(i.netconn_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = netconn_alloc &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[6ff]"></a>netconn_bind</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, api_lib.o(i.netconn_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = netconn_bind &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</UL>

<P><STRONG><a name="[6fd]"></a>netconn_delete</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, api_lib.o(i.netconn_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = netconn_delete &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[57d]"></a>netconn_free</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, api_msg.o(i.netconn_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = netconn_free &rArr; sys_sem_free &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_set_invalid
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>

<P><STRONG><a name="[6fc]"></a>netconn_getaddr</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, api_lib.o(i.netconn_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = netconn_getaddr &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[70a]"></a>netconn_listen_with_backlog</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, api_lib.o(i.netconn_listen_with_backlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = netconn_listen_with_backlog &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
</UL>

<P><STRONG><a name="[71e]"></a>netconn_new_with_proto_and_callback</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, api_lib.o(i.netconn_new_with_proto_and_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[70f]"></a>netconn_recv</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, api_lib.o(i.netconn_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[70e]"></a>netconn_recv_tcp_pbuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, api_lib.o(i.netconn_recv_tcp_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = netconn_recv_tcp_pbuf &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[70d]"></a>netconn_recved</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, api_lib.o(i.netconn_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = netconn_recved &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[719]"></a>netconn_send</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, api_lib.o(i.netconn_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = netconn_send &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[717]"></a>netconn_write_partly</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, api_lib.o(i.netconn_write_partly))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = netconn_write_partly &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[642]"></a>netif_add</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, netif.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_netifapi_netif_add
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
</UL>

<P><STRONG><a name="[704]"></a>netif_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netif.o(i.netif_init))
<BR><BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[643]"></a>netif_set_addr</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_netifapi_netif_set_addr
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[65c]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(i.netif_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
</UL>

<P><STRONG><a name="[72e]"></a>netif_set_gw</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(i.netif_set_gw))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[72c]"></a>netif_set_ipaddr</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, netif.o(i.netif_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[ad]"></a>netif_set_link_down</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, netif.o(i.netif_set_link_down))
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_rx_thread_entry)
</UL>
<P><STRONG><a name="[ac]"></a>netif_set_link_up</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, netif.o(i.netif_set_link_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = netif_set_link_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_rx_thread_entry)
</UL>
<P><STRONG><a name="[72d]"></a>netif_set_netmask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(i.netif_set_netmask))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[65d]"></a>netif_set_up</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
</UL>

<P><STRONG><a name="[659]"></a>netifapi_netif_add</STRONG> (Thumb, 62 bytes, Stack size 72 bytes, netifapi.o(i.netifapi_netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = netifapi_netif_add &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_netifapi
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>

<P><STRONG><a name="[65f]"></a>netifapi_netif_common</STRONG> (Thumb, 34 bytes, Stack size 56 bytes, netifapi.o(i.netifapi_netif_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = netifapi_netif_common &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_netifapi
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
</UL>

<P><STRONG><a name="[721]"></a>netifapi_netif_set_addr</STRONG> (Thumb, 38 bytes, Stack size 64 bytes, netifapi.o(i.netifapi_netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = netifapi_netif_set_addr &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_netifapi
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</UL>

<P><STRONG><a name="[297]"></a>open</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfs_posix.o(i.open))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_JsonFile
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_Comtrade
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_WriteFileAct
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_ReadFileAct
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_ReadFile
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_DirRead
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDoc_Record
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_SOE
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_Record
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_FEVENT
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_CO
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_SOE
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_FEVNET
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_CO
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_test
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_stdio_set_console
</UL>

<P><STRONG><a name="[4cc]"></a>opendir</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, dfs_posix.o(i.opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = opendir &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Files
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_test
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>

<P><STRONG><a name="[730]"></a>other_protect_clock</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, other_protect.o(i.other_protect_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = other_protect_clock &rArr; closing_loop_clock &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelemetryAbnormalCheck
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCounterTask
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoedMemory
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComunicatLock
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closing_loop_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watch_thread_entry
</UL>

<P><STRONG><a name="[732]"></a>other_protect_init</STRONG> (Thumb, 1762 bytes, Stack size 8 bytes, other_protect.o(i.other_protect_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = other_protect_init &rArr; ApplyForCounter &rArr; list_ins_next &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplyForCounter
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watch_thread_entry
</UL>

<P><STRONG><a name="[61c]"></a>pbuf_alloc</STRONG> (Thumb, 668 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_rx
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[734]"></a>pbuf_cat</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pbuf_cat &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[735]"></a>pbuf_chain</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = pbuf_chain &rArr; pbuf_ref &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>

<P><STRONG><a name="[814]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[66c]"></a>pbuf_copy</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pbuf_copy &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
</UL>

<P><STRONG><a name="[616]"></a>pbuf_copy_partial</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = pbuf_copy_partial &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[61b]"></a>pbuf_free</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
</UL>

<P><STRONG><a name="[666]"></a>pbuf_header</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pbuf_header &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[61d]"></a>pbuf_realloc</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[66d]"></a>pbuf_ref</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = pbuf_ref &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[2da]"></a>put_head</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mini_xml.o(i.put_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = put_head &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_SOE
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_FEVENT
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_CO
</UL>

<P><STRONG><a name="[635]"></a>raw_bind</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw.o(i.raw_bind))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[6eb]"></a>raw_input</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, raw.o(i.raw_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = raw_input &rArr; ip4_addr_isbroadcast
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[738]"></a>raw_new</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, raw.o(i.raw_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = raw_new &rArr; memp_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[739]"></a>raw_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw.o(i.raw_recv))
<BR><BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[63d]"></a>raw_remove</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, raw.o(i.raw_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = raw_remove &rArr; memp_free &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
</UL>

<P><STRONG><a name="[646]"></a>raw_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, raw.o(i.raw_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = raw_send &rArr; raw_sendto &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[647]"></a>raw_sendto</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, raw.o(i.raw_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = raw_sendto &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[4c6]"></a>read</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dfs_posix.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = read &rArr; fd_get &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_ReadFile
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDoc_Record
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_test
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_stdio_read
</UL>

<P><STRONG><a name="[4cd]"></a>readdir</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, dfs_posix.o(i.readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = readdir &rArr; fd_get &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Files
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_test
</UL>

<P><STRONG><a name="[79f]"></a>reg_wizchip_cris_cbfunc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drv_w5500_conf.o(i.reg_wizchip_cris_cbfunc))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_w5500_init
</UL>

<P><STRONG><a name="[7a0]"></a>reg_wizchip_cs_cbfunc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drv_w5500_conf.o(i.reg_wizchip_cs_cbfunc))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_w5500_init
</UL>

<P><STRONG><a name="[7a1]"></a>reg_wizchip_spi_cbfunc</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, drv_w5500_conf.o(i.reg_wizchip_spi_cbfunc))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_w5500_init
</UL>

<P><STRONG><a name="[1bd]"></a>rm</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dfs_file.o(i.rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = rm &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_file.o(FSymTab)
</UL>
<P><STRONG><a name="[2e1]"></a>rt_Print_cJSON</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interface_s2j.o(i.rt_Print_cJSON))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = rt_Print_cJSON &rArr; cJSON_Print &rArr; print_value &rArr; print_object &rArr;  print_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_JsonFile
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Struct_To_Json
</UL>

<P><STRONG><a name="[75b]"></a>rt_application_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, application.o(i.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[75d]"></a>rt_channel_monitor_clock</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, channel_monitor.o(i.rt_channel_monitor_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = rt_channel_monitor_clock &rArr; DLT634_ChannelToMonitor_SLAVE_SlaveFrame01Response &rArr; DLT634_5101_SLAVE_WriteData &rArr; MonitoringDataTransmission &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_SlaveFrame01Response
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_StopLink
</UL>
<BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_channel_monitor_task
</UL>

<P><STRONG><a name="[31e]"></a>rt_channel_monitor_init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, channel_monitor.o(i.rt_channel_monitor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_channel_monitor_init &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_INIT
</UL>

<P><STRONG><a name="[75e]"></a>rt_channel_monitor_task</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, channel_monitor.o(i.rt_channel_monitor_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = rt_channel_monitor_task &rArr; rt_channel_monitor_clock &rArr; DLT634_ChannelToMonitor_SLAVE_SlaveFrame01Response &rArr; DLT634_5101_SLAVE_WriteData &rArr; MonitoringDataTransmission &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_channel_monitor_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watch_thread_entry
</UL>

<P><STRONG><a name="[762]"></a>rt_completion_done</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, completion.o(i.rt_completion_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[765]"></a>rt_completion_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, completion.o(i.rt_completion_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_completion_init
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[766]"></a>rt_completion_wait</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, completion.o(i.rt_completion_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_completion_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[76a]"></a>rt_components_board_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, components.o(i.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_components_board_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[76b]"></a>rt_components_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, components.o(i.rt_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_components_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[6f4]"></a>rt_console_get_device</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kservice.o(i.rt_console_get_device))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_system_init
</UL>

<P><STRONG><a name="[76c]"></a>rt_console_set_device</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, kservice.o(i.rt_console_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_console_set_device &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[76d]"></a>rt_data_queue_init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, dataqueue.o(i.rt_data_queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rt_data_queue_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[76f]"></a>rt_data_queue_peak</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, dataqueue.o(i.rt_data_queue_peak))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_data_queue_peak
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[770]"></a>rt_data_queue_pop</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, dataqueue.o(i.rt_data_queue_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[566]"></a>rt_data_queue_push</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, dataqueue.o(i.rt_data_queue_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_data_queue_push &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
</UL>

<P><STRONG><a name="[5bc]"></a>rt_device_close</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, device.o(i.rt_device_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_close
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_close
</UL>

<P><STRONG><a name="[2e4]"></a>rt_device_control</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, device.o(i.rt_device_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBClear
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pin_init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pcf8563_write
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_ioctl
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_ioctl
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>

<P><STRONG><a name="[291]"></a>rt_device_find</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, device.o(i.rt_device_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_init
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;other_protect_init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_INIT
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_INIT
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pin_init
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_w5500_spi_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_w5500_init
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_test
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_monitor
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_init
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fram_first_clear
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pcf8563_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pcf8563_write
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7616_GPIO_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_led_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_do_init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_di_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_stat
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_channel_monitor_init
</UL>

<P><STRONG><a name="[65b]"></a>rt_device_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, device.o(i.rt_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_device_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_device_init
</UL>

<P><STRONG><a name="[31d]"></a>rt_device_open</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, device.o(i.rt_device_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_device_open &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_INIT
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_INIT
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pin_init
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_w5500_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_test
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_init
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fram_first_clear
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pcf8563_init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_open
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_channel_monitor_init
</UL>

<P><STRONG><a name="[773]"></a>rt_device_pin_register</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pin.o(i.rt_device_pin_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pin_init
</UL>

<P><STRONG><a name="[334]"></a>rt_device_read</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, device.o(i.rt_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_device_read &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_get_value_from_fram
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_fram_record_read
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_common_data_save_value_default_to_fram
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_ReadByte
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_test
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_monitor
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fram_first_clear
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pcf8563_init
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerEventCallback
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_di_check_task
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_read
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_read
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_ReadData
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Read_drv
</UL>

<P><STRONG><a name="[656]"></a>rt_device_register</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, device.o(i.rt_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_w5500_spi_init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_init
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pcf8563_init
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_register
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_device_init
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>

<P><STRONG><a name="[7f9]"></a>rt_device_set_rx_indicate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, device.o(i.rt_device_set_rx_indicate))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_open
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_close
</UL>

<P><STRONG><a name="[292]"></a>rt_device_write</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, device.o(i.rt_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_save_value_to_fram
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_fram_record_write
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteSystemTime
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_common_data_save_value_default_to_fram
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_fram_update_state_write
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_led_task
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closing_loop_clock
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pin_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_WriteByte
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_reset
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_cs_select
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_cs_deselect
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_monitor
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_clear_record
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7616_GPIO_Init
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_open_recovery
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_open_operate
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_close_recovery
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_close_operate
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_di_check_task
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_write
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_write
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_WriteData
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MonitoringDataTransmission
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Write_drv
</UL>

<P><STRONG><a name="[a7]"></a>rt_dp83848_tcpserver_thread_entry</STRONG> (Thumb, 512 bytes, Stack size 600 bytes, tcp_server.o(i.rt_dp83848_tcpserver_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = rt_dp83848_tcpserver_thread_entry &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueWriteBlock
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueCreate
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_thread.o(i.dp83848_2404_thread_start)
</UL>
<P><STRONG><a name="[e2]"></a>rt_enter_critical</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(i.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_w5500.o(i.rt_hw_w5500_init)
</UL>
<P><STRONG><a name="[47a]"></a>rt_event_detach</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ipc.o(i.rt_event_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_event_detach &rArr; rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiThreadDelete
</UL>

<P><STRONG><a name="[470]"></a>rt_event_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ipc.o(i.rt_event_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_event_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_event_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi101ThreadEntity
</UL>

<P><STRONG><a name="[2c6]"></a>rt_event_recv</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, ipc.o(i.rt_event_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slave104_thread_entry
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slave101_thread_entry
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cal_thread_entry
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd101DownControl
</UL>

<P><STRONG><a name="[2c8]"></a>rt_event_send</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, ipc.o(i.rt_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ad7616_data
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd101SendFinish
</UL>

<P><STRONG><a name="[e1]"></a>rt_exit_critical</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, scheduler.o(i.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_w5500.o(i.rt_hw_w5500_init)
</UL>
<P><STRONG><a name="[ed]"></a>rt_free</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, mem.o(i.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_close
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_open
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_getdents
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dzhi1DisplayInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jsonfileoperation.o(i.rt_s2j_init)
</UL>
<P><STRONG><a name="[1b3]"></a>rt_hw_adc_init</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, drv_ad7616.o(i.rt_hw_adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_hw_adc_init &rArr; AD7616_GPIO_Init &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7616_GPIO_Init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7616_FSMC_Init
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_PWM_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ad7616.o(.rti_fn.5)
</UL>
<P><STRONG><a name="[2ea]"></a>rt_hw_alarm_led_operate</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, drv_led.o(i.rt_hw_alarm_led_operate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_hw_alarm_led_operate
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBRevert
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_led_task
</UL>

<P><STRONG><a name="[77e]"></a>rt_hw_board_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, board.o(i.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rt_hw_board_init &rArr; rt_hw_usart_init &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_system_clock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[7ab]"></a>rt_hw_console_output</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kservice.o(i.rt_hw_console_output))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[45f]"></a>rt_hw_di_check_task</STRONG> (Thumb, 1448 bytes, Stack size 16 bytes, drv_di.o(i.rt_hw_di_check_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rt_hw_di_check_task &rArr; rt_hw_double_point_check &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteSOE
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_double_point_check
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[1a6]"></a>rt_hw_di_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_di.o(i.rt_hw_di_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_hw_di_init &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_di.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[90]"></a>rt_hw_do_operate</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, drv_do.o(i.rt_hw_do_operate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_hw_do_operate &rArr; rt_hw_open_recovery &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteCO
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_open_recovery
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_open_operate
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_close_recovery
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_close_operate
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_telecontrl_operate
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoKongKeyCmdResult
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_protect_ctrl.o(i.MainProtectCtrlInit)
</UL>
<P><STRONG><a name="[1a3]"></a>rt_hw_eth_init</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, drv_eth.o(i.rt_hw_eth_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = rt_hw_eth_init &rArr; eth_device_init &rArr; eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_eth.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[19e]"></a>rt_hw_fm25vxx_init</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, drv_fm25vxx.o(i.rt_hw_fm25vxx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rt_hw_fm25vxx_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fram_first_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_fm25vxx.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[78a]"></a>rt_hw_fm25vxx_monitor</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, drv_fm25vxx.o(i.rt_hw_fm25vxx_monitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_hw_fm25vxx_monitor &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_control
</UL>

<P><STRONG><a name="[1b9]"></a>rt_hw_fm25vxx_test</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, drv_fm25vxx.o(i.rt_hw_fm25vxx_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_hw_fm25vxx_test &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_fm25vxx.o(FSymTab)
</UL>
<P><STRONG><a name="[788]"></a>rt_hw_fram_read_register</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, drv_fm25vxx.o(i.rt_hw_fram_read_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rt_hw_fram_read_register &rArr; rt_hw_fm25vxx_cmd &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_control
</UL>

<P><STRONG><a name="[787]"></a>rt_hw_fram_sleep</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_fm25vxx.o(i.rt_hw_fram_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rt_hw_fram_sleep &rArr; rt_hw_fm25vxx_cmd &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_control
</UL>

<P><STRONG><a name="[19a]"></a>rt_hw_frequency_timer_int</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_timer.o(i.rt_hw_frequency_timer_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rt_hw_frequency_timer_int &rArr; TIM3_CH1_Cap_Init &rArr; HAL_TIM_IC_Init &rArr; HAL_TIM_IC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_CH1_Cap_Init
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_CH1_Cap_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_timer.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[21a]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, cpuport.o(i.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_hw_hard_fault_exception &rArr; list_thread &rArr; _list_thread &rArr; object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[1a4]"></a>rt_hw_iic_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drv_iic.o(i.rt_hw_iic_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rt_hw_iic_init &rArr; rt_i2c_bit_add_bus &rArr; rt_i2c_bus_device_register &rArr; rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bit_add_bus
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iic_gpio_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_iic.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[1a8]"></a>rt_hw_led_init</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, drv_led.o(i.rt_hw_led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_hw_led_init &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_led.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[792]"></a>rt_hw_led_task</STRONG> (Thumb, 388 bytes, Stack size 8 bytes, drv_led.o(i.rt_hw_led_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_hw_led_task &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_alarm_led_operate
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watch_thread_entry
</UL>

<P><STRONG><a name="[197]"></a>rt_hw_mpu_init</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, drv_mpu.o(i.rt_hw_mpu_init))
<BR>[Address Reference Count : 1]<UL><LI> drv_mpu.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[1a9]"></a>rt_hw_pcf8563_init</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, drv_pcf8563.o(i.rt_hw_pcf8563_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rt_hw_pcf8563_init &rArr; rt_hw_pcf8563_config &rArr; rt_i2c_master_send &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pcf8563_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pcf8563.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[194]"></a>rt_hw_pin_init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, drv_gpio.o(i.rt_hw_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_hw_pin_init &rArr; rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[1b6]"></a>rt_hw_rtc_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, drv_rtc.o(i.rt_hw_rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_hw_rtc_init &rArr; rt_hw_rtc_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_register
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_WakeUp
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtc.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[796]"></a>rt_hw_rtc_register</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, drv_rtc.o(i.rt_hw_rtc_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_hw_rtc_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_init
</UL>

<P><STRONG><a name="[196]"></a>rt_hw_sdram_init</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, drv_sdram.o(i.rt_hw_sdram_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rt_hw_sdram_init &rArr; HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Initialization_Sequence
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sdram.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[798]"></a>rt_hw_serial_isr</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, serial.o(i.rt_hw_serial_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_put_index
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[79a]"></a>rt_hw_serial_register</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, serial.o(i.rt_hw_serial_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[199]"></a>rt_hw_spi2_init</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, drv_w5500.o(i.rt_hw_spi2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = rt_hw_spi2_init &rArr; stm32_spi_bus_register &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_bus_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_w5500.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[55c]"></a>rt_hw_stack_init</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, cpuport.o(i.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[77f]"></a>rt_hw_system_clock_init</STRONG> (Thumb, 220 bytes, Stack size 128 bytes, board.o(i.rt_hw_system_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_hw_system_clock_init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1b2]"></a>rt_hw_tim1ms_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_timer.o(i.rt_hw_tim1ms_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_hw_tim1ms_init &rArr; TIM6_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_timer.o(.rti_fn.5)
</UL>
<P><STRONG><a name="[195]"></a>rt_hw_usart_init</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, drv_usart.o(i.rt_hw_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_hw_usart_init &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
</UL>
<BR>[Called By]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[1b1]"></a>rt_hw_w5500_init</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, drv_w5500.o(i.rt_hw_w5500_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_hw_w5500_init &rArr; w5500_reset &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_spi_cbfunc
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_cs_cbfunc
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_cris_cbfunc
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_reset
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_w5500.o(.rti_fn.5)
</UL>
<P><STRONG><a name="[19f]"></a>rt_hw_w5500_spi_init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, drv_w5500.o(i.rt_hw_w5500_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_hw_w5500_spi_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_w5500.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[1a0]"></a>rt_hw_wdg_deal_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_wdg.o(i.rt_hw_wdg_deal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_hw_wdg_deal_init &rArr; rt_hw_iwdg_init &rArr; HAL_IWDG_Init &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_iwdg_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_wdg.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[460]"></a>rt_hw_wdg_deal_task</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_wdg.o(i.rt_hw_wdg_deal_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_hw_wdg_deal_task
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_common_data_save_value_default_to_fram
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[78f]"></a>rt_i2c_bit_add_bus</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, i2c-bit-ops.o(i.rt_i2c_bit_add_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_i2c_bit_add_bus &rArr; rt_i2c_bus_device_register &rArr; rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_iic_init
</UL>

<P><STRONG><a name="[7a6]"></a>rt_i2c_bus_device_device_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, i2c_dev.o(i.rt_i2c_bus_device_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
</UL>

<P><STRONG><a name="[7a5]"></a>rt_i2c_bus_device_register</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, i2c_core.o(i.rt_i2c_bus_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_i2c_bus_device_register &rArr; rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bit_add_bus
</UL>

<P><STRONG><a name="[1af]"></a>rt_i2c_core_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c_core.o(i.rt_i2c_core_init))
<BR>[Address Reference Count : 1]<UL><LI> i2c_core.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[6d9]"></a>rt_i2c_master_recv</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, i2c_core.o(i.rt_i2c_master_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rt_i2c_master_recv &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_read
</UL>

<P><STRONG><a name="[6da]"></a>rt_i2c_master_send</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, i2c_core.o(i.rt_i2c_master_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rt_i2c_master_send &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pcf8563_write
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pcf8563_config
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_write
</UL>

<P><STRONG><a name="[6d8]"></a>rt_i2c_transfer</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, i2c_core.o(i.rt_i2c_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_send
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pcf8563_read
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pcf8563_calender_test
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_control
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_recv
</UL>

<P><STRONG><a name="[c6]"></a>rt_init_thread_entry</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, application.o(i.rt_init_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = rt_init_thread_entry &rArr; dfs_mount &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[3b6]"></a>rt_interrupt_enter</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[557]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, irq.o(i.rt_interrupt_get_nest))
<BR><BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
</UL>

<P><STRONG><a name="[3b8]"></a>rt_interrupt_leave</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[3af]"></a>rt_kprintf</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, kservice.o(i.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_init
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_config
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_common_data_save_value_default_to_fram
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pin_init
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_test
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_init
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fram_first_clear
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pcf8563_calender_test
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mem
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_test
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPageTag
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoReleaseCache
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoInitCache
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMarkBadBlock
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindBestPageInBlock
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFreeClone
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufClone
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoPut
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoGet
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockAdd
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemCreate
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_UnMount
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_Mount
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_mkfs
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMakeSpare
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashInterfaceInit
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashCheckErasedBlock
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_WriteObject
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReadObject
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolRelease
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolPut
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolInit
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetIndex
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGet
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InsertNodeToTree
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPage
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufWrite
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufUnLockGroup
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufReleaseAll
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufPut
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufNew
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufInit
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushAll
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindMinimunPageIdFromDirtyList
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_Enough_FreePage
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LinkToDirtyList
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckDirtyList
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush_NewBlock
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BreakFromDirty
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeCompareFileName
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindFromTree
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScanAndFixUnCleanPage
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBlockFromNode
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepTwo
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepThree
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepOne
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_IsSrcNewerThanObj
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetBlockFileDataLength
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInit
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BuildTree
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReleaseDevice
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitDevice
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitDeviceConfig
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BreakFromEntry
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObjectEx
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MoveObjectEx
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckObjBufRef
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteObject
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteNewBlock
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteInternalBlock
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_FlushObject
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_date
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hello
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_thread
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mutex
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mempool
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_memheap
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_wait_auth
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_getaddr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dzhi1DisplayInit
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoxinDisplayInit
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoceDisplayInit
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dzhi0DisplayInit
</UL>

<P><STRONG><a name="[2a7]"></a>rt_malloc</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, mem.o(i.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplyForCounter
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addtimers
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_ins_next
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dp83848_tcpserver_thread_entry
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_thread_start
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wave_init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_w5500_spi_init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_init
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_open
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_getdents
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi101Init
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_AppInit
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_AppInit
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dzhi1DisplayInit
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoxinDisplayInit
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoceDisplayInit
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dzhi0DisplayInit
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_AppInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_s2j_malloc_fn
</UL>

<P><STRONG><a name="[7ac]"></a>rt_mb_create</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ipc.o(i.rt_mb_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>

<P><STRONG><a name="[7af]"></a>rt_mb_delete</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ipc.o(i.rt_mb_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_mb_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[660]"></a>rt_mb_init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ipc.o(i.rt_mb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_mb_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init
</UL>

<P><STRONG><a name="[65e]"></a>rt_mb_recv</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, ipc.o(i.rt_mb_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_tx_thread_entry
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>

<P><STRONG><a name="[65a]"></a>rt_mb_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipc.o(i.rt_mb_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_ready
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_linkoutput
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>

<P><STRONG><a name="[7b0]"></a>rt_mb_send_wait</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, ipc.o(i.rt_mb_send_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>

<P><STRONG><a name="[563]"></a>rt_memcpy</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, kservice.o(i.rt_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_control
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>

<P><STRONG><a name="[6c0]"></a>rt_memmove</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, kservice.o(i.rt_memmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[55b]"></a>rt_memset</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, kservice.o(i.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dp83848_tcpserver_thread_entry
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_iic_init
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_write_page
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read_page
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_setup_storage
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_mount
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_wait_auth
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>

<P><STRONG><a name="[7b1]"></a>rt_multi_common_data_config</STRONG> (Thumb, 1230 bytes, Stack size 88 bytes, common_data.o(i.rt_multi_common_data_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = rt_multi_common_data_config &rArr; list_ins_next &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_ins_next
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_init
</UL>

<P><STRONG><a name="[761]"></a>rt_multi_common_data_configure_default</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, common_data.o(i.rt_multi_common_data_configure_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_multi_common_data_configure_default &rArr; rt_multi_common_data_fram_record_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_fram_record_write
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_read_config_from_fram
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_common_data_save_value_default_to_fram
</UL>

<P><STRONG><a name="[754]"></a>rt_multi_common_data_fram_record_read</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, common_data.o(i.rt_multi_common_data_fram_record_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_multi_common_data_fram_record_read &rArr; rt_device_read &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_read_config_from_fram
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPassword
</UL>

<P><STRONG><a name="[2ec]"></a>rt_multi_common_data_fram_record_write</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, common_data.o(i.rt_multi_common_data_fram_record_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_multi_common_data_fram_record_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_powerdown_storage
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_configure_default
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBSwitchValueArea
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDoc_Record
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordModfiyWinFun
</UL>

<P><STRONG><a name="[31b]"></a>rt_multi_common_data_fram_update_state_write</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, common_data.o(i.rt_multi_common_data_fram_update_state_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_multi_common_data_fram_update_state_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ftuidle_thread_entry
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_F_SR
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_SoftwareUpdate
</UL>

<P><STRONG><a name="[7b2]"></a>rt_multi_common_data_get_value_from_fram</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, common_data.o(i.rt_multi_common_data_get_value_from_fram))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_multi_common_data_get_value_from_fram &rArr; rt_device_read &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_read_config_from_fram
</UL>

<P><STRONG><a name="[1aa]"></a>rt_multi_common_data_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, common_data.o(i.rt_multi_common_data_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = rt_multi_common_data_init &rArr; rt_multi_common_data_config &rArr; list_ins_next &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_read_config
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_config
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common_data.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[7b5]"></a>rt_multi_common_data_para_init</STRONG> (Thumb, 506 bytes, Stack size 0 bytes, common_data.o(i.rt_multi_common_data_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_read_config
</UL>

<P><STRONG><a name="[2d2]"></a>rt_multi_common_data_powerdown_storage</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, common_data.o(i.rt_multi_common_data_powerdown_storage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_multi_common_data_powerdown_storage &rArr; rt_multi_common_data_fram_record_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_fram_record_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoedMemory
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComunicatLock
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate
</UL>

<P><STRONG><a name="[7b3]"></a>rt_multi_common_data_read_config</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, common_data.o(i.rt_multi_common_data_read_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = rt_multi_common_data_read_config &rArr; rt_multi_common_data_read_config_from_fram &rArr; rt_common_data_save_value_default_to_fram &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_read_config_from_fram
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_init
</UL>

<P><STRONG><a name="[7b4]"></a>rt_multi_common_data_read_config_from_fram</STRONG> (Thumb, 1366 bytes, Stack size 24 bytes, common_data.o(i.rt_multi_common_data_read_config_from_fram))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = rt_multi_common_data_read_config_from_fram &rArr; rt_common_data_save_value_default_to_fram &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_get_value_from_fram
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_fram_record_read
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_configure_default
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteSOE
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_common_data_save_value_default_to_fram
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterCheck
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_read_config
</UL>

<P><STRONG><a name="[2c0]"></a>rt_multi_common_data_save_value_to_fram</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, common_data.o(i.rt_multi_common_data_save_value_to_fram))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_telecontrl_operate
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteValue
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationFactorCal
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_common_data_save_value_default_to_fram
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dzhi1ModfiySave
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dzhi0ModfiySave
</UL>

<P><STRONG><a name="[2c2]"></a>rt_multi_common_read_update_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, common_data.o(i.rt_multi_common_read_update_state))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdataProgram
</UL>

<P><STRONG><a name="[31a]"></a>rt_multi_common_write_update_state</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, common_data.o(i.rt_multi_common_write_update_state))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_F_SR
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_SoftwareUpdate
</UL>

<P><STRONG><a name="[191]"></a>rt_multi_event_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, multi_thread.o(i.rt_multi_event_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_multi_event_init &rArr; rt_event_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_thread.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[192]"></a>rt_multi_sem_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, multi_thread.o(i.rt_multi_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_multi_sem_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_thread.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[2fe]"></a>rt_multi_telecontrl_operate</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, common_data.o(i.rt_multi_telecontrl_operate))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = rt_multi_telecontrl_operate &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_do_operate
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_save_value_to_fram
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBRevert
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBClear
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_C_SC
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoKongKeyCmdResult
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCmdSendFun
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_HandleCtrlProcess
</UL>

<P><STRONG><a name="[2fd]"></a>rt_multi_telecontrl_proof</STRONG> (Thumb, 484 bytes, Stack size 16 bytes, common_data.o(i.rt_multi_telecontrl_proof))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_multi_telecontrl_proof &rArr; DBWriteCO
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteCO
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_C_SC
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_HandleCtrlProcess
</UL>

<P><STRONG><a name="[1b5]"></a>rt_multi_thread_start</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, multi_thread.o(i.rt_multi_thread_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_multi_thread_start &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_thread_start
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_2404_thread_start
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave104_thread_start
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave101_thread_start
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protect_thread_start
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftuidle_thread_start
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp83848_2404_thread_start
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_thread_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_thread.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[7ba]"></a>rt_mutex_create</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ipc.o(i.rt_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemCreate
</UL>

<P><STRONG><a name="[7bb]"></a>rt_mutex_delete</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ipc.o(i.rt_mutex_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemDelete
</UL>

<P><STRONG><a name="[5d6]"></a>rt_mutex_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ipc.o(i.rt_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_mutex_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_w5500_spi_init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_init
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
</UL>

<P><STRONG><a name="[5f9]"></a>rt_mutex_release</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, ipc.o(i.rt_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemSignal
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_unlock
</UL>

<P><STRONG><a name="[5d8]"></a>rt_mutex_take</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, ipc.o(i.rt_mutex_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemWait
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lock
</UL>

<P><STRONG><a name="[7ad]"></a>rt_object_allocate</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, object.o(i.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
</UL>

<P><STRONG><a name="[7ae]"></a>rt_object_delete</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, object.o(i.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
</UL>

<P><STRONG><a name="[778]"></a>rt_object_detach</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, object.o(i.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
</UL>

<P><STRONG><a name="[774]"></a>rt_object_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, object.o(i.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
</UL>

<P><STRONG><a name="[7e2]"></a>rt_object_is_systemobject</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_object_is_systemobject))
<BR><BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[1c8]"></a>rt_pin_mode</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pin.o(i.rt_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_pin_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[1ca]"></a>rt_pin_read</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pin.o(i.rt_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_pin_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[1c9]"></a>rt_pin_write</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pin.o(i.rt_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_pin_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[68e]"></a>rt_s2j_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, jsonfileoperation.o(i.rt_s2j_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_s2j_init &rArr; s2j_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s2j_init
</UL>
<BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_Init
</UL>

<P><STRONG><a name="[ec]"></a>rt_s2j_malloc_fn</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, jsonfileoperation.o(i.rt_s2j_malloc_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_s2j_malloc_fn &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jsonfileoperation.o(i.rt_s2j_init)
</UL>
<P><STRONG><a name="[764]"></a>rt_schedule</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, scheduler.o(i.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[7c5]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[7c6]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[7bf]"></a>rt_sem_control</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rt_sem_control &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watch_thread_entry
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_protect_thread_entry
</UL>

<P><STRONG><a name="[7c7]"></a>rt_sem_create</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>

<P><STRONG><a name="[7c8]"></a>rt_sem_delete</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ipc.o(i.rt_sem_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
</UL>

<P><STRONG><a name="[720]"></a>rt_sem_detach</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ipc.o(i.rt_sem_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_sem_detach &rArr; rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</UL>

<P><STRONG><a name="[657]"></a>rt_sem_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_sem_init
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_eth_init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</UL>

<P><STRONG><a name="[411]"></a>rt_sem_release</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ipc.o(i.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_TxCpltCallback
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_tx_thread_entry
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
</UL>

<P><STRONG><a name="[673]"></a>rt_sem_take</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watch_thread_entry
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_protect_thread_entry
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_tx
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_linkoutput
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</UL>

<P><STRONG><a name="[561]"></a>rt_set_errno</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kservice.o(i.rt_set_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_write
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_read
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>

<P><STRONG><a name="[79d]"></a>rt_sfud_flash_probe</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, spi_flash_sfud.o(i.rt_sfud_flash_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = rt_sfud_flash_probe &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_flash_with_sfud_init
</UL>

<P><STRONG><a name="[7cd]"></a>rt_show_version</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kservice.o(i.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version
</UL>

<P><STRONG><a name="[5c7]"></a>rt_snprintf</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, kservice.o(i.rt_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemCreate
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_open
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_mount
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_getdents
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>

<P><STRONG><a name="[7ce]"></a>rt_soft_timer_check</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, timer.o(i.rt_soft_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_soft_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
</UL>

<P><STRONG><a name="[79c]"></a>rt_spi_bus_attach_device</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, spi_core.o(i.rt_spi_bus_attach_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_spi_bus_attach_device &rArr; rt_spidev_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi2_init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi5_init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi4_init
</UL>

<P><STRONG><a name="[7d1]"></a>rt_spi_bus_device_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, spi_dev.o(i.rt_spi_bus_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
</UL>

<P><STRONG><a name="[7d2]"></a>rt_spi_bus_register</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, spi_core.o(i.rt_spi_bus_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_bus_register
</UL>

<P><STRONG><a name="[78b]"></a>rt_spi_configure</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, spi_core.o(i.rt_spi_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_spi_configure &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_w5500_spi_init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_init
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe
</UL>

<P><STRONG><a name="[78d]"></a>rt_spi_send_then_recv</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, spi_core.o(i.rt_spi_send_then_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fram_read_register
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_read
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
</UL>

<P><STRONG><a name="[78e]"></a>rt_spi_send_then_send</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, spi_core.o(i.rt_spi_send_then_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rt_spi_send_then_send &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_write
</UL>

<P><STRONG><a name="[568]"></a>rt_spi_transfer</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, spi_core.o(i.rt_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_w5500_write
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_w5500_read
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fram_read_id
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_cmd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_write
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_read
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
</UL>

<P><STRONG><a name="[7d0]"></a>rt_spidev_device_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, spi_dev.o(i.rt_spidev_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_spidev_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
</UL>

<P><STRONG><a name="[d0]"></a>rt_stm32_eth_rx</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, drv_eth.o(i.rt_stm32_eth_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = rt_stm32_eth_rx &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetReceivedFrame_IT
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_eth.o(i.rt_hw_eth_init)
</UL>
<P><STRONG><a name="[d1]"></a>rt_stm32_eth_tx</STRONG> (Thumb, 296 bytes, Stack size 56 bytes, drv_eth.o(i.rt_stm32_eth_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rt_stm32_eth_tx &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_TransmitFrame
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_eth.o(i.rt_hw_eth_init)
</UL>
<P><STRONG><a name="[5d4]"></a>rt_strdup</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, kservice.o(i.rt_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>

<P><STRONG><a name="[544]"></a>rt_strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kservice.o(i.rt_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_getdents
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_lookup
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_getdents
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_password
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_wait_auth
</UL>

<P><STRONG><a name="[5dc]"></a>rt_strncmp</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, kservice.o(i.rt_strncmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_lookup
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_wait_auth
</UL>

<P><STRONG><a name="[5bd]"></a>rt_strncpy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, kservice.o(i.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_getdents
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_getdents
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_getdents
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_password
</UL>

<P><STRONG><a name="[7d7]"></a>rt_system_heap_init</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, mem.o(i.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_system_heap_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[7f7]"></a>rt_system_object_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, object.o(i.rt_system_object_init))
<BR><BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[7d8]"></a>rt_system_scheduler_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, scheduler.o(i.rt_system_scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[7da]"></a>rt_system_scheduler_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scheduler.o(i.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_system_scheduler_start
</UL>
<BR>[Calls]<UL><LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[7f6]"></a>rt_system_tick_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, clock.o(i.rt_system_tick_init))
<BR><BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[7dc]"></a>rt_system_timer_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(i.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[7dd]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, timer.o(i.rt_system_timer_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_system_timer_thread_init &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[7bc]"></a>rt_thread_control</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, thread.o(i.rt_thread_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>

<P><STRONG><a name="[75c]"></a>rt_thread_create</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, thread.o(i.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</UL>

<P><STRONG><a name="[475]"></a>rt_thread_delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, thread.o(i.rt_thread_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dp83848_tcpserver_thread_entry
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_reset
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_test
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_delay_100us
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_wait_auth
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi101ThreadEntity
</UL>

<P><STRONG><a name="[7de]"></a>rt_thread_delete</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, thread.o(i.rt_thread_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[47c]"></a>rt_thread_detach</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, thread.o(i.rt_thread_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_detach &rArr; rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiThreadDelete
</UL>

<P><STRONG><a name="[9d]"></a>rt_thread_exit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, thread.o(i.rt_thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_thread_exit &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[658]"></a>rt_thread_find</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, thread.o(i.rt_thread_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_thread_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>

<P><STRONG><a name="[7e3]"></a>rt_thread_idle_excute</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, idle.o(i.rt_thread_idle_excute))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_has_defunct_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[7e5]"></a>rt_thread_idle_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, idle.o(i.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[46c]"></a>rt_thread_init</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, thread.o(i.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_thread_start
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave104_thread_start
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave101_thread_start
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protect_thread_start
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftuidle_thread_start
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp83848_2404_thread_start
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_thread_start
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi101Init
</UL>

<P><STRONG><a name="[763]"></a>rt_thread_resume</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, thread.o(i.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[558]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(i.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[7df]"></a>rt_thread_sleep</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, thread.o(i.rt_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>

<P><STRONG><a name="[46d]"></a>rt_thread_startup</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, thread.o(i.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_thread_start
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave104_thread_start
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave101_thread_start
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protect_thread_start
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftuidle_thread_start
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp83848_2404_thread_start
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_thread_start
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi101Init
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</UL>

<P><STRONG><a name="[767]"></a>rt_thread_suspend</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, thread.o(i.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[9e]"></a>rt_thread_timeout</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, thread.o(i.rt_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[7e9]"></a>rt_thread_yield</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, thread.o(i.rt_thread_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_thread_yield &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[7f4]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, clock.o(i.rt_tick_from_millisecond))
<BR><BR>[Called By]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
</UL>

<P><STRONG><a name="[419]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>

<P><STRONG><a name="[4d6]"></a>rt_tick_increase</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, clock.o(i.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[7ea]"></a>rt_timer_check</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, timer.o(i.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[768]"></a>rt_timer_control</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, timer.o(i.rt_timer_control))
<BR><BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[7e0]"></a>rt_timer_detach</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, timer.o(i.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_static_detach
</UL>

<P><STRONG><a name="[55d]"></a>rt_timer_init</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, timer.o(i.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_static_init
</UL>

<P><STRONG><a name="[769]"></a>rt_timer_start</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, timer.o(i.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_static_init
</UL>

<P><STRONG><a name="[7e7]"></a>rt_timer_stop</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, timer.o(i.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[7aa]"></a>rt_vsnprintf</STRONG> (Thumb, 800 bytes, Stack size 88 bytes, kservice.o(i.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
</UL>

<P><STRONG><a name="[19d]"></a>rt_wave_init</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, wave_recording.o(i.rt_wave_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_wave_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wave_recording.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[7f1]"></a>rt_wqueue_add</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, waitqueue.o(i.rt_wqueue_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_wqueue_add
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
</UL>

<P><STRONG><a name="[7f2]"></a>rt_wqueue_remove</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, waitqueue.o(i.rt_wqueue_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_wqueue_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
</UL>

<P><STRONG><a name="[7f3]"></a>rt_wqueue_wait</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, waitqueue.o(i.rt_wqueue_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_wqueue_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_add
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_read
</UL>

<P><STRONG><a name="[7f5]"></a>rt_wqueue_wakeup</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, waitqueue.o(i.rt_wqueue_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_wqueue_wakeup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_rx_ind
</UL>

<P><STRONG><a name="[722]"></a>rtthread_startup</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, startup.o(i.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_tick_init
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_object_init
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c1]"></a>s2j_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, s2j.o(i.s2j_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = s2j_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_InitHooks
</UL>
<BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_s2j_init
</UL>

<P><STRONG><a name="[1c6]"></a>set_date</STRONG> (Thumb, 104 bytes, Stack size 80 bytes, rtc.o(i.set_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = set_date &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(FSymTab)
</UL>
<P><STRONG><a name="[1d9]"></a>set_dns</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ethernetif.o(i.set_dns))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = set_dns &rArr; ipaddr_aton &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(FSymTab)
</UL>
<P><STRONG><a name="[1d8]"></a>set_if</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, ethernetif.o(i.set_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = set_if &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(FSymTab)
</UL>
<P><STRONG><a name="[1c7]"></a>set_time</STRONG> (Thumb, 98 bytes, Stack size 80 bytes, rtc.o(i.set_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = set_time &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(FSymTab)
</UL>
<P><STRONG><a name="[7fb]"></a>sfud_chip_erase</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sfud.o(i.sfud_chip_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = sfud_chip_erase &rArr; set_write_enabled &rArr; sfud_log_info &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>

<P><STRONG><a name="[7ca]"></a>sfud_device_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sfud.o(i.sfud_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = sfud_device_init &rArr; hardware_init &rArr; sfud_read_sfdp &rArr; read_basic_table &rArr; sfud_log_info &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_init
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe
</UL>

<P><STRONG><a name="[7c9]"></a>sfud_erase</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, sfud.o(i.sfud_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = sfud_erase &rArr; sfud_chip_erase &rArr; set_write_enabled &rArr; sfud_log_info &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_sfdp_get_suitable_eraser
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase_write
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_control
</UL>

<P><STRONG><a name="[7cc]"></a>sfud_erase_write</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sfud.o(i.sfud_erase_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = sfud_erase_write &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_log_info &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_write
</UL>

<P><STRONG><a name="[56d]"></a>sfud_log_info</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, spi_flash_sfud.o(i.sfud_log_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = sfud_log_info &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_header
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_table
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_header
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_4_byte_address_mode
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_jedec_id
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
</UL>

<P><STRONG><a name="[7cb]"></a>sfud_read</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, sfud.o(i.sfud_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = sfud_read &rArr; wait_busy &rArr; sfud_log_info &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_read
</UL>

<P><STRONG><a name="[6cc]"></a>sfud_read_sfdp</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sfud_sfdp.o(i.sfud_read_sfdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = sfud_read_sfdp &rArr; read_basic_table &rArr; sfud_log_info &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_header
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_table
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_header
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[7fa]"></a>sfud_read_status</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, sfud.o(i.sfud_read_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sfud_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>

<P><STRONG><a name="[7fd]"></a>sfud_sfdp_get_suitable_eraser</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sfud_sfdp.o(i.sfud_sfdp_get_suitable_eraser))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sfud_sfdp_get_suitable_eraser
</UL>
<BR>[Called By]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>

<P><STRONG><a name="[6ca]"></a>sfud_spi_port_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, spi_flash_sfud.o(i.sfud_spi_port_init))
<BR><BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[7fe]"></a>sfud_write</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, sfud.o(i.sfud_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_log_info &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>
<BR>[Called By]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase_write
</UL>

<P><STRONG><a name="[6ce]"></a>sfud_write_status</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, sfud.o(i.sfud_write_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = sfud_write_status &rArr; set_write_enabled &rArr; sfud_log_info &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[68a]"></a>start_Comtrade</STRONG> (Thumb, 706 bytes, Stack size 48 bytes, file_operate.o(i.start_Comtrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = start_Comtrade &rArr; file_Dir_Clear &rArr; Scan_Files &rArr;  Scan_Files (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_triggertime
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_firsttime
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_filenameDat
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_filenameCfg
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDataHandler
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatConfigurationHandler
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_Dir_Clear
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate
</UL>

<P><STRONG><a name="[5dd]"></a>stat</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_posix.o(i.stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = stat &rArr; dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_test
</UL>

<P><STRONG><a name="[79b]"></a>stm32_spi_bus_register</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, drv_spi.o(i.stm32_spi_bus_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = stm32_spi_bus_register &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi2_init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi5_init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi4_init
</UL>

<P><STRONG><a name="[60e]"></a>sys_arch_assert</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_arch.o(i.sys_arch_assert))
<BR><BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_getaddr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[726]"></a>sys_arch_mbox_fetch</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, sys_arch.o(i.sys_arch_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = sys_arch_mbox_fetch &rArr; rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[728]"></a>sys_arch_mbox_tryfetch</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sys_arch.o(i.sys_arch_mbox_tryfetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = sys_arch_mbox_tryfetch &rArr; rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[714]"></a>sys_arch_sem_wait</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, sys_arch.o(i.sys_arch_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_netifapi
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>

<P><STRONG><a name="[702]"></a>sys_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_arch.o(i.sys_init))
<BR><BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[57b]"></a>sys_mbox_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mbox_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = sys_mbox_free &rArr; rt_mb_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[641]"></a>sys_mbox_new</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, sys_arch.o(i.sys_mbox_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = sys_mbox_new &rArr; rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[800]"></a>sys_mbox_post</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mbox_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_netifapi
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>

<P><STRONG><a name="[57c]"></a>sys_mbox_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_mbox_set_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[575]"></a>sys_mbox_trypost</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mbox_trypost))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
</UL>

<P><STRONG><a name="[572]"></a>sys_mbox_valid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_mbox_valid))
<BR><BR>[Called By]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_netifapi
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
</UL>

<P><STRONG><a name="[64d]"></a>sys_now</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sys_arch.o(i.sys_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_now
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
</UL>

<P><STRONG><a name="[715]"></a>sys_sem_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.sys_sem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = sys_sem_free &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_netifapi
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[712]"></a>sys_sem_new</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, sys_arch.o(i.sys_sem_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_netifapi
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>

<P><STRONG><a name="[72a]"></a>sys_sem_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_sem_set_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>

<P><STRONG><a name="[637]"></a>sys_sem_signal</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.sys_sem_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = sys_sem_signal &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_netifapi_netif_set_addr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_netifapi_netif_common
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_netifapi_netif_add
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_getaddr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[63f]"></a>sys_sem_valid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_sem_valid))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[801]"></a>sys_thread_new</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, sys_arch.o(i.sys_thread_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = sys_thread_new &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[580]"></a>sys_timeout</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, timers.o(i.sys_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sys_timeout &rArr; memp_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_timer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[708]"></a>sys_timeouts_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timers.o(i.sys_timeouts_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[802]"></a>sys_timeouts_mbox_fetch</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, timers.o(i.sys_timeouts_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = sys_timeouts_mbox_fetch &rArr; sys_arch_mbox_fetch &rArr; rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[803]"></a>sys_untimeout</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, timers.o(i.sys_untimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sys_untimeout &rArr; memp_free &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[29e]"></a>tag_end</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mini_xml.o(i.tag_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tag_end &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_SOE
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_FEVENT
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_CO
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_SOE
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_FEVNET
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_CO
</UL>

<P><STRONG><a name="[29f]"></a>tag_start</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mini_xml.o(i.tag_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tag_start &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_SOE
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_FEVENT
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_CO
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_SOE
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_FEVNET
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_CO
</UL>

<P><STRONG><a name="[29b]"></a>tag_value</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mini_xml.o(i.tag_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tag_value &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_SOE
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_FEVENT
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_CO
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_SOE
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_FEVNET
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_CO
</UL>

<P><STRONG><a name="[804]"></a>tcp_abandon</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, tcp.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>

<P><STRONG><a name="[729]"></a>tcp_abort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[639]"></a>tcp_accept</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept))
<BR><BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[807]"></a>tcp_alloc</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, tcp.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
</UL>

<P><STRONG><a name="[576]"></a>tcp_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_arg))
<BR><BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[636]"></a>tcp_bind</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, tcp.o(i.tcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[63a]"></a>tcp_close</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[812]"></a>tcp_eff_send_mss</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(i.tcp_eff_send_mss))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_eff_send_mss &rArr; ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[813]"></a>tcp_enqueue_flags</STRONG> (Thumb, 406 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_enqueue_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[57a]"></a>tcp_err</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tcp.o(i.tcp_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tcp_err &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[815]"></a>tcp_fasttmr</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tcp.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[707]"></a>tcp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp.o(i.tcp_init))
<BR><BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[6ed]"></a>tcp_input</STRONG> (Thumb, 1680 bytes, Stack size 56 bytes, tcp_in.o(i.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[81a]"></a>tcp_keepalive</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = tcp_keepalive &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[640]"></a>tcp_listen_with_backlog</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, tcp.o(i.tcp_listen_with_backlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = tcp_listen_with_backlog &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[73a]"></a>tcp_new</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tcp.o(i.tcp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[80a]"></a>tcp_next_iss</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(i.tcp_next_iss))
<BR><BR>[Called By]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[64f]"></a>tcp_output</STRONG> (Thumb, 496 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
</UL>

<P><STRONG><a name="[80e]"></a>tcp_pcb_purge</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[805]"></a>tcp_pcb_remove</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[579]"></a>tcp_poll</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tcp.o(i.tcp_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tcp_poll &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[816]"></a>tcp_process_refused_data</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, tcp.o(i.tcp_process_refused_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[577]"></a>tcp_recv</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tcp.o(i.tcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tcp_recv &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[102]"></a>tcp_recv_null</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_alloc)
</UL>
<P><STRONG><a name="[645]"></a>tcp_recved</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tcp.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
</UL>

<P><STRONG><a name="[822]"></a>tcp_rexmit</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tcp_rexmit &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[823]"></a>tcp_rexmit_fast</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[826]"></a>tcp_rexmit_rto</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[806]"></a>tcp_rst</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = tcp_rst &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[825]"></a>tcp_seg_copy</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tcp.o(i.tcp_seg_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tcp_seg_copy &rArr; memp_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[811]"></a>tcp_seg_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>

<P><STRONG><a name="[737]"></a>tcp_segs_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tcp.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
</UL>

<P><STRONG><a name="[81e]"></a>tcp_send_empty_ack</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[80f]"></a>tcp_send_fin</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_send_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[578]"></a>tcp_sent</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tcp.o(i.tcp_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tcp_sent &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[63b]"></a>tcp_shutdown</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tcp.o(i.tcp_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[827]"></a>tcp_slowtmr</STRONG> (Thumb, 1400 bytes, Stack size 48 bytes, tcp.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[80c]"></a>tcp_timer_needed</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timers.o(i.tcp_timer_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[829]"></a>tcp_tmr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tcp.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>

<P><STRONG><a name="[824]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tcp.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tcp_update_rcv_ann_wnd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</UL>

<P><STRONG><a name="[64e]"></a>tcp_write</STRONG> (Thumb, 1542 bytes, Stack size 112 bytes, tcp_out.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
</UL>

<P><STRONG><a name="[828]"></a>tcp_zero_window_probe</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = tcp_zero_window_probe &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[727]"></a>tcpip_apimsg</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, tcpip.o(i.tcpip_apimsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recved
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[71c]"></a>tcpip_callback_with_block</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, tcpip.o(i.tcpip_callback_with_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
</UL>

<P><STRONG><a name="[71f]"></a>tcpip_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = tcpip_init &rArr; sys_thread_new &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</UL>

<P><STRONG><a name="[aa]"></a>tcpip_input</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = tcpip_input &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sys_arch.o(i.tcpip_init_done_callback)
<LI> ethernetif.o(i.eth_device_init_with_flag)
</UL>
<P><STRONG><a name="[72f]"></a>tcpip_netifapi</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, tcpip.o(i.tcpip_netifapi))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_add
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_set_addr
</UL>

<P><STRONG><a name="[6c8]"></a>time</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rtc.o(i.time))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_date
</UL>

<P><STRONG><a name="[47b]"></a>time_static_detach</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gui_common.o(i.time_static_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = time_static_detach &rArr; rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiThreadDelete
</UL>

<P><STRONG><a name="[46f]"></a>time_static_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gui_common.o(i.time_static_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = time_static_init &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi101ThreadEntity
</UL>

<P><STRONG><a name="[82b]"></a>token_get_string</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, finsh_token.o(i.token_get_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = token_get_string &rArr; token_next_char &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[613]"></a>udp_bind</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = udp_bind &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
</UL>

<P><STRONG><a name="[61e]"></a>udp_connect</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, udp.o(i.udp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = udp_connect &rArr; udp_bind &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[706]"></a>udp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, udp.o(i.udp_init))
<BR><BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[6ec]"></a>udp_input</STRONG> (Thumb, 478 bytes, Stack size 56 bytes, udp.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[612]"></a>udp_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, udp.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = udp_new &rArr; memp_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
</UL>

<P><STRONG><a name="[614]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(i.udp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
</UL>

<P><STRONG><a name="[63e]"></a>udp_remove</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, udp.o(i.udp_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = udp_remove &rArr; memp_free &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
</UL>

<P><STRONG><a name="[648]"></a>udp_send</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, udp.o(i.udp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[61f]"></a>udp_sendto</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, udp.o(i.udp_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[836]"></a>udp_sendto_if</STRONG> (Thumb, 298 bytes, Stack size 64 bytes, udp.o(i.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[837]"></a>uffs_BadBlockAdd</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, uffs_badblock.o(i.uffs_BadBlockAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPageTag
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMarkDirtyPage
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPage
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashEraseBlock
</UL>

<P><STRONG><a name="[884]"></a>uffs_BadBlockInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uffs_badblock.o(i.uffs_BadBlockInit))
<BR><BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitDevice
</UL>

<P><STRONG><a name="[502]"></a>uffs_BadBlockProcess</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, uffs_badblock.o(i.uffs_BadBlockProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = uffs_BadBlockProcess &rArr; uffs_FlashMarkBadBlock &rArr; uffs_BlockInfoGet &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInsertToBadBlockList
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMarkBadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepThree
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepOne
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
</UL>

<P><STRONG><a name="[839]"></a>uffs_BadBlockProcessSuspend</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, uffs_badblock.o(i.uffs_BadBlockProcessSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = uffs_BadBlockProcessSuspend &rArr; uffs_FlashMarkBadBlock &rArr; uffs_BlockInfoGet &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeSuspendAdd
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMarkBadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
</UL>

<P><STRONG><a name="[626]"></a>uffs_BadBlockRecover</STRONG> (Thumb, 584 bytes, Stack size 72 bytes, uffs_badblock.o(i.uffs_BadBlockRecover))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = uffs_BadBlockRecover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInsertToErasedListTail
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeGetErasedNode
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindNodeByBlock
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_LoadPhyDataToBufEccUnCare
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetNextBlockTimeStamp
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindPageInBlockWithPageId
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindBestPageInBlock
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFreeClone
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufClone
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoPut
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoGet
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoExpire
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_WriteObject
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReadObject
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_ReleaseObjectResource
</UL>

<P><STRONG><a name="[62e]"></a>uffs_BlockInfoExpire</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, uffs_blockinfo.o(i.uffs_BlockInfoExpire))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uffs_BlockInfoExpire
</UL>
<BR>[Called By]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMarkBadBlock
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashEraseBlock
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
</UL>

<P><STRONG><a name="[83f]"></a>uffs_BlockInfoFindInCache</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uffs_blockinfo.o(i.uffs_BlockInfoFindInCache))
<BR><BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoGet
</UL>

<P><STRONG><a name="[4f2]"></a>uffs_BlockInfoGet</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, uffs_blockinfo.o(i.uffs_BlockInfoGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = uffs_BlockInfoGet &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoFindInCache
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveBcToTail
</UL>
<BR>[Called By]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMarkBadBlock
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashEraseBlock
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush_NewBlock
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepOne
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
</UL>

<P><STRONG><a name="[840]"></a>uffs_BlockInfoInitCache</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, uffs_blockinfo.o(i.uffs_BlockInfoInitCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = uffs_BlockInfoInitCache &rArr; uffs_BlockInfoReleaseCache &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoReleaseCache
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitDevice
</UL>

<P><STRONG><a name="[4f3]"></a>uffs_BlockInfoLoad</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, uffs_blockinfo.o(i.uffs_BlockInfoLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPageTag
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindPageInBlockWithPageId
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindBestPageInBlock
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_IsThisBlockUsed
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_IsPageErased
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetFreePagesCount
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetBlockTimeStamp
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScanAndFixUnCleanPage
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetBlockFileDataLength
</UL>

<P><STRONG><a name="[4f7]"></a>uffs_BlockInfoPut</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uffs_blockinfo.o(i.uffs_BlockInfoPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = uffs_BlockInfoPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMarkBadBlock
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashEraseBlock
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush_NewBlock
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepOne
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
</UL>

<P><STRONG><a name="[841]"></a>uffs_BlockInfoReleaseCache</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, uffs_blockinfo.o(i.uffs_BlockInfoReleaseCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = uffs_BlockInfoReleaseCache &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoInitCache
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReleaseDevice
</UL>

<P><STRONG><a name="[507]"></a>uffs_BreakFromEntry</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, uffs_tree.o(i.uffs_BreakFromEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = uffs_BreakFromEntry &rArr; uffs_PoolGetIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetIndex
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepThree
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
</UL>

<P><STRONG><a name="[50e]"></a>uffs_BufClone</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, uffs_buf.o(i.uffs_BufClone))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = uffs_BufClone &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindFreeBufEx
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BreakFromBufList
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashCheckErasedBlock
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
</UL>

<P><STRONG><a name="[516]"></a>uffs_BufFind</STRONG> (Thumb, 34 bytes, Stack size 28 bytes, uffs_buf.o(i.uffs_BufFind))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uffs_BufFind &rArr; uffs_BufFindFrom
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFindFrom
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGet
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckObjBufRef
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
</UL>

<P><STRONG><a name="[84f]"></a>uffs_BufFindFreeGroupSlot</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uffs_buf.o(i.uffs_BufFindFreeGroupSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uffs_BufFindFreeGroupSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufWrite
</UL>

<P><STRONG><a name="[517]"></a>uffs_BufFindFrom</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, uffs_buf.o(i.uffs_BufFindFrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uffs_BufFindFrom
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFind
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckObjBufRef
</UL>

<P><STRONG><a name="[4eb]"></a>uffs_BufFindGroupSlot</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, uffs_buf.o(i.uffs_BufFindGroupSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uffs_BufFindGroupSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufWrite
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushGroupEx
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushGroup
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BreakFromDirty
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
</UL>

<P><STRONG><a name="[843]"></a>uffs_BufFlushAll</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, uffs_buf.o(i.uffs_BufFlushAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = uffs_BufFlushAll &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
</UL>
<BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufReleaseAll
</UL>

<P><STRONG><a name="[623]"></a>uffs_BufFlushGroup</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, uffs_buf.o(i.uffs_BufFlushGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = uffs_BufFlushGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFindGroupSlot
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufWrite
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteObject
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_FlushObject
</UL>

<P><STRONG><a name="[62c]"></a>uffs_BufFlushGroupEx</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, uffs_buf.o(i.uffs_BufFlushGroupEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = uffs_BufFlushGroupEx &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFindGroupSlot
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
</UL>
<BR>[Called By]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MoveObjectEx
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
</UL>

<P><STRONG><a name="[624]"></a>uffs_BufFlushGroupMatchParent</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, uffs_buf.o(i.uffs_BufFlushGroupMatchParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = uffs_BufFlushGroupMatchParent &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
</UL>
<BR>[Called By]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_FlushObject
</UL>

<P><STRONG><a name="[844]"></a>uffs_BufFlushMostDirtyGroup</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uffs_buf.o(i.uffs_BufFlushMostDirtyGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindMostDirtyGroup
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufWrite
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufNew
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
</UL>

<P><STRONG><a name="[510]"></a>uffs_BufFreeClone</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, uffs_buf.o(i.uffs_BufFreeClone))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = uffs_BufFreeClone &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LinkToBufListTail
</UL>
<BR>[Called By]<UL><LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashCheckErasedBlock
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufPut
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
</UL>

<P><STRONG><a name="[848]"></a>uffs_BufGet</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, uffs_buf.o(i.uffs_BufGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = uffs_BufGet &rArr; uffs_BufFind &rArr; uffs_BufFindFrom
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFind
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveNodeToHead
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufNew
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
</UL>

<P><STRONG><a name="[521]"></a>uffs_BufGetEx</STRONG> (Thumb, 432 bytes, Stack size 56 bytes, uffs_buf.o(i.uffs_BufGetEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindPageInBlockWithPageId
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindBestPageInBlock
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoPut
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoGet
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPage
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushMostDirtyGroup
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFind
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveNodeToHead
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindFreeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LoadObjectInfo
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReadObject
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeCompareFileName
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MoveObjectEx
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteInternalBlock
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
</UL>

<P><STRONG><a name="[84c]"></a>uffs_BufInit</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, uffs_buf.o(i.uffs_BufInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = uffs_BufInit &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitDevice
</UL>

<P><STRONG><a name="[849]"></a>uffs_BufLoadPhyData</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, uffs_buf.o(i.uffs_BufLoadPhyData))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = uffs_BufLoadPhyData &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPage
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
</UL>

<P><STRONG><a name="[62a]"></a>uffs_BufLockGroup</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, uffs_buf.o(i.uffs_BufLockGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uffs_BufLockGroup
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
</UL>

<P><STRONG><a name="[62b]"></a>uffs_BufMarkEmpty</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, uffs_buf.o(i.uffs_BufMarkEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = uffs_BufMarkEmpty &rArr; _BreakFromDirty &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BreakFromDirty
</UL>
<BR>[Called By]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
</UL>

<P><STRONG><a name="[633]"></a>uffs_BufNew</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, uffs_buf.o(i.uffs_BufNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = uffs_BufNew &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGet
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushMostDirtyGroup
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveNodeToHead
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindFreeBuf
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteNewBlock
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteInternalBlock
</UL>

<P><STRONG><a name="[522]"></a>uffs_BufPut</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, uffs_buf.o(i.uffs_BufPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = uffs_BufPut &rArr; uffs_BufFreeClone &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFreeClone
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LoadObjectInfo
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReadObject
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeCompareFileName
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MoveObjectEx
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteNewBlock
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteInternalBlock
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
</UL>

<P><STRONG><a name="[84d]"></a>uffs_BufRead</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uffs_buf.o(i.uffs_BufRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uffs_BufRead
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReadObject
</UL>

<P><STRONG><a name="[84e]"></a>uffs_BufReleaseAll</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, uffs_buf.o(i.uffs_BufReleaseAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = uffs_BufReleaseAll &rArr; uffs_BufFlushAll &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushAll
</UL>
<BR>[Called By]<UL><LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReleaseDevice
</UL>

<P><STRONG><a name="[62d]"></a>uffs_BufUnLockGroup</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, uffs_buf.o(i.uffs_BufUnLockGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = uffs_BufUnLockGroup &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
</UL>

<P><STRONG><a name="[629]"></a>uffs_BufWrite</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, uffs_buf.o(i.uffs_BufWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = uffs_BufWrite &rArr; uffs_BufFlushGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushMostDirtyGroup
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushGroup
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFindGroupSlot
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFindFreeGroupSlot
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LinkToDirtyList
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsBufInInDirtyList
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MoveObjectEx
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteNewBlock
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteInternalBlock
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
</UL>

<P><STRONG><a name="[851]"></a>uffs_BuildTree</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, uffs_tree.o(i.uffs_BuildTree))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = uffs_BuildTree &rArr; _BuildTreeStepOne &rArr; _BuildValidTreeNode &rArr; uffs_GetBlockFileDataLength &rArr; uffs_FindBestPageInBlock &rArr; uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepTwo
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepThree
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepOne
</UL>
<BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitDevice
</UL>

<P><STRONG><a name="[852]"></a>uffs_CloseObject</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, uffs_fs.o(i.uffs_CloseObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = uffs_CloseObject &rArr; do_FlushObject &rArr; uffs_BufFlushGroupMatchParent &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_ReleaseObjectResource
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_FlushObject
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_stat
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_opendir
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_mkdir
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_closedir
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_close
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_RenameObject
</UL>

<P><STRONG><a name="[896]"></a>uffs_CompareFileName</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, uffs_tree.o(i.uffs_CompareFileName))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uffs_CompareFileName
</UL>
<BR>[Called By]<UL><LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeCompareFileName
</UL>

<P><STRONG><a name="[853]"></a>uffs_CreateObject</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, uffs_fs.o(i.uffs_CreateObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = uffs_CreateObject &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutDevice
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ParseObject
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_mkdir
</UL>

<P><STRONG><a name="[855]"></a>uffs_CreateObjectEx</STRONG> (Thumb, 556 bytes, Stack size 192 bytes, uffs_fs.o(i.uffs_CreateObjectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160 + Unknown Stack Size
<LI>Call Chain = uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetCurDateTime
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindFileNode
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNode
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MakeSum16
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufWrite
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufPut
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufNew
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushGroup
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindFileNodeByName
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNodeByName
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindFreeFsnSerial
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObject
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObjectEx
</UL>

<P><STRONG><a name="[859]"></a>uffs_DeleteObject</STRONG> (Thumb, 516 bytes, Stack size 64 bytes, uffs_fs.o(i.uffs_DeleteObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296 + Unknown Stack Size
<LI>Call Chain = uffs_DeleteObject &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeSuspendAdd
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInsertToErasedListTail
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInsertToBadBlockList
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockProcessSuspend
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockProcess
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutObject
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolFindNextAllocated
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObject
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObject
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDataNode
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashEraseBlock
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushAll
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeRemoveSuspendNode
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindFileNodeWithParent
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNodeWithParent
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BreakFromEntry
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckObjBufRef
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_ReleaseObjectResource
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFdnByOfs
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rmdir
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_remove
</UL>

<P><STRONG><a name="[883]"></a>uffs_DeviceInitLock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uffs_device.o(i.uffs_DeviceInitLock))
<BR><BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitDevice
</UL>

<P><STRONG><a name="[86a]"></a>uffs_DeviceLock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uffs_device.o(i.uffs_DeviceLock))
<BR><BR>[Called By]<UL><LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectFirst
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObjectInfo
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectNext
</UL>

<P><STRONG><a name="[886]"></a>uffs_DeviceReleaseLock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uffs_device.o(i.uffs_DeviceReleaseLock))
<BR><BR>[Called By]<UL><LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReleaseDevice
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitDevice
</UL>

<P><STRONG><a name="[86b]"></a>uffs_DeviceUnLock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uffs_device.o(i.uffs_DeviceUnLock))
<BR><BR>[Called By]<UL><LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectFirst
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObjectInfo
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectNext
</UL>

<P><STRONG><a name="[5e6]"></a>uffs_DirEntryBufInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uffs_fd.o(i.uffs_DirEntryBufInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = uffs_DirEntryBufInit &rArr; uffs_PoolInit &rArr; uffs_SemCreate &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_init
</UL>

<P><STRONG><a name="[862]"></a>uffs_EccCorrect</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, uffs_ecc.o(i.uffs_EccCorrect))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = uffs_EccCorrect &rArr; uffs_EccCorrectChunk256
</UL>
<BR>[Calls]<UL><LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_EccCorrectChunk256
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPage
</UL>

<P><STRONG><a name="[4de]"></a>uffs_EccCorrect8</STRONG> (Thumb, 212 bytes, Stack size 28 bytes, uffs_ecc.o(i.uffs_EccCorrect8))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uffs_EccCorrect8
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEccCorrect
</UL>

<P><STRONG><a name="[864]"></a>uffs_EccMake</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, uffs_ecc.o(i.uffs_EccMake))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = uffs_EccMake &rArr; uffs_EccMakeChunk256
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_EccMakeChunk256
</UL>
<BR>[Called By]<UL><LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPage
</UL>

<P><STRONG><a name="[4dd]"></a>uffs_EccMake8</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, uffs_ecc.o(i.uffs_EccMake8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uffs_EccMake8
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagMakeEcc
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEccCorrect
</UL>

<P><STRONG><a name="[511]"></a>uffs_FindBestPageInBlock</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, uffs_public.o(i.uffs_FindBestPageInBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = uffs_FindBestPageInBlock &rArr; uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetBlockFileDataLength
</UL>

<P><STRONG><a name="[858]"></a>uffs_FindFreeFsnSerial</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uffs_tree.o(i.uffs_FindFreeFsnSerial))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = uffs_FindFreeFsnSerial &rArr; uffs_TreeFindFileNode &rArr; uffs_PoolGetBufByIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindFileNode
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNode
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindSuspendNode
</UL>
<BR>[Called By]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
</UL>

<P><STRONG><a name="[50b]"></a>uffs_FindFromTree</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, uffs_tree.o(i.uffs_FindFromTree))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = uffs_FindFromTree &rArr; uffs_TreeFindFileNode &rArr; uffs_PoolGetBufByIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindFileNode
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNode
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDataNode
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
</UL>

<P><STRONG><a name="[867]"></a>uffs_FindObjectClose</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uffs_find.o(i.uffs_FindObjectClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uffs_FindObjectClose
</UL>
<BR>[Calls]<UL><LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetFindInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_closedir
</UL>

<P><STRONG><a name="[869]"></a>uffs_FindObjectFirst</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, uffs_find.o(i.uffs_FindObjectFirst))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = uffs_FindObjectFirst &rArr; do_FindObject &rArr; _LoadObjectInfo &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_FindObject
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetFindInfo
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeviceUnLock
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeviceLock
</UL>
<BR>[Called By]<UL><LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectNext
</UL>

<P><STRONG><a name="[86c]"></a>uffs_FindObjectNext</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, uffs_find.o(i.uffs_FindObjectNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = uffs_FindObjectNext &rArr; uffs_FindObjectFirst &rArr; do_FindObject &rArr; _LoadObjectInfo &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectFirst
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_FindObject
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeviceUnLock
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeviceLock
</UL>
<BR>[Called By]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_readdir
</UL>

<P><STRONG><a name="[86d]"></a>uffs_FindObjectOpen</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uffs_find.o(i.uffs_FindObjectOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uffs_FindObjectOpen
</UL>
<BR>[Calls]<UL><LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetFindInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_opendir
</UL>

<P><STRONG><a name="[86e]"></a>uffs_FindObjectRewind</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uffs_find.o(i.uffs_FindObjectRewind))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uffs_FindObjectRewind
</UL>
<BR>[Calls]<UL><LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetFindInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rewinddir
</UL>

<P><STRONG><a name="[50f]"></a>uffs_FindPageInBlockWithPageId</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, uffs_public.o(i.uffs_FindPageInBlockWithPageId))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = uffs_FindPageInBlockWithPageId &rArr; uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
</UL>

<P><STRONG><a name="[86f]"></a>uffs_FlashCheckErasedBlock</STRONG> (Thumb, 364 bytes, Stack size 120 bytes, uffs_flash.o(i.uffs_FlashCheckErasedBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = uffs_FlashCheckErasedBlock &rArr; uffs_BufFreeClone &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFreeClone
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufClone
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolPut
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGet
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeGetErasedNode
</UL>

<P><STRONG><a name="[4fb]"></a>uffs_FlashEraseBlock</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, uffs_flash.o(i.uffs_FlashEraseBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = uffs_FlashEraseBlock &rArr; uffs_BlockInfoGet &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoPut
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoGet
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoExpire
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeGetErasedNode
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush_NewBlock
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepThree
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepOne
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
</UL>

<P><STRONG><a name="[870]"></a>uffs_FlashInterfaceInit</STRONG> (Thumb, 450 bytes, Stack size 24 bytes, uffs_flash.o(i.uffs_FlashInterfaceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = uffs_FlashInterfaceInit &rArr; uffs_PoolInit &rArr; uffs_SemCreate &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSpareLayout
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSpareDataSize
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolInit
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitDevice
</UL>

<P><STRONG><a name="[873]"></a>uffs_FlashInterfaceRelease</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, uffs_flash.o(i.uffs_FlashInterfaceRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = uffs_FlashInterfaceRelease &rArr; uffs_PoolRelease &rArr; uffs_SemDelete &rArr; rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolRelease
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReleaseDevice
</UL>

<P><STRONG><a name="[4fe]"></a>uffs_FlashIsBadBlock</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, uffs_flash.o(i.uffs_FlashIsBadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uffs_FlashIsBadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepOne
</UL>

<P><STRONG><a name="[875]"></a>uffs_FlashMakeSpare</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, uffs_flash.o(i.uffs_FlashMakeSpare))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = uffs_FlashMakeSpare &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMarkDirtyPage
</UL>

<P><STRONG><a name="[838]"></a>uffs_FlashMarkBadBlock</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, uffs_flash.o(i.uffs_FlashMarkBadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = uffs_FlashMarkBadBlock &rArr; uffs_BlockInfoGet &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoPut
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoGet
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoExpire
</UL>
<BR>[Called By]<UL><LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockProcessSuspend
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockProcess
</UL>

<P><STRONG><a name="[529]"></a>uffs_FlashMarkDirtyPage</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, uffs_flash.o(i.uffs_FlashMarkDirtyPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = uffs_FlashMarkDirtyPage &rArr; uffs_FlashMakeSpare &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockAdd
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMakeSpare
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagMakeEcc
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolPut
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGet
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScanAndFixUnCleanPage
</UL>

<P><STRONG><a name="[512]"></a>uffs_FlashReadPage</STRONG> (Thumb, 620 bytes, Stack size 160 bytes, uffs_flash.o(i.uffs_FlashReadPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockAdd
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashUnloadSpare
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolPut
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGet
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_EccMake
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_EccCorrect
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_crc16sum
</UL>
<BR>[Called By]<UL><LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_LoadPhyDataToBufEccUnCare
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufLoadPhyData
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
</UL>

<P><STRONG><a name="[842]"></a>uffs_FlashReadPageTag</STRONG> (Thumb, 356 bytes, Stack size 72 bytes, uffs_flash.o(i.uffs_FlashReadPageTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = uffs_FlashReadPageTag &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockAdd
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashUnloadSpare
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEccCorrect
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolPut
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGet
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
</UL>

<P><STRONG><a name="[877]"></a>uffs_FlashUnloadSpare</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, uffs_flash.o(i.uffs_FlashUnloadSpare))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uffs_FlashUnloadSpare
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPageTag
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPage
</UL>

<P><STRONG><a name="[83d]"></a>uffs_FlashWritePageCombine</STRONG> (Thumb, 516 bytes, Stack size 128 bytes, uffs_flash.o(i.uffs_FlashWritePageCombine))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPageTag
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFreeClone
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufClone
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockAdd
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMakeSpare
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagMakeEcc
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolPut
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGet
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_EccMake
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_crc16sum
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPage
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_Enough_FreePage
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
</UL>

<P><STRONG><a name="[878]"></a>uffs_FlushObject</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, uffs_fs.o(i.uffs_FlushObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = uffs_FlushObject &rArr; do_FlushObject &rArr; uffs_BufFlushGroupMatchParent &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_FlushObject
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_flush
</UL>

<P><STRONG><a name="[514]"></a>uffs_GetBlockFileDataLength</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, uffs_public.o(i.uffs_GetBlockFileDataLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = uffs_GetBlockFileDataLength &rArr; uffs_FindBestPageInBlock &rArr; uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindBestPageInBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
</UL>

<P><STRONG><a name="[846]"></a>uffs_GetBlockTimeStamp</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uffs_public.o(i.uffs_GetBlockTimeStamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = uffs_GetBlockTimeStamp &rArr; uffs_IsThisBlockUsed &rArr; uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_IsThisBlockUsed
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetFirstBlockTimeStamp
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_Enough_FreePage
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
</UL>

<P><STRONG><a name="[509]"></a>uffs_GetCurDateTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uffs_rtthread.o(i.uffs_GetCurDateTime))
<BR><BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepTwo
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MoveObjectEx
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
</UL>

<P><STRONG><a name="[5f2]"></a>uffs_GetDeviceFree</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uffs_public.o(i.uffs_GetDeviceFree))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_statfs
</UL>

<P><STRONG><a name="[87a]"></a>uffs_GetDeviceFromMountPointEx</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, uffs_mtb.o(i.uffs_GetDeviceFromMountPointEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uffs_GetDeviceFromMountPointEx &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetMatchedMountPointSize
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ParseObject
</UL>

<P><STRONG><a name="[879]"></a>uffs_GetFirstBlockTimeStamp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uffs_public.o(i.uffs_GetFirstBlockTimeStamp))
<BR><BR>[Called By]<UL><LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetBlockTimeStamp
</UL>

<P><STRONG><a name="[4f4]"></a>uffs_GetFreePagesCount</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, uffs_public.o(i.uffs_GetFreePagesCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = uffs_GetFreePagesCount &rArr; uffs_IsPageErased &rArr; uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_IsPageErased
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
</UL>

<P><STRONG><a name="[87b]"></a>uffs_GetMatchedMountPointSize</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, uffs_mtb.o(i.uffs_GetMatchedMountPointSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uffs_GetMatchedMountPointSize &rArr; uffs_GetDeviceFromMountPointEx &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutDevice
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetDeviceFromMountPointEx
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ParseObject
</UL>

<P><STRONG><a name="[83c]"></a>uffs_GetNextBlockTimeStamp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uffs_public.o(i.uffs_GetNextBlockTimeStamp))
<BR><BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
</UL>

<P><STRONG><a name="[85a]"></a>uffs_GetObject</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uffs_fs.o(i.uffs_GetObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = uffs_GetObject &rArr; uffs_PoolGet &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGet
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_stat
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_opendir
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_open
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_mkdir
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_RenameObject
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
</UL>

<P><STRONG><a name="[64a]"></a>uffs_GetObjectInfo</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, uffs_find.o(i.uffs_GetObjectInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = uffs_GetObjectInfo &rArr; _LoadObjectInfo &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LoadObjectInfo
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeviceUnLock
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeviceLock
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stat
</UL>

<P><STRONG><a name="[89d]"></a>uffs_GetObjectPool</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uffs_fs.o(i.uffs_GetObjectPool))
<BR><BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_write
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_seek
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_read
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_open
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_flush
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_close
</UL>

<P><STRONG><a name="[87d]"></a>uffs_GlobalFsLockLock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uffs_utils.o(i.uffs_GlobalFsLockLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = uffs_GlobalFsLockLock &rArr; uffs_SemWait &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemWait
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_write
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_stat
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_seek
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rmdir
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rewinddir
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rename
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_remove
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_readdir
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_read
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_opendir
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_open
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_mkdir
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_flush
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_closedir
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_close
</UL>

<P><STRONG><a name="[87f]"></a>uffs_GlobalFsLockUnlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uffs_utils.o(i.uffs_GlobalFsLockUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = uffs_GlobalFsLockUnlock &rArr; uffs_SemSignal &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_write
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_stat
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_seek
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rmdir
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rewinddir
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rename
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_remove
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_readdir
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_read
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_opendir
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_open
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_mkdir
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_flush
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_closedir
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_close
</UL>

<P><STRONG><a name="[881]"></a>uffs_InitDevice</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, uffs_init.o(i.uffs_InitDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = uffs_InitDevice &rArr; uffs_BuildTree &rArr; _BuildTreeStepOne &rArr; _BuildValidTreeNode &rArr; uffs_GetBlockFileDataLength &rArr; uffs_FindBestPageInBlock &rArr; uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoInitCache
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockInit
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashInterfaceInit
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeviceReleaseLock
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeviceInitLock
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufInit
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInit
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BuildTree
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitDeviceConfig
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_Mount
</UL>

<P><STRONG><a name="[5e7]"></a>uffs_InitGlobalFsLock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uffs_utils.o(i.uffs_InitGlobalFsLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = uffs_InitGlobalFsLock &rArr; uffs_SemCreate &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_init
</UL>

<P><STRONG><a name="[5e5]"></a>uffs_InitObjectBuf</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uffs_fs.o(i.uffs_InitObjectBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = uffs_InitObjectBuf &rArr; uffs_PoolInit &rArr; uffs_SemCreate &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_init
</UL>

<P><STRONG><a name="[4fa]"></a>uffs_InsertNodeToTree</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uffs_tree.o(i.uffs_InsertNodeToTree))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = uffs_InsertNodeToTree &rArr; uffs_InsertToFileEntry &rArr; _InsertToEntry &rArr; uffs_PoolGetIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InsertToFileEntry
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InsertToDirEntry
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InsertToDataEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush_NewBlock
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
</UL>

<P><STRONG><a name="[4f9]"></a>uffs_InsertToErasedListHead</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, uffs_tree.o(i.uffs_InsertToErasedListHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uffs_InsertToErasedListHead
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush_NewBlock
</UL>

<P><STRONG><a name="[500]"></a>uffs_IsPageErased</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, uffs_public.o(i.uffs_IsPageErased))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = uffs_IsPageErased &rArr; uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetFreePagesCount
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_Enough_FreePage
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepOne
</UL>

<P><STRONG><a name="[50d]"></a>uffs_IsSrcNewerThanObj</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uffs_public.o(i.uffs_IsSrcNewerThanObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = uffs_IsSrcNewerThanObj &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
</UL>

<P><STRONG><a name="[84a]"></a>uffs_IsThisBlockUsed</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uffs_public.o(i.uffs_IsThisBlockUsed))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = uffs_IsThisBlockUsed &rArr; uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetBlockTimeStamp
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
</UL>

<P><STRONG><a name="[501]"></a>uffs_LoadMiniHeader</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, uffs_public.o(i.uffs_LoadMiniHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uffs_LoadMiniHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScanAndFixUnCleanPage
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepOne
</UL>

<P><STRONG><a name="[83b]"></a>uffs_LoadPhyDataToBufEccUnCare</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, uffs_buf.o(i.uffs_LoadPhyDataToBufEccUnCare))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = uffs_LoadPhyDataToBufEccUnCare &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPage
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
</UL>

<P><STRONG><a name="[513]"></a>uffs_MakeSum16</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uffs_public.o(i.uffs_MakeSum16))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uffs_MakeSum16 &rArr; uffs_crc16sum &rArr; uffs_crc16update
</UL>
<BR>[Calls]<UL><LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_crc16sum
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDirOrFileNameSum
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeCompareFileName
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ParseObject
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObjectEx
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MoveObjectEx
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
</UL>

<P><STRONG><a name="[6e8]"></a>uffs_MemSetupSystemAllocator</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uffs_rtthread.o(i.uffs_MemSetupSystemAllocator))
<BR><BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uffs_fs
</UL>

<P><STRONG><a name="[5e8]"></a>uffs_Mount</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, uffs_mtb.o(i.uffs_Mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = uffs_Mount &rArr; uffs_InitDevice &rArr; uffs_BuildTree &rArr; _BuildTreeStepOne &rArr; _BuildValidTreeNode &rArr; uffs_GetBlockFileDataLength &rArr; uffs_FindBestPageInBlock &rArr; uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetMountTableByMountPoint
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uffs_fs
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_mkfs
</UL>

<P><STRONG><a name="[88b]"></a>uffs_MoveObjectEx</STRONG> (Thumb, 244 bytes, Stack size 192 bytes, uffs_fs.o(i.uffs_MoveObjectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = uffs_MoveObjectEx &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetCurDateTime
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MakeSum16
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufWrite
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufPut
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushGroupEx
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_RenameObject
</UL>

<P><STRONG><a name="[85b]"></a>uffs_OpenObject</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uffs_fs.o(i.uffs_OpenObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ParseObject
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObjectEx
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_ReleaseObjectResource
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_stat
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_opendir
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_open
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_RenameObject
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
</UL>

<P><STRONG><a name="[88c]"></a>uffs_OpenObjectEx</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, uffs_fs.o(i.uffs_OpenObjectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200 + Unknown Stack Size
<LI>Call Chain = uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MakeSum16
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindFileNodeByName
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNodeByName
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
</UL>
<BR>[Called By]<UL><LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObject
</UL>

<P><STRONG><a name="[854]"></a>uffs_ParseObject</STRONG> (Thumb, 252 bytes, Stack size 64 bytes, uffs_fs.o(i.uffs_ParseObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = uffs_ParseObject &rArr; uffs_TreeFindDirNodeByName &rArr; uffs_TreeCompareFileName &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutDevice
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MakeSum16
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNodeByName
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetMatchedMountPointSize
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetDeviceFromMountPointEx
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReInitObject
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDirLengthFromPath
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_RenameObject
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObject
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObject
</UL>

<P><STRONG><a name="[89e]"></a>uffs_PoolCheckFreeList</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uffs_pool.o(i.uffs_PoolCheckFreeList))
<BR><BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_write
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_seek
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rewinddir
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_readdir
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_read
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_flush
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_closedir
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_close
</UL>

<P><STRONG><a name="[85c]"></a>uffs_PoolFindNextAllocated</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, uffs_pool.o(i.uffs_PoolFindNextAllocated))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = uffs_PoolFindNextAllocated &rArr; FindNextAllocatedInSmallPool &rArr; uffs_PoolGetIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolVerify
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindNextAllocatedInSmallPool
</UL>
<BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
</UL>

<P><STRONG><a name="[3ee]"></a>uffs_PoolGet</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, uffs_pool.o(i.uffs_PoolGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = uffs_PoolGet &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPageTag
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMarkDirtyPage
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashCheckErasedBlock
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObject
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDirEntry
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPage
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepOne
</UL>

<P><STRONG><a name="[3d3]"></a>uffs_PoolGetBufByIndex</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, uffs_pool.o(i.uffs_PoolGetBufByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = uffs_PoolGetBufByIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_write
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_seek
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_read
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_flush
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_close
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_FindObject
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindFileNode
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNode
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDataNode
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindFileNodeByBlock
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNodeByBlock
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDataNodeByBlock
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertToEntry
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepThree
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindNextAllocatedInSmallPool
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindFileNodeWithParent
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindFileNodeByName
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNodeWithParent
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNodeByName
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BreakFromEntry
</UL>

<P><STRONG><a name="[3d2]"></a>uffs_PoolGetIndex</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, uffs_pool.o(i.uffs_PoolGetIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = uffs_PoolGetIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_open
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertToEntry
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindNextAllocatedInSmallPool
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BreakFromEntry
</UL>

<P><STRONG><a name="[861]"></a>uffs_PoolInit</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, uffs_pool.o(i.uffs_PoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = uffs_PoolInit &rArr; uffs_SemCreate &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemWait
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemSignal
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitObjectBuf
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DirEntryBufInit
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashInterfaceInit
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInit
</UL>

<P><STRONG><a name="[4b0]"></a>uffs_PoolPut</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uffs_pool.o(i.uffs_PoolPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPageTag
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMarkDirtyPage
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashCheckErasedBlock
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutObject
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutDirEntry
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPage
</UL>

<P><STRONG><a name="[874]"></a>uffs_PoolRelease</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, uffs_pool.o(i.uffs_PoolRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = uffs_PoolRelease &rArr; uffs_SemDelete &rArr; rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashInterfaceRelease
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeRelease
</UL>

<P><STRONG><a name="[88f]"></a>uffs_PoolVerify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uffs_pool.o(i.uffs_PoolVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uffs_PoolVerify
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_write
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_seek
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rewinddir
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_readdir
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_read
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_flush
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_closedir
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_close
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolFindNextAllocated
</UL>

<P><STRONG><a name="[627]"></a>uffs_PutDevice</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uffs_mtb.o(i.uffs_PutDevice))
<BR><BR>[Called By]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObject
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetMatchedMountPointSize
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ParseObject
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_ReleaseObjectResource
</UL>

<P><STRONG><a name="[860]"></a>uffs_PutObject</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uffs_fs.o(i.uffs_PutObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = uffs_PutObject &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolPut
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_stat
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_opendir
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_open
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_mkdir
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_closedir
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_close
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_RenameObject
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
</UL>

<P><STRONG><a name="[88d]"></a>uffs_ReInitObject</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uffs_fs.o(i.uffs_ReInitObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uffs_ReInitObject &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ParseObject
</UL>

<P><STRONG><a name="[891]"></a>uffs_ReadObject</STRONG> (Thumb, 406 bytes, Stack size 80 bytes, uffs_fs.o(i.uffs_ReadObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = uffs_ReadObject &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDataNode
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufRead
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufPut
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartOfDataBlock
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFdnByOfs
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_read
</UL>

<P><STRONG><a name="[6e9]"></a>uffs_RegisterMountTable</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, uffs_mtb.o(i.uffs_RegisterMountTable))
<BR><BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uffs_fs
</UL>

<P><STRONG><a name="[892]"></a>uffs_ReleaseDevice</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, uffs_init.o(i.uffs_ReleaseDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = uffs_ReleaseDevice &rArr; uffs_BufReleaseAll &rArr; uffs_BufFlushAll &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoReleaseCache
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashInterfaceRelease
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeviceReleaseLock
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufReleaseAll
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_UnMount
</UL>

<P><STRONG><a name="[894]"></a>uffs_RenameObject</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, uffs_fs.o(i.uffs_RenameObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264 + Unknown Stack Size
<LI>Call Chain = uffs_RenameObject &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutObject
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObject
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObject
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CloseObject
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ParseObject
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MoveObjectEx
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_ReleaseObjectResource
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rename
</UL>

<P><STRONG><a name="[8a0]"></a>uffs_SeekObject</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, uffs_fs.o(i.uffs_SeekObject))
<BR><BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_seek
</UL>

<P><STRONG><a name="[887]"></a>uffs_SemCreate</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, uffs_rtthread.o(i.uffs_SemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = uffs_SemCreate &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitGlobalFsLock
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolInit
</UL>

<P><STRONG><a name="[890]"></a>uffs_SemDelete</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, uffs_rtthread.o(i.uffs_SemDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = uffs_SemDelete &rArr; rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolRelease
</UL>

<P><STRONG><a name="[880]"></a>uffs_SemSignal</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uffs_rtthread.o(i.uffs_SemSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = uffs_SemSignal &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolInit
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
</UL>

<P><STRONG><a name="[87e]"></a>uffs_SemWait</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uffs_rtthread.o(i.uffs_SemWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = uffs_SemWait &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolInit
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
</UL>

<P><STRONG><a name="[895]"></a>uffs_TreeCompareFileName</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, uffs_tree.o(i.uffs_TreeCompareFileName))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = uffs_TreeCompareFileName &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MakeSum16
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufPut
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CompareFileName
</UL>
<BR>[Called By]<UL><LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindFileNodeByName
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNodeByName
</UL>

<P><STRONG><a name="[89b]"></a>uffs_TreeFindBadNodeByBlock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uffs_tree.o(i.uffs_TreeFindBadNodeByBlock))
<BR><BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindNodeByBlock
</UL>

<P><STRONG><a name="[4f0]"></a>uffs_TreeFindDataNode</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, uffs_tree.o(i.uffs_TreeFindDataNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = uffs_TreeFindDataNode &rArr; uffs_PoolGetBufByIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReadObject
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindFromTree
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteObject
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
</UL>

<P><STRONG><a name="[897]"></a>uffs_TreeFindDataNodeByBlock</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, uffs_tree.o(i.uffs_TreeFindDataNodeByBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = uffs_TreeFindDataNodeByBlock &rArr; uffs_PoolGetBufByIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindNodeByBlock
</UL>

<P><STRONG><a name="[4ee]"></a>uffs_TreeFindDirNode</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uffs_tree.o(i.uffs_TreeFindDirNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = uffs_TreeFindDirNode &rArr; uffs_PoolGetBufByIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindFromTree
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindFreeFsnSerial
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
</UL>

<P><STRONG><a name="[898]"></a>uffs_TreeFindDirNodeByBlock</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, uffs_tree.o(i.uffs_TreeFindDirNodeByBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = uffs_TreeFindDirNodeByBlock &rArr; uffs_PoolGetBufByIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindNodeByBlock
</UL>

<P><STRONG><a name="[857]"></a>uffs_TreeFindDirNodeByName</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, uffs_tree.o(i.uffs_TreeFindDirNodeByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = uffs_TreeFindDirNodeByName &rArr; uffs_TreeCompareFileName &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeCompareFileName
</UL>
<BR>[Called By]<UL><LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ParseObject
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObjectEx
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
</UL>

<P><STRONG><a name="[85d]"></a>uffs_TreeFindDirNodeWithParent</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, uffs_tree.o(i.uffs_TreeFindDirNodeWithParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = uffs_TreeFindDirNodeWithParent &rArr; uffs_PoolGetBufByIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
</UL>

<P><STRONG><a name="[89a]"></a>uffs_TreeFindErasedNodeByBlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uffs_tree.o(i.uffs_TreeFindErasedNodeByBlock))
<BR><BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindNodeByBlock
</UL>

<P><STRONG><a name="[4ef]"></a>uffs_TreeFindFileNode</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uffs_tree.o(i.uffs_TreeFindFileNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = uffs_TreeFindFileNode &rArr; uffs_PoolGetBufByIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindFromTree
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepThree
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindFreeFsnSerial
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
</UL>

<P><STRONG><a name="[899]"></a>uffs_TreeFindFileNodeByBlock</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, uffs_tree.o(i.uffs_TreeFindFileNodeByBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = uffs_TreeFindFileNodeByBlock &rArr; uffs_PoolGetBufByIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindNodeByBlock
</UL>

<P><STRONG><a name="[856]"></a>uffs_TreeFindFileNodeByName</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, uffs_tree.o(i.uffs_TreeFindFileNodeByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = uffs_TreeFindFileNodeByName &rArr; uffs_TreeCompareFileName &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeCompareFileName
</UL>
<BR>[Called By]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObjectEx
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
</UL>

<P><STRONG><a name="[85e]"></a>uffs_TreeFindFileNodeWithParent</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, uffs_tree.o(i.uffs_TreeFindFileNodeWithParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = uffs_TreeFindFileNodeWithParent &rArr; uffs_PoolGetBufByIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
</UL>

<P><STRONG><a name="[83e]"></a>uffs_TreeFindNodeByBlock</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, uffs_tree.o(i.uffs_TreeFindNodeByBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = uffs_TreeFindNodeByBlock &rArr; uffs_TreeFindFileNodeByBlock &rArr; uffs_PoolGetBufByIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindFileNodeByBlock
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindErasedNodeByBlock
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNodeByBlock
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDataNodeByBlock
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindBadNodeByBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
</UL>

<P><STRONG><a name="[866]"></a>uffs_TreeFindSuspendNode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uffs_tree.o(i.uffs_TreeFindSuspendNode))
<BR><BR>[Called By]<UL><LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindFreeFsnSerial
</UL>

<P><STRONG><a name="[4f8]"></a>uffs_TreeGetErasedNode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, uffs_tree.o(i.uffs_TreeGetErasedNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = uffs_TreeGetErasedNode &rArr; uffs_FlashCheckErasedBlock &rArr; uffs_BufFreeClone &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashCheckErasedBlock
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashEraseBlock
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeGetErasedNodeNoCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush_NewBlock
</UL>

<P><STRONG><a name="[885]"></a>uffs_TreeInit</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, uffs_tree.o(i.uffs_TreeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = uffs_TreeInit &rArr; uffs_PoolInit &rArr; uffs_SemCreate &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolInit
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitDevice
</UL>

<P><STRONG><a name="[4ff]"></a>uffs_TreeInsertToBadBlockList</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uffs_tree.o(i.uffs_TreeInsertToBadBlockList))
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockProcess
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepOne
</UL>

<P><STRONG><a name="[4fc]"></a>uffs_TreeInsertToErasedListTail</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, uffs_tree.o(i.uffs_TreeInsertToErasedListTail))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uffs_TreeInsertToErasedListTail &rArr; uffs_TreeInsertToErasedListTailEx
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInsertToErasedListTailEx
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush_NewBlock
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepThree
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
</UL>

<P><STRONG><a name="[503]"></a>uffs_TreeInsertToErasedListTailEx</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uffs_tree.o(i.uffs_TreeInsertToErasedListTailEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uffs_TreeInsertToErasedListTailEx
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInsertToErasedListTail
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepTwo
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepOne
</UL>

<P><STRONG><a name="[893]"></a>uffs_TreeRelease</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uffs_tree.o(i.uffs_TreeRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = uffs_TreeRelease &rArr; uffs_PoolRelease &rArr; uffs_SemDelete &rArr; rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolRelease
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReleaseDevice
</UL>

<P><STRONG><a name="[85f]"></a>uffs_TreeRemoveSuspendNode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uffs_tree.o(i.uffs_TreeRemoveSuspendNode))
<BR><BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
</UL>

<P><STRONG><a name="[83a]"></a>uffs_TreeSuspendAdd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uffs_tree.o(i.uffs_TreeSuspendAdd))
<BR><BR>[Called By]<UL><LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockProcessSuspend
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
</UL>

<P><STRONG><a name="[5f6]"></a>uffs_UnMount</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, uffs_mtb.o(i.uffs_UnMount))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = uffs_UnMount &rArr; uffs_ReleaseDevice &rArr; uffs_BufReleaseAll &rArr; uffs_BufFlushAll &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetMountTableByMountPoint
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReleaseDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_unmount
</UL>

<P><STRONG><a name="[5f7]"></a>uffs_UnRegisterMountTable</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, uffs_mtb.o(i.uffs_UnRegisterMountTable))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_unmount
</UL>

<P><STRONG><a name="[89c]"></a>uffs_WriteObject</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, uffs_fs.o(i.uffs_WriteObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = uffs_WriteObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteObject
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_write
</UL>

<P><STRONG><a name="[5e1]"></a>uffs_close</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, uffs_fd.o(i.uffs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = uffs_close &rArr; uffs_CloseObject &rArr; do_FlushObject &rArr; uffs_BufFlushGroupMatchParent &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutObject
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolVerify
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolCheckFreeList
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObjectPool
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CloseObject
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_close
</UL>

<P><STRONG><a name="[5de]"></a>uffs_closedir</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, uffs_fd.o(i.uffs_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = uffs_closedir &rArr; uffs_CloseObject &rArr; do_FlushObject &rArr; uffs_BufFlushGroupMatchParent &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutObject
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolVerify
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolCheckFreeList
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectClose
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CloseObject
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutDirEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_close
</UL>

<P><STRONG><a name="[876]"></a>uffs_crc16sum</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, uffs_crc.o(i.uffs_crc16sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uffs_crc16sum &rArr; uffs_crc16update
</UL>
<BR>[Calls]<UL><LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_crc16update
</UL>
<BR>[Called By]<UL><LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MakeSum16
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPage
</UL>

<P><STRONG><a name="[89f]"></a>uffs_crc16update</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uffs_crc.o(i.uffs_crc16update))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uffs_crc16update
</UL>
<BR>[Called By]<UL><LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_crc16sum
</UL>

<P><STRONG><a name="[5e2]"></a>uffs_flush</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, uffs_fd.o(i.uffs_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = uffs_flush &rArr; uffs_FlushObject &rArr; do_FlushObject &rArr; uffs_BufFlushGroupMatchParent &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolVerify
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolCheckFreeList
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObjectPool
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlushObject
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_flush
</UL>

<P><STRONG><a name="[5df]"></a>uffs_get_error</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uffs_fd.o(i.uffs_get_error))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_write
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_unlink
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_stat
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_seek
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_rename
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_read
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_open
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_mount
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_mkfs
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_getdents
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_flush
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_close
</UL>

<P><STRONG><a name="[5f3]"></a>uffs_lstat</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uffs_fd.o(i.uffs_lstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + Unknown Stack Size
<LI>Call Chain = uffs_lstat &rArr; uffs_stat &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_unlink
</UL>

<P><STRONG><a name="[5ea]"></a>uffs_mkdir</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, uffs_fd.o(i.uffs_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = uffs_mkdir &rArr; uffs_CreateObject &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutObject
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObject
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObject
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CloseObject
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_open
</UL>

<P><STRONG><a name="[5ec]"></a>uffs_open</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, uffs_fd.o(i.uffs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + Unknown Stack Size
<LI>Call Chain = uffs_open &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutObject
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetIndex
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObject
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObjectPool
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObject
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_open
</UL>

<P><STRONG><a name="[5eb]"></a>uffs_opendir</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, uffs_fd.o(i.uffs_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + Unknown Stack Size
<LI>Call Chain = uffs_opendir &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutObject
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObject
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObject
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectOpen
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CloseObject
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutDirEntry
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDirEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_open
</UL>

<P><STRONG><a name="[5ee]"></a>uffs_read</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, uffs_fd.o(i.uffs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = uffs_read &rArr; uffs_ReadObject &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReadObject
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolVerify
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolCheckFreeList
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObjectPool
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_read
</UL>

<P><STRONG><a name="[5e3]"></a>uffs_readdir</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, uffs_fd.o(i.uffs_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = uffs_readdir &rArr; uffs_FindObjectNext &rArr; uffs_FindObjectFirst &rArr; do_FindObject &rArr; _LoadObjectInfo &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolVerify
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolCheckFreeList
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectNext
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_seekdir
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_getdents
</UL>

<P><STRONG><a name="[5f4]"></a>uffs_remove</STRONG> (Thumb, 90 bytes, Stack size 72 bytes, uffs_fd.o(i.uffs_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368 + Unknown Stack Size
<LI>Call Chain = uffs_remove &rArr; uffs_DeleteObject &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_stat
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_unlink
</UL>

<P><STRONG><a name="[5ef]"></a>uffs_rename</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, uffs_fd.o(i.uffs_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288 + Unknown Stack Size
<LI>Call Chain = uffs_rename &rArr; uffs_RenameObject &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_RenameObject
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_rename
</UL>

<P><STRONG><a name="[5f0]"></a>uffs_rewinddir</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, uffs_fd.o(i.uffs_rewinddir))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = uffs_rewinddir &rArr; uffs_GlobalFsLockUnlock &rArr; uffs_SemSignal &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolVerify
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolCheckFreeList
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectRewind
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_seek
</UL>

<P><STRONG><a name="[5f5]"></a>uffs_rmdir</STRONG> (Thumb, 90 bytes, Stack size 72 bytes, uffs_fd.o(i.uffs_rmdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368 + Unknown Stack Size
<LI>Call Chain = uffs_rmdir &rArr; uffs_DeleteObject &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_stat
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_unlink
</UL>

<P><STRONG><a name="[5ed]"></a>uffs_seek</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, uffs_fd.o(i.uffs_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = uffs_seek &rArr; uffs_GlobalFsLockUnlock &rArr; uffs_SemSignal &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SeekObject
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolVerify
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolCheckFreeList
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObjectPool
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_seek
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_read
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_open
</UL>

<P><STRONG><a name="[5f1]"></a>uffs_seekdir</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dfs_uffs.o(i.uffs_seekdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = uffs_seekdir &rArr; uffs_readdir &rArr; uffs_FindObjectNext &rArr; uffs_FindObjectFirst &rArr; do_FindObject &rArr; _LoadObjectInfo &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_readdir
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_seek
</UL>

<P><STRONG><a name="[64b]"></a>uffs_set_error</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uffs_fd.o(i.uffs_set_error))
<BR><BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_write
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_stat
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_seek
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rmdir
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rewinddir
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rename
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_remove
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_readdir
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_read
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_opendir
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_open
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_mkdir
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_flush
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_closedir
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_close
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stat
</UL>

<P><STRONG><a name="[6e7]"></a>uffs_setup_storage</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, uffs_nandif.o(i.uffs_setup_storage))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uffs_setup_storage &rArr; rt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uffs_fs
</UL>

<P><STRONG><a name="[5e4]"></a>uffs_stat</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, uffs_fd.o(i.uffs_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264 + Unknown Stack Size
<LI>Call Chain = uffs_stat &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutObject
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObject
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObject
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CloseObject
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stat
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rmdir
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_remove
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_lstat
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_stat
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_getdents
</UL>

<P><STRONG><a name="[5f8]"></a>uffs_write</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, uffs_fd.o(i.uffs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = uffs_write &rArr; uffs_WriteObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_WriteObject
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolVerify
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolCheckFreeList
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObjectPool
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_write
</UL>

<P><STRONG><a name="[2dd]"></a>unlink</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dfs_posix.o(i.unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = unlink &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_JsonFile
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_Dir_Clear
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_Record
</UL>

<P><STRONG><a name="[3e8]"></a>userGUITopWindowDisplay</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lkdguiwindow.o(i.userGUITopWindowDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = userGUITopWindowDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDisplayMian
</UL>

<P><STRONG><a name="[2ce]"></a>userGUITopWindowHide</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lkdguiwindow.o(i.userGUITopWindowHide))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = userGUITopWindowHide &rArr; GUIWindowHide &rArr; GuiFillRect &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIWindowHide
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoxinFun
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VersionWinFun
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeModfiyFun
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoeCoDisplay
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultEventFun
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSendWinFun
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaoCeDisplay
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordModfiyWinFun
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWordFun
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageFun
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuControlFun
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyFun
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyDisplay
</UL>

<P><STRONG><a name="[2cf]"></a>userGUITopWindowRedraw</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lkdguiwindow.o(i.userGUITopWindowRedraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = userGUITopWindowRedraw &rArr; GUIWindowDraw &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIWindowDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoxinFun
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VersionWinFun
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeModfiyFun
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoeCoDisplay
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultEventFun
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSendWinFun
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaoCeDisplay
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordModfiyWinFun
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWordFun
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageFun
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuControlFun
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyDisplay
</UL>

<P><STRONG><a name="[2cd]"></a>userGUIWindowAdd</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lkdguiwindow.o(i.userGUIWindowAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = userGUIWindowAdd &rArr; GUIWindowDraw &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIWindowDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemDealWith
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSendWinFun
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDisplayInit
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeWindowFun
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DzhiChangeDealWith
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyDisplay
</UL>

<P><STRONG><a name="[471]"></a>userVariableDisplayInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, uservariable.o(i.userVariableDisplayInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = userVariableDisplayInit &rArr; UserDefineDzhiInit &rArr; Dzhi1DisplayInit &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoeCoInfoInit
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPassword
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoxinDisplayInit
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoceDisplayInit
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VersionInfoInit
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCmdSendInit
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dzhi0DisplayInit
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserDefineDzhiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi101ThreadEntity
</UL>

<P><STRONG><a name="[1cc]"></a>version</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.version))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = version &rArr; rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[e6]"></a>w5500_ReadByte</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_w5500.o(i.w5500_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = w5500_ReadByte &rArr; rt_device_read &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_w5500.o(i.rt_hw_w5500_init)
</UL>
<P><STRONG><a name="[e5]"></a>w5500_WriteByte</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_w5500.o(i.w5500_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = w5500_WriteByte &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_w5500.o(i.rt_hw_w5500_init)
</UL>
<P><STRONG><a name="[8a4]"></a>w5500_close</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, drv_w5500_socket.o(i.w5500_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = w5500_close &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send
</UL>

<P><STRONG><a name="[370]"></a>w5500_send</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, drv_w5500_socket.o(i.w5500_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = w5500_send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_close
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MonitoringDataTransmission
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_SlaveFrame12Response
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_SlaveFrame11Response
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_SlaveFrame01Response
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_AddError
</UL>

<P><STRONG><a name="[368]"></a>w5500_tcpserver_disconnect</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tcp_server.o(i.w5500_tcpserver_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_StopLink
</UL>

<P><STRONG><a name="[360]"></a>w5500_tcpserver_getc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tcp_server.o(i.w5500_tcpserver_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = w5500_tcpserver_getc &rArr; QueueRead
</UL>
<BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueRead
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_ReadData
</UL>

<P><STRONG><a name="[349]"></a>w5500_tcpserver_linkstate</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp_server.o(i.w5500_tcpserver_linkstate))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_CheckLink
</UL>

<P><STRONG><a name="[36b]"></a>w5500_tcpserver_putc</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tcp_server.o(i.w5500_tcpserver_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = w5500_tcpserver_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_WriteData
</UL>

<P><STRONG><a name="[8a5]"></a>wiz_send_data</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, drv_w5500.o(i.wiz_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send
</UL>

<P><STRONG><a name="[5ad]"></a>wizchip_clrinterrupt</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_w5500_conf.o(i.wizchip_clrinterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_clrinterrupt &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[7]"></a>wizchip_cris_enter</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_w5500_conf.o(i.wizchip_cris_enter))
<BR>[Address Reference Count : 2]<UL><LI> drv_w5500_conf.o(.data)
<LI> drv_w5500_conf.o(i.reg_wizchip_cris_cbfunc)
</UL>
<P><STRONG><a name="[8]"></a>wizchip_cris_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_w5500_conf.o(i.wizchip_cris_exit))
<BR>[Address Reference Count : 2]<UL><LI> drv_w5500_conf.o(.data)
<LI> drv_w5500_conf.o(i.reg_wizchip_cris_cbfunc)
</UL>
<P><STRONG><a name="[a]"></a>wizchip_cs_deselect</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_w5500_conf.o(i.wizchip_cs_deselect))
<BR>[Address Reference Count : 2]<UL><LI> drv_w5500_conf.o(.data)
<LI> drv_w5500_conf.o(i.reg_wizchip_cs_cbfunc)
</UL>
<P><STRONG><a name="[9]"></a>wizchip_cs_select</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_w5500_conf.o(i.wizchip_cs_select))
<BR>[Address Reference Count : 2]<UL><LI> drv_w5500_conf.o(.data)
<LI> drv_w5500_conf.o(i.reg_wizchip_cs_cbfunc)
</UL>
<P><STRONG><a name="[5ae]"></a>wizchip_getinterrupt</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drv_w5500_conf.o(i.wizchip_getinterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_getinterrupt &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[5b0]"></a>wizchip_getinterruptmask</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, drv_w5500_conf.o(i.wizchip_getinterruptmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_getinterruptmask &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[5a5]"></a>wizchip_getnetinfo</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, drv_w5500_conf.o(i.wizchip_getnetinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_getnetinfo &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[5a7]"></a>wizchip_getnetmode</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_w5500_conf.o(i.wizchip_getnetmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizchip_getnetmode &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[5a9]"></a>wizchip_gettimeout</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, drv_w5500_conf.o(i.wizchip_gettimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_gettimeout &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[5ac]"></a>wizchip_init</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, drv_w5500_conf.o(i.wizchip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[5af]"></a>wizchip_setinterruptmask</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drv_w5500_conf.o(i.wizchip_setinterruptmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_setinterruptmask &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[5a4]"></a>wizchip_setnetinfo</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, drv_w5500_conf.o(i.wizchip_setnetinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_setnetinfo &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[5a6]"></a>wizchip_setnetmode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, drv_w5500_conf.o(i.wizchip_setnetmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_setnetmode &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[5a8]"></a>wizchip_settimeout</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drv_w5500_conf.o(i.wizchip_settimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizchip_settimeout &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[b]"></a>wizchip_spi_readbyte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_w5500_conf.o(i.wizchip_spi_readbyte))
<BR>[Address Reference Count : 2]<UL><LI> drv_w5500_conf.o(.data)
<LI> drv_w5500_conf.o(i.reg_wizchip_spi_cbfunc)
</UL>
<P><STRONG><a name="[c]"></a>wizchip_spi_writebyte</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_w5500_conf.o(i.wizchip_spi_writebyte))
<BR>[Address Reference Count : 2]<UL><LI> drv_w5500_conf.o(.data)
<LI> drv_w5500_conf.o(i.reg_wizchip_spi_cbfunc)
</UL>
<P><STRONG><a name="[5ab]"></a>wizchip_sw_reset</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, drv_w5500_conf.o(i.wizchip_sw_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wizchip_sw_reset &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[5b5]"></a>wizphy_getphyconf</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, drv_w5500_conf.o(i.wizphy_getphyconf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizphy_getphyconf &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[5b8]"></a>wizphy_getphylink</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_w5500_conf.o(i.wizphy_getphylink))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizphy_getphylink &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[5b7]"></a>wizphy_getphypmode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_w5500_conf.o(i.wizphy_getphypmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizphy_getphypmode &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[5b3]"></a>wizphy_reset</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, drv_w5500_conf.o(i.wizphy_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizphy_reset &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphyconf
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[5b4]"></a>wizphy_setphyconf</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, drv_w5500_conf.o(i.wizphy_setphyconf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wizphy_setphyconf &rArr; wizphy_reset &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[5b6]"></a>wizphy_setphypmode</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, drv_w5500_conf.o(i.wizphy_setphypmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wizphy_setphypmode &rArr; wizphy_reset &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[29d]"></a>write</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dfs_posix.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = write &rArr; fd_get &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_write
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_JsonFile
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_Comtrade
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_WriteFileAct
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_SOE
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_Record
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_FEVENT
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDoc_CO
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_SOE
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_FEVNET
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_CO
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_test
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_stdio_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Struct_To_Json
</UL>

<P><STRONG><a name="[4e8]"></a>yaoCeDisplay</STRONG> (Thumb, 814 bytes, Stack size 40 bytes, guidisplay.o(i.yaoCeDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = yaoCeDisplay &rArr; GuiMenuRedrawMenu &rArr; DrawAllMenu &rArr; DrawNodes &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentTick
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntervalTick
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUITopWindowRedraw
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUITopWindowHide
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawList
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuRedrawMenu
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiVScroll
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiUpdateDisplayAll
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoceWinFun
</UL>

<P><STRONG><a name="[86]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[208]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[20a]"></a>_get_lc_time</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_time_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_time
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_time_2
</UL>

<P><STRONG><a name="[530]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[90f]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[910]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[911]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[912]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[913]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[2aa]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f_clz.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateData
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateAngleU_I
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufDiv
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyFun
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[8a8]"></a>_d2f</STRONG> (Thumb, 700 bytes, Stack size 32 bytes, d2f_clz.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trapveneer
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__funder
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2b3]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateData
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[8ae]"></a>_dadd</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsub_zerodenorm
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daddsub_denorm
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[8b2]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = __fpl_dcheck_NaN1 &rArr; __fpl_exception &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[8b9]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[2b2]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv_clz.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateData
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[8b4]"></a>_ddiv</STRONG> (Thumb, 748 bytes, Stack size 32 bytes, ddiv_clz.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dunder
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_drenorm2
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[538]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[8b8]"></a>_dcmpeq</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[53c]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[8ba]"></a>_dfix</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2ae]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateData
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterCfg_StructToJson
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedValueCfg1_StructToJson
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[914]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[8c7]"></a>__dflt_normalise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltn), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[2bc]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelesignalCfg_StructToJson
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelemetryCfg_StructToJson
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelecontrolCfg_StructToJson
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InherentParaCfg_StructToJson
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateFactorCfg_StructToJson
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[915]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[2b7]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateData
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[8bb]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[8bf]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[2b0]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul_clz.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateData
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[8bc]"></a>_dmul</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, dmul_clz.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dunder
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_drenorm2
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[8ab]"></a>__fpl_dnaninf</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = __fpl_dnaninf &rArr; __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dunder_d
</UL>
<BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[8b6]"></a>__fpl_drenorm2</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, drenorm_clz.o(x$fpl$drenorm), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[8c3]"></a>__fpl_drenorm1</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, drenorm_clz.o(x$fpl$drenorm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __fpl_drenorm1
</UL>
<BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dunder_d
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[8b7]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[536]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closing_loop_clock
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[8be]"></a>_drcmple</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[52f]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[8c0]"></a>_drsb</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsub_uncommon_first
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[53b]"></a>_dsqrt</STRONG> (Thumb, 520 bytes, Stack size 24 bytes, dsqrt_umaalclz.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf &rArr; __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_drenorm1
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[52d]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[8c4]"></a>_dsub</STRONG> (Thumb, 664 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dunder_d
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dunder
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dadd_zerodenorm
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[8b5]"></a>__dunder</STRONG> (Thumb, 314 bytes, Stack size 4 bytes, dunder_clz.o(x$fpl$dunder))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = __dunder &rArr; __fpl_exception &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[8bd]"></a>__dunder_d</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, dunder_clz.o(x$fpl$dunder))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trapveneer
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_drenorm1
</UL>
<BR>[Called By]<UL><LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[8a9]"></a>__fpl_exception</STRONG> (Thumb, 454 bytes, Stack size 16 bytes, except.o(x$fpl$exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = __fpl_exception &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trapveneer
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__funder
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dunder
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[2a2]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDoc_FEVNET
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateData
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateAngleU_I
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closing_loop_clock
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigurationDataToString
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogChannelDataToString
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultEventFun
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaoCeDisplay
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyInit
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyDisplay
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterCfg_StructToJson
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedValueCfg1_StructToJson
</UL>

<P><STRONG><a name="[8c6]"></a>_f2d</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dflt_normalise
</UL>

<P><STRONG><a name="[8c8]"></a>__fpl_fnaninf</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__funder_d
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[203]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[916]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[917]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[8aa]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[8ad]"></a>__funder</STRONG> (Thumb, 254 bytes, Stack size 0 bytes, funder_clz.o(x$fpl$funder), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[8c9]"></a>__funder_d</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, funder_clz.o(x$fpl$funder), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trapveneer
</UL>
<BR>[Called By]<UL><LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[244]"></a>__ieee_status</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>

<P><STRONG><a name="[1e5]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[1e9]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[8b3]"></a>__fpl_return_NaN</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[539]"></a>__ARM_scalbn</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, scalbn_clz.o(x$fpl$scalbn))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = __ARM_scalbn &rArr; __dunder &rArr; __fpl_exception &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dunder
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[253]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __ARM_scalbn &rArr; __dunder &rArr; __fpl_exception &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[277]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __ARM_scalbn &rArr; __dunder &rArr; __fpl_exception &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[276]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[8ac]"></a>_fp_trapveneer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trap
</UL>
<BR>[Called By]<UL><LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__funder_d
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dunder_d
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[8ca]"></a>__fpl_cmpreturn</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[586]"></a>cal_thread_start</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, multi_thread.o(i.cal_thread_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = cal_thread_start &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_thread_start
</UL>

<P><STRONG><a name="[650]"></a>dp83848_2404_thread_start</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, multi_thread.o(i.dp83848_2404_thread_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = dp83848_2404_thread_start &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_thread_start
</UL>

<P><STRONG><a name="[6c6]"></a>ftuidle_thread_start</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, multi_thread.o(i.ftuidle_thread_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ftuidle_thread_start &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_thread_start
</UL>

<P><STRONG><a name="[752]"></a>protect_thread_start</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, multi_thread.o(i.protect_thread_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = protect_thread_start &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_thread_start
</UL>

<P><STRONG><a name="[a0]"></a>rt_cal_thread_entry</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, multi_thread.o(i.rt_cal_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = rt_cal_thread_entry &rArr; CalcultateTask &rArr; CalculateData &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf &rArr; __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcultateTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_thread.o(i.cal_thread_start)
</UL>
<P><STRONG><a name="[b1]"></a>rt_ftuidle_thread_entry</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, multi_thread.o(i.rt_ftuidle_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = rt_ftuidle_thread_entry &rArr; file_operate &rArr; start_Comtrade &rArr; file_Dir_Clear &rArr; Scan_Files &rArr;  Scan_Files (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_fram_update_state_write
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate_Init
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_operate
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteUlog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_thread.o(i.ftuidle_thread_start)
</UL>
<P><STRONG><a name="[c5]"></a>rt_protect_thread_entry</STRONG> (Thumb, 386 bytes, Stack size 0 bytes, multi_thread.o(i.rt_protect_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = rt_protect_thread_entry &rArr; MainProtectCtrlInit &rArr; addtimers &rArr; list_ins_next &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterCheck
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlInit
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DzhiChangeCallBack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_thread.o(i.protect_thread_start)
</UL>
<P><STRONG><a name="[100]"></a>rt_slave101_thread_entry</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, multi_thread.o(i.rt_slave101_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 796 + Unknown Stack Size
<LI>Call Chain = rt_slave101_thread_entry &rArr; DLT634_5101_SlaveTask &rArr; DLT634_5101_SLAVE_Clock &rArr; DLT634_5101_SLAVE_ReadMISIData &rArr; DLT634_5101_SLAVE_SearchValidFrame &rArr; DLT634_5101_SLAVE_DecodeFrame68 &rArr; DLT634_5101_SLAVE_AppProcess &rArr; DLT634_5101_SLAVE_C_SR &rArr; DBWriteValue &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SlaveTask
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_INIT
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SlaveTask
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_INIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_thread.o(i.slave101_thread_start)
</UL>
<P><STRONG><a name="[101]"></a>rt_slave104_thread_entry</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, multi_thread.o(i.rt_slave104_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1076 + Unknown Stack Size
<LI>Call Chain = rt_slave104_thread_entry &rArr; DLT634_5104_SlaveTask &rArr; DLT634_5104_SLAVE_Clock &rArr; DLT634_5104_SLAVE_ReadMISIData &rArr; DLT634_5104_SLAVE_SearchValidFrame &rArr; DLT634_5104_SLAVE_DecodeIFrame &rArr; DLT634_5104_SLAVE_StopDTOper &rArr; DLT634_5104_SLAVE_AppProcess &rArr; DLT634_5104_SLAVE_FixedParaProcess &rArr; DBWriteValue &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SlaveTask
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_ParaInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_thread.o(i.slave104_thread_start)
</UL>
<P><STRONG><a name="[10a]"></a>rt_watch_thread_entry</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, multi_thread.o(i.rt_watch_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = rt_watch_thread_entry &rArr; rt_channel_monitor_task &rArr; rt_channel_monitor_clock &rArr; DLT634_ChannelToMonitor_SLAVE_SlaveFrame01Response &rArr; DLT634_5101_SLAVE_WriteData &rArr; MonitoringDataTransmission &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_led_task
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_channel_monitor_task
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;other_protect_init
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;other_protect_clock
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrequency
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_NVA_Check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_thread.o(i.watch_thread_start)
</UL>
<P><STRONG><a name="[7b8]"></a>slave101_thread_start</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, multi_thread.o(i.slave101_thread_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = slave101_thread_start &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_thread_start
</UL>

<P><STRONG><a name="[7b9]"></a>slave104_thread_start</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, multi_thread.o(i.slave104_thread_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = slave104_thread_start &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_thread_start
</UL>

<P><STRONG><a name="[7b7]"></a>w5500_2404_thread_start</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, multi_thread.o(i.w5500_2404_thread_start))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_thread_start
</UL>

<P><STRONG><a name="[7b6]"></a>watch_thread_start</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, multi_thread.o(i.watch_thread_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = watch_thread_start &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_thread_start
</UL>

<P><STRONG><a name="[2e3]"></a>DBClear</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, common_data.o(i.DBClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DBClear &rArr; rt_device_control
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteCO
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_telecontrl_operate
</UL>

<P><STRONG><a name="[2e8]"></a>DBRevert</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, common_data.o(i.DBRevert))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DBRevert &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_alarm_led_operate
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlReset
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteSOE
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteCO
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_telecontrl_operate
</UL>

<P><STRONG><a name="[760]"></a>NVIC_SystemReset</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, common_data.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_common_data_save_value_default_to_fram
</UL>

<P><STRONG><a name="[4ad]"></a>__ARM_isinff</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, common_data.o(i.__ARM_isinff))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterCheck
</UL>

<P><STRONG><a name="[4ac]"></a>__ARM_isnanf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, common_data.o(i.__ARM_isnanf))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterCheck
</UL>

<P><STRONG><a name="[75f]"></a>rt_common_data_save_value_default_to_fram</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, common_data.o(i.rt_common_data_save_value_default_to_fram))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = rt_common_data_save_value_default_to_fram &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_wdg_deal_task
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_save_value_to_fram
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_configure_default
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_read_config_from_fram
</UL>

<P><STRONG><a name="[48d]"></a>OverTelemetryDown_ctrl</STRONG> (Thumb, 668 bytes, Stack size 16 bytes, main_protect_ctrl.o(i.OverTelemetryDown_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OverTelemetryDown_ctrl &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[48c]"></a>OverTelemetryUp_ctrl</STRONG> (Thumb, 510 bytes, Stack size 16 bytes, main_protect_ctrl.o(i.OverTelemetryUp_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OverTelemetryUp_ctrl &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[48e]"></a>SingleLossClose_ctrl</STRONG> (Thumb, 404 bytes, Stack size 16 bytes, main_protect_ctrl.o(i.SingleLossClose_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SingleLossClose_ctrl &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[4a3]"></a>SingleLossClose_rest</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main_protect_ctrl.o(i.SingleLossClose_rest))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SingleLossClose_rest &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[495]"></a>addSOE</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, main_protect_ctrl.o(i.addSOE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_judge_rest
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_judge
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondaryRecloseLock_rest
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondaryRecloseLock_ctrl
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reclose_rest
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reclose_ctrl
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recloseI0_rest
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recloseI0_ctrl
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;overcur_rest
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;overcur_ctrl
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;overcurI0_rest
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;overcurI0_ctrl
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openCloseLocking_rest
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openCloseLocking_ctrl
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lossTrip_rest
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lossTrip_ctrl
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iACC_rest
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iACC_ctrl
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVolClose_rest
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVolClose_ctrl
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fewVolLock_rest
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fewVolLock_ctrl
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubleVol_rest
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubleVol_ctrl
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleLossClose_rest
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleLossClose_ctrl
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OverTelemetryUp_ctrl
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OverTelemetryDown_ctrl
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlInit
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[485]"></a>add_timers</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main_protect_ctrl.o(i.add_timers))
<BR><BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[4a6]"></a>addtimers</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main_protect_ctrl.o(i.addtimers))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = addtimers &rArr; list_ins_next &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_ins_next
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlInit
</UL>

<P><STRONG><a name="[492]"></a>doubleVol_ctrl</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, main_protect_ctrl.o(i.doubleVol_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = doubleVol_ctrl &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[4a2]"></a>doubleVol_rest</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, main_protect_ctrl.o(i.doubleVol_rest))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = doubleVol_rest &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[491]"></a>fewVolLock_ctrl</STRONG> (Thumb, 958 bytes, Stack size 16 bytes, main_protect_ctrl.o(i.fewVolLock_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fewVolLock_ctrl &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[4a1]"></a>fewVolLock_rest</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, main_protect_ctrl.o(i.fewVolLock_rest))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fewVolLock_rest &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[493]"></a>getVolClose_ctrl</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, main_protect_ctrl.o(i.getVolClose_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getVolClose_ctrl &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[49f]"></a>getVolClose_rest</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main_protect_ctrl.o(i.getVolClose_rest))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getVolClose_rest &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[494]"></a>iACC_ctrl</STRONG> (Thumb, 1296 bytes, Stack size 16 bytes, main_protect_ctrl.o(i.iACC_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iACC_ctrl &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[497]"></a>iACC_rest</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, main_protect_ctrl.o(i.iACC_rest))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iACC_rest &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[490]"></a>lossTrip_ctrl</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, main_protect_ctrl.o(i.lossTrip_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lossTrip_ctrl &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[49e]"></a>lossTrip_rest</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main_protect_ctrl.o(i.lossTrip_rest))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lossTrip_rest &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[48f]"></a>openCloseLocking_ctrl</STRONG> (Thumb, 874 bytes, Stack size 16 bytes, main_protect_ctrl.o(i.openCloseLocking_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = openCloseLocking_ctrl &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[4a0]"></a>openCloseLocking_rest</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, main_protect_ctrl.o(i.openCloseLocking_rest))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = openCloseLocking_rest &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[488]"></a>overcurI0_ctrl</STRONG> (Thumb, 702 bytes, Stack size 24 bytes, main_protect_ctrl.o(i.overcurI0_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = overcurI0_ctrl &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[499]"></a>overcurI0_rest</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, main_protect_ctrl.o(i.overcurI0_rest))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = overcurI0_rest &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[487]"></a>overcur_ctrl</STRONG> (Thumb, 1024 bytes, Stack size 24 bytes, main_protect_ctrl.o(i.overcur_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = overcur_ctrl &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[498]"></a>overcur_rest</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, main_protect_ctrl.o(i.overcur_rest))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = overcur_rest &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[48b]"></a>recloseI0_ctrl</STRONG> (Thumb, 562 bytes, Stack size 16 bytes, main_protect_ctrl.o(i.recloseI0_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = recloseI0_ctrl &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[49c]"></a>recloseI0_rest</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, main_protect_ctrl.o(i.recloseI0_rest))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = recloseI0_rest &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[48a]"></a>reclose_ctrl</STRONG> (Thumb, 606 bytes, Stack size 16 bytes, main_protect_ctrl.o(i.reclose_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = reclose_ctrl &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[49b]"></a>reclose_rest</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, main_protect_ctrl.o(i.reclose_rest))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = reclose_rest &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[496]"></a>rest_ctrl</STRONG> (Thumb, 958 bytes, Stack size 24 bytes, main_protect_ctrl.o(i.rest_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rest_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[489]"></a>secondaryRecloseLock_ctrl</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, main_protect_ctrl.o(i.secondaryRecloseLock_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = secondaryRecloseLock_ctrl &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[49a]"></a>secondaryRecloseLock_rest</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, main_protect_ctrl.o(i.secondaryRecloseLock_rest))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = secondaryRecloseLock_rest &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[486]"></a>state_judge</STRONG> (Thumb, 2326 bytes, Stack size 24 bytes, main_protect_ctrl.o(i.state_judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = state_judge &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[49d]"></a>state_judge_rest</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, main_protect_ctrl.o(i.state_judge_rest))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = state_judge_rest &rArr; addSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProtectCtrlClock
</UL>

<P><STRONG><a name="[2a6]"></a>ApplyForCounter</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, other_protect.o(i.ApplyForCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ApplyForCounter &rArr; list_ins_next &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_ins_next
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;other_protect_init
</UL>

<P><STRONG><a name="[2d1]"></a>ComunicatLock</STRONG> (Thumb, 302 bytes, Stack size 8 bytes, other_protect.o(i.ComunicatLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ComunicatLock &rArr; rt_multi_common_data_powerdown_storage &rArr; rt_multi_common_data_fram_record_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_powerdown_storage
</UL>
<BR>[Called By]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;other_protect_clock
</UL>

<P><STRONG><a name="[4c7]"></a>RecoedMemory</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, other_protect.o(i.RecoedMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RecoedMemory &rArr; rt_multi_common_data_powerdown_storage &rArr; rt_multi_common_data_fram_record_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_powerdown_storage
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;other_protect_clock
</UL>

<P><STRONG><a name="[731]"></a>SystemCounterTask</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, other_protect.o(i.SystemCounterTask))
<BR><BR>[Called By]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;other_protect_clock
</UL>

<P><STRONG><a name="[4e0]"></a>TelemetryAbnormalCheck</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, other_protect.o(i.TelemetryAbnormalCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TelemetryAbnormalCheck &rArr; TelemetryOverLimit &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelemetryOverLimit
</UL>
<BR>[Called By]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;other_protect_clock
</UL>

<P><STRONG><a name="[4e1]"></a>TelemetryOverLimit</STRONG> (Thumb, 484 bytes, Stack size 8 bytes, other_protect.o(i.TelemetryOverLimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TelemetryOverLimit &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelemetryAbnormalCheck
</UL>

<P><STRONG><a name="[2a9]"></a>BufDiv</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, calculator.o(i.BufDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BufDiv &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateData
</UL>

<P><STRONG><a name="[2b1]"></a>CalcAverage</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, calculator.o(i.CalcAverage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CalcAverage
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateData
</UL>

<P><STRONG><a name="[2ab]"></a>CalculateAngleU_I</STRONG> (Thumb, 624 bytes, Stack size 64 bytes, calculator.o(i.CalculateAngleU_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CalculateAngleU_I &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateData
</UL>

<P><STRONG><a name="[2ad]"></a>CalculateData</STRONG> (Thumb, 15156 bytes, Stack size 56 bytes, calculator.o(i.CalculateData))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = CalculateData &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf &rArr; __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_radix2_f32
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateAngleU_I
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAverage
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufDiv
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcultateTask
</UL>

<P><STRONG><a name="[115]"></a>GPIOA_CLK_ENABLE</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drv_gpio.o(i.GPIOA_CLK_ENABLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOA_CLK_ENABLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>GPIOB_CLK_ENABLE</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drv_gpio.o(i.GPIOB_CLK_ENABLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOB_CLK_ENABLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>GPIOC_CLK_ENABLE</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drv_gpio.o(i.GPIOC_CLK_ENABLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOC_CLK_ENABLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>GPIOD_CLK_ENABLE</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drv_gpio.o(i.GPIOD_CLK_ENABLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOD_CLK_ENABLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>GPIOE_CLK_ENABLE</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drv_gpio.o(i.GPIOE_CLK_ENABLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOE_CLK_ENABLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>GPIOF_CLK_ENABLE</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drv_gpio.o(i.GPIOF_CLK_ENABLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOF_CLK_ENABLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>GPIOG_CLK_ENABLE</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drv_gpio.o(i.GPIOG_CLK_ENABLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOG_CLK_ENABLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>GPIOH_CLK_ENABLE</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drv_gpio.o(i.GPIOH_CLK_ENABLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOH_CLK_ENABLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>GPIOI_CLK_ENABLE</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drv_gpio.o(i.GPIOI_CLK_ENABLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOI_CLK_ENABLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>_pin_attach_irq</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, drv_gpio.o(i._pin_attach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _pin_attach_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>_pin_dettach_irq</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, drv_gpio.o(i._pin_dettach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _pin_dettach_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>_pin_irq_enable</STRONG> (Thumb, 258 bytes, Stack size 64 bytes, drv_gpio.o(i._pin_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _pin_irq_enable &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>_pin_mode</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, drv_gpio.o(i._pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _pin_mode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>_pin_read</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, drv_gpio.o(i._pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _pin_read
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>_pin_write</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, drv_gpio.o(i._pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[418]"></a>bit2bitno</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_gpio.o(i.bit2bitno))
<BR><BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_irq_enable
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_dettach_irq
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_attach_irq
</UL>

<P><STRONG><a name="[553]"></a>get_pin</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drv_gpio.o(i.get_pin))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_write
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_read
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_mode
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_irq_enable
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_dettach_irq
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_attach_irq
</UL>

<P><STRONG><a name="[11a]"></a>_usart_configure</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, drv_usart.o(i._usart_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _usart_configure &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>_usart_control</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, drv_usart.o(i._usart_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _usart_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>_usart_getc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drv_usart.o(i._usart_getc))
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>_usart_putc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drv_usart.o(i._usart_putc))
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[4e3]"></a>uart_isr</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, drv_usart.o(i.uart_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = uart_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[4ca]"></a>SDRAM_Initialization_Sequence</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, drv_sdram.o(i.SDRAM_Initialization_Sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SDRAM_Initialization_Sequence &rArr; HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdram_init
</UL>

<P><STRONG><a name="[3da]"></a>GPIO_Configuration</STRONG> (Thumb, 450 bytes, Stack size 32 bytes, drv_eth.o(i.GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GPIO_Configuration &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_pin_reset
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
</UL>

<P><STRONG><a name="[40c]"></a>NVIC_Configuration</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_eth.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NVIC_Configuration &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
</UL>

<P><STRONG><a name="[73b]"></a>delay_ms</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_eth.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_pin_reset
</UL>

<P><STRONG><a name="[3db]"></a>phy_pin_reset</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, drv_eth.o(i.phy_pin_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = phy_pin_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[cc]"></a>rt_stm32_eth_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_eth.o(i.rt_stm32_eth_close))
<BR>[Address Reference Count : 1]<UL><LI> drv_eth.o(i.rt_hw_eth_init)
</UL>
<P><STRONG><a name="[cf]"></a>rt_stm32_eth_control</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drv_eth.o(i.rt_stm32_eth_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_stm32_eth_control &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_eth.o(i.rt_hw_eth_init)
</UL>
<P><STRONG><a name="[ca]"></a>rt_stm32_eth_init</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, drv_eth.o(i.rt_stm32_eth_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = rt_stm32_eth_init &rArr; HAL_ETH_Init &rArr; ETH_MACDMAConfig &rArr; ETH_MACAddressConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_pin_reset
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_DeInit
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_DMATxDescListInit
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_DMARxDescListInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_eth.o(i.rt_hw_eth_init)
</UL>
<P><STRONG><a name="[cb]"></a>rt_stm32_eth_open</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_eth.o(i.rt_stm32_eth_open))
<BR>[Address Reference Count : 1]<UL><LI> drv_eth.o(i.rt_hw_eth_init)
</UL>
<P><STRONG><a name="[cd]"></a>rt_stm32_eth_read</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, drv_eth.o(i.rt_stm32_eth_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_stm32_eth_read &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_eth.o(i.rt_hw_eth_init)
</UL>
<P><STRONG><a name="[ce]"></a>rt_stm32_eth_write</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, drv_eth.o(i.rt_stm32_eth_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_stm32_eth_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_eth.o(i.rt_hw_eth_init)
</UL>
<P><STRONG><a name="[121]"></a>_iic_get_scl</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_iic.o(i._iic_get_scl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _iic_get_scl
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_iic.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>_iic_get_sda</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_iic.o(i._iic_get_sda))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _iic_get_sda
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_iic.o(.constdata)
</UL>
<P><STRONG><a name="[541]"></a>_iic_gpio_init</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, drv_iic.o(i._iic_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _iic_gpio_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_iic_init
</UL>

<P><STRONG><a name="[11f]"></a>_iic_set_scl</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, drv_iic.o(i._iic_set_scl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _iic_set_scl
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_iic.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>_iic_set_sda</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, drv_iic.o(i._iic_set_sda))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _iic_set_sda
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_iic.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>_iic_udelay</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drv_iic.o(i._iic_udelay))
<BR>[Address Reference Count : 1]<UL><LI> drv_iic.o(.constdata)
</UL>
<P><STRONG><a name="[5]"></a>configure</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, drv_spi.o(i.configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = configure &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>xfer</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, drv_spi.o(i.xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.data)
</UL>
<P><STRONG><a name="[1a5]"></a>rt_hw_spi4_init</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, drv_spi_flash.o(i.rt_hw_spi4_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = rt_hw_spi4_init &rArr; stm32_spi_bus_register &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_bus_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi_flash.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[1ab]"></a>rt_hw_spi_flash_with_sfud_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_spi_flash.o(i.rt_hw_spi_flash_with_sfud_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = rt_hw_spi_flash_with_sfud_init &rArr; rt_sfud_flash_probe &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi_flash.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[785]"></a>rt_hw_fm25vxx_clear_record</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, drv_fm25vxx.o(i.rt_hw_fm25vxx_clear_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_hw_fm25vxx_clear_record &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_control
</UL>

<P><STRONG><a name="[786]"></a>rt_hw_fm25vxx_cmd</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_fm25vxx.o(i.rt_hw_fm25vxx_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rt_hw_fm25vxx_cmd &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fram_sleep
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fram_read_register
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_write
</UL>

<P><STRONG><a name="[d4]"></a>rt_hw_fm25vxx_control</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, drv_fm25vxx.o(i.rt_hw_fm25vxx_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rt_hw_fm25vxx_control &rArr; rt_hw_fram_read_id &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fram_sleep
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fram_read_register
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_test
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_monitor
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fram_read_id
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_clear_record
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_fm25vxx.o(i.rt_hw_fm25vxx_init)
</UL>
<P><STRONG><a name="[d2]"></a>rt_hw_fm25vxx_read</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, drv_fm25vxx.o(i.rt_hw_fm25vxx_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rt_hw_fm25vxx_read &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_fm25vxx.o(i.rt_hw_fm25vxx_init)
</UL>
<P><STRONG><a name="[d3]"></a>rt_hw_fm25vxx_write</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, drv_fm25vxx.o(i.rt_hw_fm25vxx_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = rt_hw_fm25vxx_write &rArr; rt_hw_fm25vxx_cmd &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_fm25vxx.o(i.rt_hw_fm25vxx_init)
</UL>
<P><STRONG><a name="[78c]"></a>rt_hw_fram_first_clear</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drv_fm25vxx.o(i.rt_hw_fram_first_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_hw_fram_first_clear &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_init
</UL>

<P><STRONG><a name="[789]"></a>rt_hw_fram_read_id</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, drv_fm25vxx.o(i.rt_hw_fram_read_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rt_hw_fram_read_id &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_fm25vxx_control
</UL>

<P><STRONG><a name="[198]"></a>rt_hw_spi5_init</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, drv_fm25vxx.o(i.rt_hw_spi5_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = rt_hw_spi5_init &rArr; stm32_spi_bus_register &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_bus_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_fm25vxx.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[e7]"></a>rt_hw_w5500_read</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, drv_w5500.o(i.rt_hw_w5500_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rt_hw_w5500_read &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_w5500.o(i.rt_hw_w5500_spi_init)
</UL>
<P><STRONG><a name="[e8]"></a>rt_hw_w5500_write</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, drv_w5500.o(i.rt_hw_w5500_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rt_hw_w5500_write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_w5500.o(i.rt_hw_w5500_spi_init)
</UL>
<P><STRONG><a name="[7a3]"></a>w5500_config</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, drv_w5500.o(i.w5500_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = w5500_config &rArr; ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_w5500_init
</UL>

<P><STRONG><a name="[e3]"></a>w5500_cs_deselect</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_w5500.o(i.w5500_cs_deselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = w5500_cs_deselect &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_w5500.o(i.rt_hw_w5500_init)
</UL>
<P><STRONG><a name="[e4]"></a>w5500_cs_select</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_w5500.o(i.w5500_cs_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = w5500_cs_select &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_w5500.o(i.rt_hw_w5500_init)
</UL>
<P><STRONG><a name="[7a2]"></a>w5500_reset</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, drv_w5500.o(i.w5500_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = w5500_reset &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_w5500_init
</UL>

<P><STRONG><a name="[782]"></a>rt_hw_double_point_check</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, drv_di.o(i.rt_hw_double_point_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_hw_double_point_check &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_di_check_task
</UL>

<P><STRONG><a name="[780]"></a>rt_hw_close_operate</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, drv_do.o(i.rt_hw_close_operate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_hw_close_operate &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_do_operate
</UL>

<P><STRONG><a name="[781]"></a>rt_hw_close_recovery</STRONG> (Thumb, 342 bytes, Stack size 8 bytes, drv_do.o(i.rt_hw_close_recovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_hw_close_recovery &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_do_operate
</UL>

<P><STRONG><a name="[1a7]"></a>rt_hw_do_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_do.o(i.rt_hw_do_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_hw_do_init &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_do.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[783]"></a>rt_hw_open_operate</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, drv_do.o(i.rt_hw_open_operate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_hw_open_operate &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_do_operate
</UL>

<P><STRONG><a name="[784]"></a>rt_hw_open_recovery</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, drv_do.o(i.rt_hw_open_recovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_hw_open_recovery &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWriteSOE
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_do_operate
</UL>

<P><STRONG><a name="[28d]"></a>AD7616_FSMC_Init</STRONG> (Thumb, 288 bytes, Stack size 56 bytes, drv_ad7616.o(i.AD7616_FSMC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AD7616_FSMC_Init &rArr; HAL_SRAM_Init &rArr; FMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_adc_init
</UL>

<P><STRONG><a name="[290]"></a>AD7616_GPIO_Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, drv_ad7616.o(i.AD7616_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = AD7616_GPIO_Init &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7616_delay_ns
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_adc_init
</UL>

<P><STRONG><a name="[293]"></a>AD7616_delay_ns</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_ad7616.o(i.AD7616_delay_ns))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7616_GPIO_Init
</UL>

<P><STRONG><a name="[755]"></a>read_ad7616_data</STRONG> (Thumb, 1722 bytes, Stack size 8 bytes, drv_ad7616.o(i.read_ad7616_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = read_ad7616_data &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueRecordToSDRAM
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueueRecord
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_ad7616_irq_service
</UL>

<P><STRONG><a name="[8b]"></a>rt_hw_ad7616_irq_service</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_ad7616.o(i.rt_hw_ad7616_irq_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_hw_ad7616_irq_service &rArr; read_ad7616_data &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ad7616_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ad7616.o(i.AD7616_GPIO_Init)
</UL>
<P><STRONG><a name="[3f2]"></a>GetRTCTimeStamp</STRONG> (Thumb, 80 bytes, Stack size 72 bytes, drv_rtc.o(i.GetRTCTimeStamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GetRTCTimeStamp &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtc_control
</UL>

<P><STRONG><a name="[4b6]"></a>SetRTCTimeStamp</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, drv_rtc.o(i.SetRTCTimeStamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SetRTCTimeStamp &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtc_control
</UL>

<P><STRONG><a name="[da]"></a>_rtc_control</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, drv_rtc.o(i._rtc_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _rtc_control &rArr; GetRTCTimeStamp &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTCTimeStamp
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRTCTimeStamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtc.o(i.rt_hw_rtc_register)
</UL>
<P><STRONG><a name="[d8]"></a>_rtc_open</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_rtc.o(i._rtc_open))
<BR>[Address Reference Count : 1]<UL><LI> drv_rtc.o(i.rt_hw_rtc_register)
</UL>
<P><STRONG><a name="[d9]"></a>_rtc_read</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_rtc.o(i._rtc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rtc_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtc.o(i.rt_hw_rtc_register)
</UL>
<P><STRONG><a name="[790]"></a>rt_hw_iwdg_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drv_wdg.o(i.rt_hw_iwdg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_hw_iwdg_init &rArr; HAL_IWDG_Init &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Start
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_wdg_deal_init
</UL>

<P><STRONG><a name="[1ba]"></a>rt_hw_pcf8563_calender_test</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, drv_pcf8563.o(i.rt_hw_pcf8563_calender_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rt_hw_pcf8563_calender_test &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pcf8563_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pcf8563.o(FSymTab)
</UL>
<P><STRONG><a name="[793]"></a>rt_hw_pcf8563_config</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, drv_pcf8563.o(i.rt_hw_pcf8563_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = rt_hw_pcf8563_config &rArr; rt_i2c_master_send &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pcf8563_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pcf8563_control
</UL>

<P><STRONG><a name="[d7]"></a>rt_hw_pcf8563_control</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drv_pcf8563.o(i.rt_hw_pcf8563_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = rt_hw_pcf8563_control &rArr; rt_hw_pcf8563_calender_test &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pcf8563_config
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pcf8563_calender_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pcf8563.o(i.rt_hw_pcf8563_init)
</UL>
<P><STRONG><a name="[d5]"></a>rt_hw_pcf8563_read</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, drv_pcf8563.o(i.rt_hw_pcf8563_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = rt_hw_pcf8563_read &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDToDecimal
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pcf8563.o(i.rt_hw_pcf8563_init)
</UL>
<P><STRONG><a name="[d6]"></a>rt_hw_pcf8563_write</STRONG> (Thumb, 176 bytes, Stack size 88 bytes, drv_pcf8563.o(i.rt_hw_pcf8563_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = rt_hw_pcf8563_write &rArr; rt_i2c_master_send &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalToBCD
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_send
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pcf8563.o(i.rt_hw_pcf8563_init)
</UL>
<P><STRONG><a name="[41f]"></a>NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[420]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[410]"></a>ETH_DMAReceptionEnable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_eth.o(i.ETH_DMAReceptionEnable))
<BR><BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start
</UL>

<P><STRONG><a name="[40f]"></a>ETH_DMATransmissionEnable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_eth.o(i.ETH_DMATransmissionEnable))
<BR><BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start
</UL>

<P><STRONG><a name="[3b5]"></a>ETH_Delay</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_eth.o(i.ETH_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACTransmissionEnable
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACReceptionEnable
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_FlushTransmitFIFO
</UL>

<P><STRONG><a name="[3b4]"></a>ETH_FlushTransmitFIFO</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_hal_eth.o(i.ETH_FlushTransmitFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ETH_FlushTransmitFIFO &rArr; ETH_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start
</UL>

<P><STRONG><a name="[3bb]"></a>ETH_MACAddressConfig</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, stm32f4xx_hal_eth.o(i.ETH_MACAddressConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_MACAddressConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
</UL>

<P><STRONG><a name="[3b9]"></a>ETH_MACDMAConfig</STRONG> (Thumb, 566 bytes, Stack size 200 bytes, stm32f4xx_hal_eth.o(i.ETH_MACDMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = ETH_MACDMAConfig &rArr; ETH_MACAddressConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACAddressConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[3bc]"></a>ETH_MACReceptionEnable</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f4xx_hal_eth.o(i.ETH_MACReceptionEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ETH_MACReceptionEnable &rArr; ETH_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start
</UL>

<P><STRONG><a name="[3bd]"></a>ETH_MACTransmissionEnable</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f4xx_hal_eth.o(i.ETH_MACTransmissionEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ETH_MACTransmissionEnable &rArr; ETH_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start
</UL>

<P><STRONG><a name="[3cc]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[416]"></a>FLASH_OB_BOR_LevelConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_OB_BOR_LevelConfig))
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
</UL>

<P><STRONG><a name="[3bf]"></a>FLASH_OB_DisableWRP</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_OB_DisableWRP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_OB_DisableWRP &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
</UL>

<P><STRONG><a name="[3c1]"></a>FLASH_OB_EnableWRP</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_OB_EnableWRP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_OB_EnableWRP &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
</UL>

<P><STRONG><a name="[415]"></a>FLASH_OB_GetBOR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_OB_GetBOR))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBGetConfig
</UL>

<P><STRONG><a name="[413]"></a>FLASH_OB_GetRDP</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_OB_GetRDP))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBGetConfig
</UL>

<P><STRONG><a name="[414]"></a>FLASH_OB_GetUser</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_OB_GetUser))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBGetConfig
</UL>

<P><STRONG><a name="[412]"></a>FLASH_OB_GetWRP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_OB_GetWRP))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBGetConfig
</UL>

<P><STRONG><a name="[3c9]"></a>FLASH_OB_RDP_LevelConfig</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_OB_RDP_LevelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_OB_RDP_LevelConfig &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
</UL>

<P><STRONG><a name="[3ca]"></a>FLASH_OB_UserConfig</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_OB_UserConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FLASH_OB_UserConfig &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
</UL>

<P><STRONG><a name="[458]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[45a]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[45b]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[449]"></a>TIM_TI2_SetConfig</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.TIM_TI2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[44a]"></a>TIM_TI3_SetConfig</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.TIM_TI3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[44b]"></a>TIM_TI4_SetConfig</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.TIM_TI4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[465]"></a>UART_SetConfig</STRONG> (Thumb, 864 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[19c]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[190]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[1b8]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[18f]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[7e4]"></a>_has_defunct_thread</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, idle.o(i._has_defunct_thread))
<BR><BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[f8]"></a>rt_thread_idle_entry</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, idle.o(i.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(i.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[7a7]"></a>rt_ipc_list_resume</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ipc.o(i.rt_ipc_list_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>

<P><STRONG><a name="[777]"></a>rt_ipc_list_resume_all</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ipc.o(i.rt_ipc_list_resume_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
</UL>

<P><STRONG><a name="[77a]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ipc.o(i.rt_ipc_list_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>

<P><STRONG><a name="[779]"></a>rt_ipc_object_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ipc.o(i.rt_ipc_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
</UL>

<P><STRONG><a name="[7a9]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>

<P><STRONG><a name="[7a8]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[77b]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipc.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>

<P><STRONG><a name="[7ee]"></a>print_number</STRONG> (Thumb, 388 bytes, Stack size 56 bytes, kservice.o(i.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[7ed]"></a>skip_atoi</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, kservice.o(i.skip_atoi))
<BR><BR>[Called By]<UL><LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[77c]"></a>plug_holes</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[7bd]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[7be]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[559]"></a>_rt_scheduler_stack_check</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, scheduler.o(i._rt_scheduler_stack_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + In Cycle
<LI>Call Chain = _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[7d9]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
</UL>

<P><STRONG><a name="[55a]"></a>_rt_thread_init</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, thread.o(i._rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[7e1]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</UL>

<P><STRONG><a name="[7e6]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[55e]"></a>_rt_timer_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, timer.o(i._rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _rt_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[7cf]"></a>_rt_timer_remove</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, timer.o(i._rt_timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
</UL>

<P><STRONG><a name="[55f]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>

<P><STRONG><a name="[7ec]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[7eb]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_list_next_timeout
</UL>

<P><STRONG><a name="[f7]"></a>rt_thread_timer_entry</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, timer.o(i.rt_thread_timer_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_thread_timer_entry &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_list_next_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.rt_system_timer_thread_init)
</UL>
<P><STRONG><a name="[7e8]"></a>rt_timer_list_next_timeout</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timer.o(i.rt_timer_list_next_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_timer_list_next_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
</UL>

<P><STRONG><a name="[53e]"></a>_get_path_lastname</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfs_file.o(i._get_path_lastname))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_path_lastname
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>

<P><STRONG><a name="[599]"></a>copydir</STRONG> (Thumb, 246 bytes, Stack size 336 bytes, dfs_file.o(i.copydir))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + In Cycle
<LI>Call Chain = copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[598]"></a>copyfile</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, dfs_file.o(i.copyfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = copyfile &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_write
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[129]"></a>dfs_device_fs_poll</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, devfs.o(i.dfs_device_fs_poll))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[5bf]"></a>elm_result_to_dfs</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, dfs_elm.o(i.elm_result_to_dfs))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
</UL>

<P><STRONG><a name="[5c4]"></a>get_disk</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dfs_elm.o(i.get_disk))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[58e]"></a>check_fs</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[5a1]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[677]"></a>clmt_clust</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, ff.o(i.clmt_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[601]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[595]"></a>cmp_lfn</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[59c]"></a>create_chain</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[59f]"></a>create_name</STRONG> (Thumb, 534 bytes, Stack size 56 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = create_name &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[5fa]"></a>dir_alloc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[5fd]"></a>dir_find</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[5fc]"></a>dir_next</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[602]"></a>dir_read</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[604]"></a>dir_register</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[608]"></a>dir_remove</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(i.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dir_remove &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[5fb]"></a>dir_sdi</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[676]"></a>find_volume</STRONG> (Thumb, 822 bytes, Stack size 88 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[679]"></a>follow_path</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[606]"></a>gen_numname</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[59d]"></a>get_fat</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[684]"></a>get_fileinfo</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_fileinfo &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[680]"></a>get_ldnumber</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[683]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[591]"></a>ld_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[590]"></a>ld_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[5ff]"></a>mem_cmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[605]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[5a2]"></a>mem_set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[58f]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[603]"></a>pick_lfn</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, ff.o(i.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pick_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[59e]"></a>put_fat</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[607]"></a>put_lfn</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ff.o(i.put_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = put_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[67e]"></a>remove_chain</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[67c]"></a>st_clust</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[67b]"></a>st_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[682]"></a>st_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[5fe]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[67d]"></a>sync_fs</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[600]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[675]"></a>validate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[5da]"></a>check_dirent</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dfs_romfs.o(i.check_dirent))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_read
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_open
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_lookup
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_romfs_getdents
</UL>

<P><STRONG><a name="[b2]"></a>_device_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dfs_uffs.o(i._device_init))
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(i.init_uffs_fs)
</UL>
<P><STRONG><a name="[b3]"></a>_device_release</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dfs_uffs.o(i._device_release))
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(i.init_uffs_fs)
</UL>
<P><STRONG><a name="[145]"></a>dfs_uffs_close</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, dfs_uffs.o(i.dfs_uffs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = dfs_uffs_close &rArr; uffs_close &rArr; uffs_CloseObject &rArr; do_FlushObject &rArr; uffs_BufFlushGroupMatchParent &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_get_error
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_closedir
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_close
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[149]"></a>dfs_uffs_flush</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, dfs_uffs.o(i.dfs_uffs_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = dfs_uffs_flush &rArr; uffs_flush &rArr; uffs_FlushObject &rArr; do_FlushObject &rArr; uffs_BufFlushGroupMatchParent &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_get_error
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_flush
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[14b]"></a>dfs_uffs_getdents</STRONG> (Thumb, 334 bytes, Stack size 96 bytes, dfs_uffs.o(i.dfs_uffs_getdents))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360 + Unknown Stack Size
<LI>Call Chain = dfs_uffs_getdents &rArr; uffs_stat &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_stat
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_readdir
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_get_error
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>dfs_uffs_ioctl</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dfs_uffs.o(i.dfs_uffs_ioctl))
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[14e]"></a>dfs_uffs_mkfs</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, dfs_uffs.o(i.dfs_uffs_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = dfs_uffs_mkfs &rArr; init_uffs_fs &rArr; uffs_Mount &rArr; uffs_InitDevice &rArr; uffs_BuildTree &rArr; _BuildTreeStepOne &rArr; _BuildValidTreeNode &rArr; uffs_GetBlockFileDataLength &rArr; uffs_FindBestPageInBlock &rArr; uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_get_error
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_Mount
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_result_to_dfs
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uffs_fs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>dfs_uffs_mount</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, dfs_uffs.o(i.dfs_uffs_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = dfs_uffs_mount &rArr; init_uffs_fs &rArr; uffs_Mount &rArr; uffs_InitDevice &rArr; uffs_BuildTree &rArr; _BuildTreeStepOne &rArr; _BuildValidTreeNode &rArr; uffs_GetBlockFileDataLength &rArr; uffs_FindBestPageInBlock &rArr; uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_get_error
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_result_to_dfs
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uffs_fs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[144]"></a>dfs_uffs_open</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, dfs_uffs.o(i.dfs_uffs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288 + Unknown Stack Size
<LI>Call Chain = dfs_uffs_open &rArr; uffs_opendir &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_seek
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_opendir
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_open
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_mkdir
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_get_error
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>dfs_uffs_read</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, dfs_uffs.o(i.dfs_uffs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = dfs_uffs_read &rArr; uffs_read &rArr; uffs_ReadObject &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_seek
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_read
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_get_error
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>dfs_uffs_rename</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, dfs_uffs.o(i.dfs_uffs_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312 + Unknown Stack Size
<LI>Call Chain = dfs_uffs_rename &rArr; uffs_rename &rArr; uffs_RenameObject &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rename
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_get_error
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>dfs_uffs_seek</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, dfs_uffs.o(i.dfs_uffs_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = dfs_uffs_seek &rArr; uffs_seekdir &rArr; uffs_readdir &rArr; uffs_FindObjectNext &rArr; uffs_FindObjectFirst &rArr; do_FindObject &rArr; _LoadObjectInfo &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_seek
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rewinddir
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_get_error
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_seekdir
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[151]"></a>dfs_uffs_stat</STRONG> (Thumb, 62 bytes, Stack size 80 bytes, dfs_uffs.o(i.dfs_uffs_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344 + Unknown Stack Size
<LI>Call Chain = dfs_uffs_stat &rArr; uffs_stat &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_stat
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_get_error
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[14f]"></a>dfs_uffs_statfs</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, dfs_uffs.o(i.dfs_uffs_statfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfs_uffs_statfs
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetDeviceFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[150]"></a>dfs_uffs_unlink</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, dfs_uffs.o(i.dfs_uffs_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440 + Unknown Stack Size
<LI>Call Chain = dfs_uffs_unlink &rArr; uffs_rmdir &rArr; uffs_DeleteObject &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rmdir
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_remove
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_lstat
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_get_error
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[14d]"></a>dfs_uffs_unmount</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, dfs_uffs.o(i.dfs_uffs_unmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = dfs_uffs_unmount &rArr; uffs_UnMount &rArr; uffs_ReleaseDevice &rArr; uffs_BufReleaseAll &rArr; uffs_BufFlushAll &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_UnRegisterMountTable
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_UnMount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[148]"></a>dfs_uffs_write</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, dfs_uffs.o(i.dfs_uffs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = dfs_uffs_write &rArr; uffs_write &rArr; uffs_WriteObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_write
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_seek
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_get_error
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[5e9]"></a>init_uffs_fs</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dfs_uffs.o(i.init_uffs_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = init_uffs_fs &rArr; uffs_Mount &rArr; uffs_InitDevice &rArr; uffs_BuildTree &rArr; _BuildTreeStepOne &rArr; _BuildValidTreeNode &rArr; uffs_GetBlockFileDataLength &rArr; uffs_FindBestPageInBlock &rArr; uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_setup_storage
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_RegisterMountTable
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_Mount
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MemSetupSystemAllocator
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_mount
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_mkfs
</UL>

<P><STRONG><a name="[5e0]"></a>uffs_result_to_dfs</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, dfs_uffs.o(i.uffs_result_to_dfs))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_write
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_unlink
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_stat
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_seek
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_rename
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_read
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_open
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_mount
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_mkfs
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_getdents
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_flush
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_close
</UL>

<P><STRONG><a name="[157]"></a>nand_erase_block</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, uffs_nandif.o(i.nand_erase_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nand_erase_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uffs_nandif.o(.constdata)
</UL>
<P><STRONG><a name="[153]"></a>nand_init_flash</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uffs_nandif.o(i.nand_init_flash))
<BR>[Address Reference Count : 1]<UL><LI> uffs_nandif.o(.constdata)
</UL>
<P><STRONG><a name="[155]"></a>nand_read_page</STRONG> (Thumb, 120 bytes, Stack size 112 bytes, uffs_nandif.o(i.nand_read_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nand_read_page &rArr; rt_mtd_nand_read
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mtd_nand_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uffs_nandif.o(.constdata)
</UL>
<P><STRONG><a name="[154]"></a>nand_release_flash</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uffs_nandif.o(i.nand_release_flash))
<BR>[Address Reference Count : 1]<UL><LI> uffs_nandif.o(.constdata)
</UL>
<P><STRONG><a name="[156]"></a>nand_write_page</STRONG> (Thumb, 124 bytes, Stack size 112 bytes, uffs_nandif.o(i.nand_write_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nand_write_page &rArr; rt_mtd_nand_write
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mtd_nand_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uffs_nandif.o(.constdata)
</UL>
<P><STRONG><a name="[724]"></a>rt_mtd_nand_read</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, uffs_nandif.o(i.rt_mtd_nand_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_mtd_nand_read
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read_page
</UL>

<P><STRONG><a name="[725]"></a>rt_mtd_nand_write</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, uffs_nandif.o(i.rt_mtd_nand_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_mtd_nand_write
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_write_page
</UL>

<P><STRONG><a name="[109]"></a>sys_free</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, uffs_rtthread.o(i.sys_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = sys_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uffs_rtthread.o(i.uffs_MemSetupSystemAllocator)
</UL>
<P><STRONG><a name="[108]"></a>sys_malloc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, uffs_rtthread.o(i.sys_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = sys_malloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uffs_rtthread.o(i.uffs_MemSetupSystemAllocator)
</UL>
<P><STRONG><a name="[524]"></a>_BreakBcFromList</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, uffs_blockinfo.o(i._BreakBcFromList))
<BR><BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveBcToTail
</UL>

<P><STRONG><a name="[525]"></a>_InsertToBcListTail</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uffs_blockinfo.o(i._InsertToBcListTail))
<BR><BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveBcToTail
</UL>

<P><STRONG><a name="[523]"></a>_MoveBcToTail</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uffs_blockinfo.o(i._MoveBcToTail))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _MoveBcToTail
</UL>
<BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertToBcListTail
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BreakBcFromList
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoGet
</UL>

<P><STRONG><a name="[51b]"></a>CountFreeBuf</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uffs_buf.o(i.CountFreeBuf))
<BR><BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindFreeBufEx
</UL>

<P><STRONG><a name="[527]"></a>_BreakFromBufList</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, uffs_buf.o(i._BreakFromBufList))
<BR><BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufClone
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveNodeToHead
</UL>

<P><STRONG><a name="[4ea]"></a>_BreakFromDirty</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, uffs_buf.o(i._BreakFromDirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _BreakFromDirty &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFindGroupSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufMarkEmpty
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_Enough_FreePage
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
</UL>

<P><STRONG><a name="[4f1]"></a>_BufFlush_NewBlock</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, uffs_buf.o(i._BufFlush_NewBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = _BufFlush_NewBlock &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInsertToErasedListTail
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeGetErasedNode
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoPut
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoGet
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InsertToErasedListHead
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InsertNodeToTree
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashEraseBlock
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
</UL>

<P><STRONG><a name="[4ed]"></a>_CheckDirtyList</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, uffs_buf.o(i._CheckDirtyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _CheckDirtyList &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
</UL>

<P><STRONG><a name="[847]"></a>_FindBufInDirtyList</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uffs_buf.o(i._FindBufInDirtyList))
<BR><BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
</UL>

<P><STRONG><a name="[519]"></a>_FindFreeBuf</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uffs_buf.o(i._FindFreeBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _FindFreeBuf &rArr; _FindFreeBufEx
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindFreeBufEx
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufNew
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
</UL>

<P><STRONG><a name="[51a]"></a>_FindFreeBufEx</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, uffs_buf.o(i._FindFreeBufEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _FindFreeBufEx
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountFreeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufClone
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindFreeBuf
</UL>

<P><STRONG><a name="[845]"></a>_FindMostDirtyGroup</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, uffs_buf.o(i._FindMostDirtyGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _FindMostDirtyGroup
</UL>
<BR>[Called By]<UL><LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushMostDirtyGroup
</UL>

<P><STRONG><a name="[51d]"></a>_GetDirOrFileNameSum</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, uffs_buf.o(i._GetDirOrFileNameSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _GetDirOrFileNameSum &rArr; uffs_MakeSum16 &rArr; uffs_crc16sum &rArr; uffs_crc16update
</UL>
<BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MakeSum16
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
</UL>

<P><STRONG><a name="[850]"></a>_IsBufInInDirtyList</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, uffs_buf.o(i._IsBufInInDirtyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _IsBufInInDirtyList
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufWrite
</UL>

<P><STRONG><a name="[528]"></a>_LinkToBufListHead</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, uffs_buf.o(i._LinkToBufListHead))
<BR><BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveNodeToHead
</UL>

<P><STRONG><a name="[84b]"></a>_LinkToBufListTail</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, uffs_buf.o(i._LinkToBufListTail))
<BR><BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFreeClone
</UL>

<P><STRONG><a name="[51f]"></a>_LinkToDirtyList</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, uffs_buf.o(i._LinkToDirtyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _LinkToDirtyList &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufWrite
</UL>

<P><STRONG><a name="[526]"></a>_MoveNodeToHead</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, uffs_buf.o(i._MoveNodeToHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _MoveNodeToHead
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LinkToBufListHead
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BreakFromBufList
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufNew
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGet
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_Enough_FreePage
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
</UL>

<P><STRONG><a name="[4f6]"></a>uffs_BufFlush_Exist_With_BlockCover</STRONG> (Thumb, 1918 bytes, Stack size 104 bytes, uffs_buf.o(i.uffs_BufFlush_Exist_With_BlockCover))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInsertToErasedListTail
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeGetErasedNode
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetNextBlockTimeStamp
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindPageInBlockWithPageId
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindBestPageInBlock
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFreeClone
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufClone
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoPut
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoGet
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoExpire
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockProcess
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_IsThisBlockUsed
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InsertToErasedListHead
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetBlockTimeStamp
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashEraseBlock
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufPut
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufLoadPhyData
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGet
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveNodeToHead
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDirOrFileNameSum
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindBufInDirtyList
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BreakFromDirty
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_Enough_FreePage
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush_NewBlock
</UL>

<P><STRONG><a name="[4f5]"></a>uffs_BufFlush_Exist_With_Enough_FreePage</STRONG> (Thumb, 384 bytes, Stack size 48 bytes, uffs_buf.o(i.uffs_BufFlush_Exist_With_Enough_FreePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_IsPageErased
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetBlockTimeStamp
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindMinimunPageIdFromDirtyList
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveNodeToHead
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BreakFromDirty
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
</UL>

<P><STRONG><a name="[863]"></a>uffs_EccCorrectChunk256</STRONG> (Thumb, 282 bytes, Stack size 36 bytes, uffs_ecc.o(i.uffs_EccCorrectChunk256))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uffs_EccCorrectChunk256
</UL>
<BR>[Called By]<UL><LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_EccCorrect
</UL>

<P><STRONG><a name="[865]"></a>uffs_EccMakeChunk256</STRONG> (Thumb, 174 bytes, Stack size 36 bytes, uffs_ecc.o(i.uffs_EccMakeChunk256))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uffs_EccMakeChunk256
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_EccMake
</UL>

<P><STRONG><a name="[3ed]"></a>GetDirEntry</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uffs_fd.o(i.GetDirEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GetDirEntry &rArr; uffs_PoolGet &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGet
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_opendir
</UL>

<P><STRONG><a name="[4af]"></a>PutDirEntry</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uffs_fd.o(i.PutDirEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = PutDirEntry &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolPut
</UL>
<BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_opendir
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_closedir
</UL>

<P><STRONG><a name="[649]"></a>do_stat</STRONG> (Thumb, 134 bytes, Stack size 184 bytes, uffs_fd.o(i.do_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = do_stat &rArr; uffs_GetObjectInfo &rArr; _LoadObjectInfo &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObjectInfo
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_stat
</UL>

<P><STRONG><a name="[868]"></a>ResetFindInfo</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uffs_find.o(i.ResetFindInfo))
<BR><BR>[Called By]<UL><LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectFirst
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectRewind
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectOpen
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectClose
</UL>

<P><STRONG><a name="[520]"></a>_LoadObjectInfo</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, uffs_find.o(i._LoadObjectInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = _LoadObjectInfo &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufPut
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_FindObject
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObjectInfo
</UL>

<P><STRONG><a name="[621]"></a>do_FindObject</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, uffs_find.o(i.do_FindObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = do_FindObject &rArr; _LoadObjectInfo &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LoadObjectInfo
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectFirst
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectNext
</UL>

<P><STRONG><a name="[872]"></a>CalculateSpareDataSize</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, uffs_flash.o(i.CalculateSpareDataSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CalculateSpareDataSize
</UL>
<BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashInterfaceInit
</UL>

<P><STRONG><a name="[871]"></a>InitSpareLayout</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, uffs_flash.o(i.InitSpareLayout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitSpareLayout
</UL>
<BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashInterfaceInit
</UL>

<P><STRONG><a name="[4dc]"></a>TagEccCorrect</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, uffs_flash.o(i.TagEccCorrect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TagEccCorrect &rArr; uffs_EccMake8
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_EccMake8
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_EccCorrect8
</UL>
<BR>[Called By]<UL><LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPageTag
</UL>

<P><STRONG><a name="[4df]"></a>TagMakeEcc</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uffs_flash.o(i.TagMakeEcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TagMakeEcc &rArr; uffs_EccMake8
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_EccMake8
</UL>
<BR>[Called By]<UL><LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMarkDirtyPage
</UL>

<P><STRONG><a name="[88e]"></a>GetDirLengthFromPath</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, uffs_fs.o(i.GetDirLengthFromPath))
<BR><BR>[Called By]<UL><LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ParseObject
</UL>

<P><STRONG><a name="[518]"></a>GetFdnByOfs</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uffs_fs.o(i.GetFdnByOfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetFdnByOfs
</UL>
<BR>[Called By]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReadObject
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckObjBufRef
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteObject
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
</UL>

<P><STRONG><a name="[631]"></a>GetStartOfDataBlock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, uffs_fs.o(i.GetStartOfDataBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetStartOfDataBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReadObject
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteObject
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteInternalBlock
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
</UL>

<P><STRONG><a name="[622]"></a>do_FlushObject</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, uffs_fs.o(i.do_FlushObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = do_FlushObject &rArr; uffs_BufFlushGroupMatchParent &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushGroupMatchParent
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushGroup
</UL>
<BR>[Called By]<UL><LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlushObject
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CloseObject
</UL>

<P><STRONG><a name="[625]"></a>do_ReleaseObjectResource</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, uffs_fs.o(i.do_ReleaseObjectResource))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = do_ReleaseObjectResource &rArr; uffs_BadBlockRecover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_RenameObject
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObject
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CloseObject
</UL>

<P><STRONG><a name="[628]"></a>do_TruncateInternalWithBlockRecover</STRONG> (Thumb, 542 bytes, Stack size 96 bytes, uffs_fs.o(i.do_TruncateInternalWithBlockRecover))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = do_TruncateInternalWithBlockRecover &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoPut
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoGet
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoExpire
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDataNode
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufWrite
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufUnLockGroup
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufPut
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufMarkEmpty
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufLockGroup
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushGroupEx
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushGroup
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFindGroupSlot
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFind
</UL>
<BR>[Called By]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
</UL>

<P><STRONG><a name="[62f]"></a>do_TruncateObject</STRONG> (Thumb, 472 bytes, Stack size 56 bytes, uffs_fs.o(i.do_TruncateObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInsertToErasedListTail
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoPut
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoGet
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockProcess
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDataNode
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashEraseBlock
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufMarkEmpty
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFind
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BreakFromEntry
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteObject
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartOfDataBlock
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFdnByOfs
</UL>
<BR>[Called By]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObjectEx
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
</UL>

<P><STRONG><a name="[632]"></a>do_WriteInternalBlock</STRONG> (Thumb, 358 bytes, Stack size 88 bytes, uffs_fs.o(i.do_WriteInternalBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufWrite
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufPut
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufNew
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartOfDataBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteObject
</UL>

<P><STRONG><a name="[634]"></a>do_WriteNewBlock</STRONG> (Thumb, 178 bytes, Stack size 64 bytes, uffs_fs.o(i.do_WriteNewBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = do_WriteNewBlock &rArr; uffs_BufWrite &rArr; uffs_BufFlushGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufWrite
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufPut
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufNew
</UL>
<BR>[Called By]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteObject
</UL>

<P><STRONG><a name="[630]"></a>do_WriteObject</STRONG> (Thumb, 344 bytes, Stack size 56 bytes, uffs_fs.o(i.do_WriteObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDataNode
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushGroup
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteNewBlock
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteInternalBlock
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartOfDataBlock
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFdnByOfs
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_WriteObject
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
</UL>

<P><STRONG><a name="[882]"></a>uffs_InitDeviceConfig</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, uffs_init.o(i.uffs_InitDeviceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = uffs_InitDeviceConfig &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitDevice
</UL>

<P><STRONG><a name="[87c]"></a>uffs_GetMountTableByMountPoint</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, uffs_mtb.o(i.uffs_GetMountTableByMountPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uffs_GetMountTableByMountPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_UnMount
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_Mount
</UL>

<P><STRONG><a name="[3d1]"></a>FindNextAllocatedInSmallPool</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, uffs_pool.o(i.FindNextAllocatedInSmallPool))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = FindNextAllocatedInSmallPool &rArr; uffs_PoolGetIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetIndex
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolFindNextAllocated
</UL>

<P><STRONG><a name="[4fd]"></a>_BuildTreeStepOne</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, uffs_tree.o(i._BuildTreeStepOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = _BuildTreeStepOne &rArr; _BuildValidTreeNode &rArr; uffs_GetBlockFileDataLength &rArr; uffs_FindBestPageInBlock &rArr; uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInsertToBadBlockList
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoPut
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoGet
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockProcess
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashIsBadBlock
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGet
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_IsPageErased
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashEraseBlock
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInsertToErasedListTailEx
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScanAndFixUnCleanPage
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_LoadMiniHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BuildTree
</UL>

<P><STRONG><a name="[506]"></a>_BuildTreeStepThree</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, uffs_tree.o(i._BuildTreeStepThree))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _BuildTreeStepThree &rArr; uffs_BadBlockProcess &rArr; uffs_FlashMarkBadBlock &rArr; uffs_BlockInfoGet &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInsertToErasedListTail
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockProcess
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindFileNode
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashEraseBlock
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BreakFromEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BuildTree
</UL>

<P><STRONG><a name="[508]"></a>_BuildTreeStepTwo</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, uffs_tree.o(i._BuildTreeStepTwo))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _BuildTreeStepTwo &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetCurDateTime
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInsertToErasedListTailEx
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeGetErasedNodeNoCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BuildTree
</UL>

<P><STRONG><a name="[505]"></a>_BuildValidTreeNode</STRONG> (Thumb, 712 bytes, Stack size 96 bytes, uffs_tree.o(i._BuildValidTreeNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = _BuildValidTreeNode &rArr; uffs_GetBlockFileDataLength &rArr; uffs_FindBestPageInBlock &rArr; uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInsertToErasedListTail
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindPageInBlockWithPageId
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindBestPageInBlock
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFreeClone
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufClone
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoPut
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoGet
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockProcess
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MakeSum16
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InsertNodeToTree
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPage
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashEraseBlock
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindFromTree
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBlockFromNode
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_IsSrcNewerThanObj
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetBlockFileDataLength
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepOne
</UL>

<P><STRONG><a name="[50c]"></a>_GetBlockFromNode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, uffs_tree.o(i._GetBlockFromNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _GetBlockFromNode &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
</UL>

<P><STRONG><a name="[51e]"></a>_InsertToEntry</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, uffs_tree.o(i._InsertToEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _InsertToEntry &rArr; uffs_PoolGetIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetIndex
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InsertToFileEntry
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InsertToDirEntry
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InsertToDataEntry
</UL>

<P><STRONG><a name="[504]"></a>_ScanAndFixUnCleanPage</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, uffs_tree.o(i._ScanAndFixUnCleanPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _ScanAndFixUnCleanPage &rArr; uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMarkDirtyPage
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_LoadMiniHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepOne
</UL>

<P><STRONG><a name="[88a]"></a>uffs_InsertToDataEntry</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, uffs_tree.o(i.uffs_InsertToDataEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = uffs_InsertToDataEntry &rArr; _InsertToEntry &rArr; uffs_PoolGetIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertToEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InsertNodeToTree
</UL>

<P><STRONG><a name="[888]"></a>uffs_InsertToDirEntry</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, uffs_tree.o(i.uffs_InsertToDirEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = uffs_InsertToDirEntry &rArr; _InsertToEntry &rArr; uffs_PoolGetIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertToEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InsertNodeToTree
</UL>

<P><STRONG><a name="[889]"></a>uffs_InsertToFileEntry</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, uffs_tree.o(i.uffs_InsertToFileEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = uffs_InsertToFileEntry &rArr; _InsertToEntry &rArr; uffs_PoolGetIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertToEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InsertNodeToTree
</UL>

<P><STRONG><a name="[50a]"></a>uffs_TreeGetErasedNodeNoCheck</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, uffs_tree.o(i.uffs_TreeGetErasedNodeNoCheck))
<BR><BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeGetErasedNode
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepTwo
</UL>

<P><STRONG><a name="[eb]"></a>i2c_bus_device_control</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, i2c_dev.o(i.i2c_bus_device_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = i2c_bus_device_control &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_dev.o(i.rt_i2c_bus_device_device_init)
</UL>
<P><STRONG><a name="[e9]"></a>i2c_bus_device_read</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, i2c_dev.o(i.i2c_bus_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = i2c_bus_device_read &rArr; rt_i2c_master_recv &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_dev.o(i.rt_i2c_bus_device_device_init)
</UL>
<P><STRONG><a name="[ea]"></a>i2c_bus_device_write</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, i2c_dev.o(i.i2c_bus_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = i2c_bus_device_write &rArr; rt_i2c_master_send &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_dev.o(i.rt_i2c_bus_device_device_init)
</UL>
<P><STRONG><a name="[4c8]"></a>SCL_H</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, i2c-bit-ops.o(i.SCL_H))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack_or_nack
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
</UL>

<P><STRONG><a name="[6d0]"></a>i2c_bit_send_address</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, i2c-bit-ops.o(i.i2c_bit_send_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = i2c_bit_send_address &rArr; i2c_send_address &rArr; i2c_writeb &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
</UL>

<P><STRONG><a name="[158]"></a>i2c_bit_xfer</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, i2c-bit-ops.o(i.i2c_bit_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = i2c_bit_xfer &rArr; i2c_bit_send_address &rArr; i2c_send_address &rArr; i2c_writeb &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_bytes
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_bytes
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c-bit-ops.o(.constdata)
</UL>
<P><STRONG><a name="[4c9]"></a>i2c_delay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, i2c-bit-ops.o(i.i2c_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack_or_nack
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>

<P><STRONG><a name="[6dc]"></a>i2c_delay2</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2c-bit-ops.o(i.i2c_delay2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_delay2
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
</UL>

<P><STRONG><a name="[6db]"></a>i2c_readb</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, i2c-bit-ops.o(i.i2c_readb))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = i2c_readb &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay2
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_bytes
</UL>

<P><STRONG><a name="[6d5]"></a>i2c_recv_bytes</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, i2c-bit-ops.o(i.i2c_recv_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = i2c_recv_bytes &rArr; i2c_readb &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack_or_nack
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
</UL>

<P><STRONG><a name="[6d3]"></a>i2c_restart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, i2c-bit-ops.o(i.i2c_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = i2c_restart &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
</UL>

<P><STRONG><a name="[6dd]"></a>i2c_send_ack_or_nack</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, i2c-bit-ops.o(i.i2c_send_ack_or_nack))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = i2c_send_ack_or_nack &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_bytes
</UL>

<P><STRONG><a name="[6d1]"></a>i2c_send_address</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, i2c-bit-ops.o(i.i2c_send_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = i2c_send_address &rArr; i2c_writeb &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay2
</UL>
<BR>[Called By]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
</UL>

<P><STRONG><a name="[6d6]"></a>i2c_send_bytes</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, i2c-bit-ops.o(i.i2c_send_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = i2c_send_bytes &rArr; i2c_writeb &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
</UL>

<P><STRONG><a name="[6d4]"></a>i2c_start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, i2c-bit-ops.o(i.i2c_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_start &rArr; i2c_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
</UL>

<P><STRONG><a name="[6d7]"></a>i2c_stop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, i2c-bit-ops.o(i.i2c_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = i2c_stop &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay2
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
</UL>

<P><STRONG><a name="[6d2]"></a>i2c_writeb</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, i2c-bit-ops.o(i.i2c_writeb))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = i2c_writeb &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_bytes
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
</UL>

<P><STRONG><a name="[560]"></a>_serial_dma_rx</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, serial.o(i._serial_dma_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _serial_dma_rx &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_get_index
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[565]"></a>_serial_dma_tx</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, serial.o(i._serial_dma_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _serial_dma_tx &rArr; rt_data_queue_push &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[775]"></a>_serial_fifo_calc_recved_len</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, serial.o(i._serial_fifo_calc_recved_len))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
</UL>

<P><STRONG><a name="[567]"></a>_serial_int_rx</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, serial.o(i._serial_int_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _serial_int_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[562]"></a>rt_dma_calc_recved_len</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, serial.o(i.rt_dma_calc_recved_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_dma_calc_recved_len
</UL>
<BR>[Calls]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_calc_recved_len
</UL>
<BR>[Called By]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>

<P><STRONG><a name="[564]"></a>rt_dma_recv_update_get_index</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, serial.o(i.rt_dma_recv_update_get_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_dma_recv_update_get_index
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>

<P><STRONG><a name="[799]"></a>rt_dma_recv_update_put_index</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, serial.o(i.rt_dma_recv_update_put_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_dma_recv_update_put_index
</UL>
<BR>[Called By]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[dd]"></a>rt_serial_close</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, serial.o(i.rt_serial_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_serial_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[e0]"></a>rt_serial_control</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, serial.o(i.rt_serial_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_serial_control
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_calc_recved_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[db]"></a>rt_serial_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, serial.o(i.rt_serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_serial_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[dc]"></a>rt_serial_open</STRONG> (Thumb, 482 bytes, Stack size 24 bytes, serial.o(i.rt_serial_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rt_serial_open &rArr; rt_data_queue_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[de]"></a>rt_serial_read</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, serial.o(i.rt_serial_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_serial_read &rArr; _serial_dma_rx &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[df]"></a>rt_serial_write</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, serial.o(i.rt_serial_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rt_serial_write &rArr; _serial_dma_tx &rArr; rt_data_queue_push &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[15a]"></a>serial_fops_close</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, serial.o(i.serial_fops_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = serial_fops_close &rArr; rt_device_close
</UL>
<BR>[Calls]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[15b]"></a>serial_fops_ioctl</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, serial.o(i.serial_fops_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = serial_fops_ioctl &rArr; rt_device_control
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[159]"></a>serial_fops_open</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, serial.o(i.serial_fops_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = serial_fops_open &rArr; rt_device_open &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[15e]"></a>serial_fops_poll</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, serial.o(i.serial_fops_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = serial_fops_poll
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[15c]"></a>serial_fops_read</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, serial.o(i.serial_fops_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = serial_fops_read &rArr; rt_wqueue_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>serial_fops_rx_ind</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, serial.o(i.serial_fops_rx_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = serial_fops_rx_ind &rArr; rt_wqueue_wakeup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.serial_fops_open)
</UL>
<P><STRONG><a name="[15d]"></a>serial_fops_write</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, serial.o(i.serial_fops_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = serial_fops_write &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>_spi_bus_device_control</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, spi_dev.o(i._spi_bus_device_control))
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spi_bus_device_init)
</UL>
<P><STRONG><a name="[f1]"></a>_spi_bus_device_read</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, spi_dev.o(i._spi_bus_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = _spi_bus_device_read &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spi_bus_device_init)
</UL>
<P><STRONG><a name="[f2]"></a>_spi_bus_device_write</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, spi_dev.o(i._spi_bus_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = _spi_bus_device_write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spi_bus_device_init)
</UL>
<P><STRONG><a name="[f6]"></a>_spidev_device_control</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, spi_dev.o(i._spidev_device_control))
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spidev_device_init)
</UL>
<P><STRONG><a name="[f4]"></a>_spidev_device_read</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, spi_dev.o(i._spidev_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = _spidev_device_read &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spidev_device_init)
</UL>
<P><STRONG><a name="[f5]"></a>_spidev_device_write</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, spi_dev.o(i._spidev_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = _spidev_device_write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spidev_device_init)
</UL>
<P><STRONG><a name="[ff]"></a>retry_delay_100us</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_flash_sfud.o(i.retry_delay_100us))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = retry_delay_100us &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[f0]"></a>rt_sfud_control</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, spi_flash_sfud.o(i.rt_sfud_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = rt_sfud_control &rArr; sfud_erase &rArr; sfud_chip_erase &rArr; set_write_enabled &rArr; sfud_log_info &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.rt_sfud_flash_probe)
</UL>
<P><STRONG><a name="[ee]"></a>rt_sfud_read</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, spi_flash_sfud.o(i.rt_sfud_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = rt_sfud_read &rArr; sfud_read &rArr; wait_busy &rArr; sfud_log_info &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.rt_sfud_flash_probe)
</UL>
<P><STRONG><a name="[ef]"></a>rt_sfud_write</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, spi_flash_sfud.o(i.rt_sfud_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = rt_sfud_write &rArr; sfud_erase_write &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_log_info &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.rt_sfud_flash_probe)
</UL>
<P><STRONG><a name="[fd]"></a>spi_lock</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, spi_flash_sfud.o(i.spi_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = spi_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[fe]"></a>spi_unlock</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi_flash_sfud.o(i.spi_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = spi_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[fc]"></a>spi_write_read</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, spi_flash_sfud.o(i.spi_write_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = spi_write_read &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[56c]"></a>aai_write</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, sfud.o(i.aai_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_log_info &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
</UL>

<P><STRONG><a name="[6c9]"></a>hardware_init</STRONG> (Thumb, 454 bytes, Stack size 24 bytes, sfud.o(i.hardware_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = hardware_init &rArr; sfud_read_sfdp &rArr; read_basic_table &rArr; sfud_log_info &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_4_byte_address_mode
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_jedec_id
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_spi_port_init
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
</UL>

<P><STRONG><a name="[570]"></a>make_adress_byte_array</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, sfud.o(i.make_adress_byte_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = make_adress_byte_array
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>

<P><STRONG><a name="[56e]"></a>page256_or_1_byte_write</STRONG> (Thumb, 266 bytes, Stack size 304 bytes, sfud.o(i.page256_or_1_byte_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_log_info &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>

<P><STRONG><a name="[6cb]"></a>read_jedec_id</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, sfud.o(i.read_jedec_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = read_jedec_id &rArr; sfud_log_info &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[6cd]"></a>reset</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, sfud.o(i.reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = reset &rArr; wait_busy &rArr; sfud_log_info &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[6cf]"></a>set_4_byte_address_mode</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, sfud.o(i.set_4_byte_address_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = set_4_byte_address_mode &rArr; set_write_enabled &rArr; sfud_log_info &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[56f]"></a>set_write_enabled</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, sfud.o(i.set_write_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = set_write_enabled &rArr; sfud_log_info &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_status
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_4_byte_address_mode
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>

<P><STRONG><a name="[7fc]"></a>software_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sfud.o(i.software_init))
<BR><BR>[Called By]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
</UL>

<P><STRONG><a name="[571]"></a>wait_busy</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sfud.o(i.wait_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = wait_busy &rArr; sfud_log_info &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_status
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>

<P><STRONG><a name="[757]"></a>read_basic_header</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, sfud_sfdp.o(i.read_basic_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = read_basic_header &rArr; sfud_log_info &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_data
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
</UL>

<P><STRONG><a name="[759]"></a>read_basic_table</STRONG> (Thumb, 554 bytes, Stack size 72 bytes, sfud_sfdp.o(i.read_basic_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = read_basic_table &rArr; sfud_log_info &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_data
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
</UL>

<P><STRONG><a name="[758]"></a>read_sfdp_data</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, sfud_sfdp.o(i.read_sfdp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_sfdp_data
</UL>
<BR>[Called By]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_header
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_table
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_header
</UL>

<P><STRONG><a name="[75a]"></a>read_sfdp_header</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sfud_sfdp.o(i.read_sfdp_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = read_sfdp_header &rArr; sfud_log_info &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_data
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
</UL>

<P><STRONG><a name="[76e]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dataqueue.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
</UL>

<P><STRONG><a name="[771]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dataqueue.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>

<P><STRONG><a name="[772]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dataqueue.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>

<P><STRONG><a name="[c9]"></a>_pin_control</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, pin.o(i._pin_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _pin_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(i.rt_device_pin_register)
</UL>
<P><STRONG><a name="[c7]"></a>_pin_read</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, pin.o(i._pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _pin_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(i.rt_device_pin_register)
</UL>
<P><STRONG><a name="[c8]"></a>_pin_write</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, pin.o(i._pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _pin_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(i.rt_device_pin_register)
</UL>
<P><STRONG><a name="[69a]"></a>finsh_getchar</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, shell.o(i.finsh_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = finsh_getchar &rArr; getc &rArr; fgetc &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_wait_auth
</UL>

<P><STRONG><a name="[6bd]"></a>finsh_wait_auth</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, shell.o(i.finsh_wait_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = finsh_wait_auth &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_password
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[6bf]"></a>shell_auto_complete</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, shell.o(i.shell_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = shell_auto_complete &rArr; finsh_get_prompt &rArr; getcwd &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[6be]"></a>shell_handle_history</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, shell.o(i.shell_handle_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = shell_handle_history &rArr; finsh_get_prompt &rArr; getcwd &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[6c1]"></a>shell_push_history</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, shell.o(i.shell_push_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shell_push_history &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[543]"></a>_list_device</STRONG> (Thumb, 124 bytes, Stack size 120 bytes, cmd.o(i._list_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _list_device &rArr; object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[547]"></a>_list_event</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, cmd.o(i._list_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _list_event &rArr; object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[54b]"></a>_list_mailbox</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, cmd.o(i._list_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _list_mailbox &rArr; object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
</UL>

<P><STRONG><a name="[54c]"></a>_list_memheap</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, cmd.o(i._list_memheap))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _list_memheap &rArr; object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
</UL>

<P><STRONG><a name="[54d]"></a>_list_mempool</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, cmd.o(i._list_mempool))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _list_mempool &rArr; object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
</UL>

<P><STRONG><a name="[54e]"></a>_list_msgqueue</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, cmd.o(i._list_msgqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _list_msgqueue &rArr; object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
</UL>

<P><STRONG><a name="[54f]"></a>_list_mutex</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, cmd.o(i._list_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _list_mutex &rArr; object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
</UL>

<P><STRONG><a name="[550]"></a>_list_sem</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, cmd.o(i._list_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _list_sem &rArr; object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>

<P><STRONG><a name="[551]"></a>_list_thread</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, cmd.o(i._list_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _list_thread &rArr; object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[552]"></a>_list_timer</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, cmd.o(i._list_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _list_timer &rArr; object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
</UL>

<P><STRONG><a name="[545]"></a>object_name_maxlen</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cmd.o(i.object_name_maxlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_thread
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mutex
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mempool
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_memheap
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
</UL>

<P><STRONG><a name="[546]"></a>object_split</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmd.o(i.object_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_thread
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mutex
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mempool
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_memheap
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
</UL>

<P><STRONG><a name="[548]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmd.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
</UL>

<P><STRONG><a name="[549]"></a>rt_list_len</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cmd.o(i.rt_list_len))
<BR><BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mutex
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
</UL>

<P><STRONG><a name="[54a]"></a>show_wait_queue</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cmd.o(i.show_wait_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mempool
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
</UL>

<P><STRONG><a name="[6f8]"></a>str_common</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cmd.o(i.str_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = str_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
</UL>

<P><STRONG><a name="[6f7]"></a>str_is_prefix</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cmd.o(i.str_is_prefix))
<BR><BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
</UL>

<P><STRONG><a name="[690]"></a>finsh_compile</STRONG> (Thumb, 5712 bytes, Stack size 8 bytes, finsh_compiler.o(i.finsh_compile))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = finsh_compile &rArr;  finsh_compile (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compile
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compile
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compiler_run
</UL>

<P><STRONG><a name="[693]"></a>finsh_type_check</STRONG> (Thumb, 350 bytes, Stack size 16 bytes, finsh_compiler.o(i.finsh_type_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = finsh_type_check &rArr;  finsh_type_check (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_type_check
</UL>
<BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_type_check
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compiler_run
</UL>

<P><STRONG><a name="[69f]"></a>finsh_block_insert</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, finsh_heap.o(i.finsh_block_insert))
<BR><BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_free
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
</UL>

<P><STRONG><a name="[6a1]"></a>finsh_block_merge</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, finsh_heap.o(i.finsh_block_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = finsh_block_merge
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_free
</UL>

<P><STRONG><a name="[69e]"></a>finsh_block_remove</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, finsh_heap.o(i.finsh_block_remove))
<BR><BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_free
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
</UL>

<P><STRONG><a name="[69d]"></a>finsh_block_split</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, finsh_heap.o(i.finsh_block_split))
<BR><BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
</UL>

<P><STRONG><a name="[69c]"></a>finsh_heap_gc</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, finsh_heap.o(i.finsh_heap_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = finsh_heap_gc &rArr; finsh_heap_free &rArr; finsh_block_merge
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_free
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
</UL>

<P><STRONG><a name="[723]"></a>make_sys_node</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, finsh_parser.o(i.make_sys_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = make_sys_node
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
</UL>

<P><STRONG><a name="[743]"></a>proc_additive_expr</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, finsh_parser.o(i.proc_additive_expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
</UL>

<P><STRONG><a name="[745]"></a>proc_and_expr</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, finsh_parser.o(i.proc_and_expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = proc_and_expr &rArr; proc_shift_expr &rArr; proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
</UL>

<P><STRONG><a name="[747]"></a>proc_assign_expr</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, finsh_parser.o(i.proc_assign_expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + In Cycle
<LI>Call Chain = proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_param_list
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
</UL>

<P><STRONG><a name="[749]"></a>proc_cast_expr</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, finsh_parser.o(i.proc_cast_expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + In Cycle
<LI>Call Chain = proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_type
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
</UL>
<BR>[Called By]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
</UL>

<P><STRONG><a name="[74c]"></a>proc_exclusive_or_expr</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, finsh_parser.o(i.proc_exclusive_or_expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = proc_exclusive_or_expr &rArr; proc_and_expr &rArr; proc_shift_expr &rArr; proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
</UL>

<P><STRONG><a name="[74d]"></a>proc_expr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, finsh_parser.o(i.proc_expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = proc_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr_statement
</UL>

<P><STRONG><a name="[6b2]"></a>proc_expr_statement</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, finsh_parser.o(i.proc_expr_statement))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = proc_expr_statement &rArr; finsh_token_token &rArr; token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
</UL>

<P><STRONG><a name="[74e]"></a>proc_identifier</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, finsh_parser.o(i.proc_identifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = proc_identifier &rArr; finsh_token_token &rArr; token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[748]"></a>proc_inclusive_or_expr</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, finsh_parser.o(i.proc_inclusive_or_expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = proc_inclusive_or_expr &rArr; proc_exclusive_or_expr &rArr; proc_and_expr &rArr; proc_shift_expr &rArr; proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
</UL>

<P><STRONG><a name="[744]"></a>proc_multiplicative_expr</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, finsh_parser.o(i.proc_multiplicative_expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
</UL>

<P><STRONG><a name="[74f]"></a>proc_param_list</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, finsh_parser.o(i.proc_param_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + In Cycle
<LI>Call Chain = proc_param_list &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
</UL>
<BR>[Called By]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
</UL>

<P><STRONG><a name="[750]"></a>proc_postfix_expr</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, finsh_parser.o(i.proc_postfix_expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = proc_postfix_expr &rArr; proc_primary_expr &rArr; proc_identifier &rArr; finsh_token_token &rArr; token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_param_list
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
</UL>

<P><STRONG><a name="[751]"></a>proc_primary_expr</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, finsh_parser.o(i.proc_primary_expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = proc_primary_expr &rArr; proc_identifier &rArr; finsh_token_token &rArr; token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_ptr
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_long
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_int
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_char
</UL>
<BR>[Called By]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
</UL>

<P><STRONG><a name="[746]"></a>proc_shift_expr</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, finsh_parser.o(i.proc_shift_expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = proc_shift_expr &rArr; proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
</UL>

<P><STRONG><a name="[74a]"></a>proc_type</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, finsh_parser.o(i.proc_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = proc_type &rArr; finsh_token_token &rArr; token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
</UL>

<P><STRONG><a name="[74b]"></a>proc_unary_expr</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, finsh_parser.o(i.proc_unary_expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + In Cycle
<LI>Call Chain = proc_unary_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_long
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
</UL>

<P><STRONG><a name="[6b3]"></a>proc_variable_decl</STRONG> (Thumb, 474 bytes, Stack size 56 bytes, finsh_parser.o(i.proc_variable_decl))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = proc_variable_decl &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_insert
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_type
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
</UL>

<P><STRONG><a name="[82e]"></a>token_match_name</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, finsh_token.o(i.token_match_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = token_match_name
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[82c]"></a>token_next_char</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, finsh_token.o(i.token_next_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = token_next_char &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_get_string
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_trim_space
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_string
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_escape
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
</UL>

<P><STRONG><a name="[82d]"></a>token_prev_char</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, finsh_token.o(i.token_prev_char))
<BR><BR>[Called By]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_get_string
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_trim_space
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_escape
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
</UL>

<P><STRONG><a name="[82f]"></a>token_proc_char</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, finsh_token.o(i.token_proc_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = token_proc_char &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[830]"></a>token_proc_escape</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, finsh_token.o(i.token_proc_escape))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = token_proc_escape &rArr; token_next_char &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
</UL>
<BR>[Called By]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_string
</UL>

<P><STRONG><a name="[831]"></a>token_proc_number</STRONG> (Thumb, 288 bytes, Stack size 160 bytes, finsh_token.o(i.token_proc_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_spec_number
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[833]"></a>token_proc_string</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, finsh_token.o(i.token_proc_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = token_proc_string &rArr; token_proc_escape &rArr; token_next_char &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_escape
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[6c2]"></a>token_run</STRONG> (Thumb, 414 bytes, Stack size 16 bytes, finsh_token.o(i.token_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_get_string
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_trim_space
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_string
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_match_name
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
</UL>

<P><STRONG><a name="[832]"></a>token_spec_number</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, finsh_token.o(i.token_spec_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = token_spec_number
</UL>
<BR>[Called By]<UL><LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
</UL>

<P><STRONG><a name="[834]"></a>token_trim_space</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, finsh_token.o(i.token_trim_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = token_trim_space &rArr; token_next_char &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[106]"></a>netif_device_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sys_arch.o(i.netif_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netif_device_init &rArr; rt_device_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(i.tcpip_init_done_callback)
</UL>
<P><STRONG><a name="[b6]"></a>tcpip_init_done_callback</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, sys_arch.o(i.tcpip_init_done_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = tcpip_init_done_callback &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(i.lwip_system_init)
</UL>
<P><STRONG><a name="[72b]"></a>netconn_recv_data</STRONG> (Thumb, 364 bytes, Stack size 56 bytes, api_lib.o(i.netconn_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
</UL>

<P><STRONG><a name="[a6]"></a>accept_function</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, api_msg.o(i.accept_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = accept_function &rArr; netconn_alloc &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.do_listen)
</UL>
<P><STRONG><a name="[638]"></a>do_close_internal</STRONG> (Thumb, 438 bytes, Stack size 32 bytes, api_msg.o(i.do_close_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
</UL>

<P><STRONG><a name="[64c]"></a>do_writemore</STRONG> (Thumb, 538 bytes, Stack size 40 bytes, api_msg.o(i.do_writemore))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = do_writemore &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
</UL>

<P><STRONG><a name="[a5]"></a>err_tcp</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, api_msg.o(i.err_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = err_tcp &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.setup_tcp)
<LI> api_msg.o(i.do_close_internal)
</UL>
<P><STRONG><a name="[63c]"></a>netconn_drain</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, api_msg.o(i.netconn_drain))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + In Cycle
<LI>Call Chain = netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
</UL>
<BR>[Called By]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
</UL>

<P><STRONG><a name="[644]"></a>pcb_new</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, api_msg.o(i.pcb_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = pcb_new &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recv
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
</UL>

<P><STRONG><a name="[a4]"></a>poll_tcp</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, api_msg.o(i.poll_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = poll_tcp &rArr; do_writemore &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.setup_tcp)
<LI> api_msg.o(i.do_close_internal)
</UL>
<P><STRONG><a name="[c3]"></a>recv_raw</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, api_msg.o(i.recv_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = recv_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.pcb_new)
</UL>
<P><STRONG><a name="[fb]"></a>recv_tcp</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, api_msg.o(i.recv_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = recv_tcp &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[c4]"></a>recv_udp</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, api_msg.o(i.recv_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = recv_udp &rArr; netbuf_delete &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.pcb_new)
</UL>
<P><STRONG><a name="[a3]"></a>sent_tcp</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, api_msg.o(i.sent_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = sent_tcp &rArr; do_writemore &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.setup_tcp)
<LI> api_msg.o(i.do_close_internal)
</UL>
<P><STRONG><a name="[574]"></a>setup_tcp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, api_msg.o(i.setup_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = setup_tcp &rArr; tcp_sent &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[57e]"></a>alloc_socket</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, sockets.o(i.alloc_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = alloc_socket &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[b4]"></a>event_callback</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, sockets.o(i.event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = event_callback &rArr; sys_sem_signal &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sockets.o(i.lwip_accept)
<LI> sockets.o(i.lwip_socket)
</UL>
<P><STRONG><a name="[6c4]"></a>free_socket</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sockets.o(i.free_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[674]"></a>get_socket</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sockets.o(i.get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_socket &rArr; _rt_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[711]"></a>lwip_selscan</STRONG> (Thumb, 308 bytes, Stack size 64 bytes, sockets.o(i.lwip_selscan))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lwip_selscan &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>

<P><STRONG><a name="[b5]"></a>lwip_setsockopt_internal</STRONG> (Thumb, 500 bytes, Stack size 32 bytes, sockets.o(i.lwip_setsockopt_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = lwip_setsockopt_internal &rArr; sys_sem_signal &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.lwip_setsockopt)
</UL>
<P><STRONG><a name="[713]"></a>tryget_socket</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, sockets.o(i.tryget_socket))
<BR><BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
</UL>

<P><STRONG><a name="[105]"></a>tcpip_thread</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, tcpip.o(i.tcpip_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = tcpip_thread &rArr; ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_init)
</UL>
<P><STRONG><a name="[60c]"></a>dns_check_entries</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dns.o(i.dns_check_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
</UL>

<P><STRONG><a name="[60d]"></a>dns_check_entry</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, dns.o(i.dns_check_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>

<P><STRONG><a name="[618]"></a>dns_compare_name</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dns.o(i.dns_compare_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dns_compare_name
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[619]"></a>dns_parse_name</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, dns.o(i.dns_parse_name))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[a1]"></a>dns_recv</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, dns.o(i.dns_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = dns_recv &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_parse_name
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_compare_name
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns.o(i.dns_init)
</UL>
<P><STRONG><a name="[60f]"></a>dns_send</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, dns.o(i.dns_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[736]"></a>pbuf_free_ooseq</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_free_ooseq))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pbuf_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
</UL>

<P><STRONG><a name="[c2]"></a>pbuf_free_ooseq_callback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_free_ooseq_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = pbuf_free_ooseq_callback &rArr; pbuf_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pbuf.o(i.pbuf_pool_is_empty)
</UL>
<P><STRONG><a name="[733]"></a>pbuf_pool_is_empty</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_pool_is_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[103]"></a>tcp_accept_null</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept_null))
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_listen_with_backlog)
</UL>
<P><STRONG><a name="[80d]"></a>tcp_close_shutdown</STRONG> (Thumb, 458 bytes, Stack size 24 bytes, tcp.o(i.tcp_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[809]"></a>tcp_kill_prio</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, tcp.o(i.tcp_kill_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[808]"></a>tcp_kill_timewait</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tcp.o(i.tcp_kill_timewait))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[80b]"></a>tcp_new_port</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, tcp.o(i.tcp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[818]"></a>tcp_listen_input</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_listen_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[81d]"></a>tcp_oos_insert_segment</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_oos_insert_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = tcp_oos_insert_segment &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[81c]"></a>tcp_parseopt</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_parseopt &rArr; lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[819]"></a>tcp_process</STRONG> (Thumb, 1602 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[821]"></a>tcp_receive</STRONG> (Thumb, 3432 bytes, Stack size 48 bytes, tcp_in.o(i.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[817]"></a>tcp_timewait_input</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_timewait_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[810]"></a>tcp_create_segment</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_create_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[81b]"></a>tcp_output_alloc_header</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output_alloc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[81f]"></a>tcp_output_segment</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; pbuf_header &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[820]"></a>tcp_pbuf_prealloc</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, tcp_out.o(i.tcp_pbuf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[82a]"></a>tcp_write_checks</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_write_checks))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tcp_write_checks &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[9f]"></a>arp_timer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timers.o(i.arp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = arp_timer &rArr; etharp_tmr &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timers.o(i.arp_timer)
<LI> timers.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[a2]"></a>dns_timer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timers.o(i.dns_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = dns_timer &rArr; dns_tmr &rArr; dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timers.o(i.dns_timer)
<LI> timers.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[104]"></a>tcpip_tcp_timer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timers.o(i.tcpip_tcp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timers.o(i.tcpip_tcp_timer)
<LI> timers.o(i.tcp_timer_needed)
</UL>
<P><STRONG><a name="[835]"></a>udp_new_port</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, udp.o(i.udp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>

<P><STRONG><a name="[6df]"></a>icmp_send_response</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, icmp.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[6e5]"></a>lwip_standard_chksum</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inet_chksum.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>

<P><STRONG><a name="[661]"></a>etharp_arp_input</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, etharp.o(i.etharp_arp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = etharp_arp_input &rArr; etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[663]"></a>etharp_find_entry</STRONG> (Thumb, 494 bytes, Stack size 48 bytes, etharp.o(i.etharp_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[664]"></a>etharp_free_entry</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, etharp.o(i.etharp_free_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>

<P><STRONG><a name="[668]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, etharp.o(i.etharp_output_to_arp_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[66f]"></a>etharp_raw</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, etharp.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[66a]"></a>etharp_send_ip</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, etharp.o(i.etharp_send_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = etharp_send_ip &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[662]"></a>etharp_update_arp_entry</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, etharp.o(i.etharp_update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[665]"></a>free_etharp_q</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, etharp.o(i.free_etharp_q))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = free_etharp_q &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>

<P><STRONG><a name="[ab]"></a>eth_netif_device_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ethernetif.o(i.eth_netif_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = eth_netif_device_init &rArr; netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_device_init_with_flag)
</UL>
<P><STRONG><a name="[ae]"></a>eth_rx_thread_entry</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, ethernetif.o(i.eth_rx_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = eth_rx_thread_entry &rArr; netifapi_netif_common &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_system_device_init)
</UL>
<P><STRONG><a name="[af]"></a>eth_tx_thread_entry</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ethernetif.o(i.eth_tx_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = eth_tx_thread_entry &rArr; rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_system_device_init)
</UL>
<P><STRONG><a name="[a9]"></a>ethernetif_linkoutput</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ethernetif.o(i.ethernetif_linkoutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ethernetif_linkoutput &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_device_init_with_flag)
</UL>
<P><STRONG><a name="[37c]"></a>DLT634_HMI_SLAVE_CKS</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, hmi_101_app.o(i.DLT634_HMI_SLAVE_CKS))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DLT634_HMI_SLAVE_CKS
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_SearchValidFrame
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_SlaveFrame10Packet
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_MasterFrame68Packet
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_MasterFrame10Packet
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_CheckFram10Valid
</UL>

<P><STRONG><a name="[37b]"></a>DLT634_HMI_SLAVE_CheckFram10Valid</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, hmi_101_app.o(i.DLT634_HMI_SLAVE_CheckFram10Valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DLT634_HMI_SLAVE_CheckFram10Valid &rArr; DLT634_HMI_SLAVE_CKS
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_CKS
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_SearchValidFrame
</UL>

<P><STRONG><a name="[38f]"></a>DLT634_HMI_SLAVE_CheckFram68Valid</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, hmi_101_app.o(i.DLT634_HMI_SLAVE_CheckFram68Valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DLT634_HMI_SLAVE_CheckFram68Valid
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_SearchValidFrame
</UL>

<P><STRONG><a name="[381]"></a>DLT634_HMI_SLAVE_DataProcess</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, hmi_101_app.o(i.DLT634_HMI_SLAVE_DataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = DLT634_HMI_SLAVE_DataProcess &rArr; DLT634_HMI_SLAVE_EMPTY &rArr; Cmd101SendFinish &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_EMPTY
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_SendProcess
</UL>

<P><STRONG><a name="[383]"></a>DLT634_HMI_SLAVE_DecodeFrame10</STRONG> (Thumb, 992 bytes, Stack size 24 bytes, hmi_101_app.o(i.DLT634_HMI_SLAVE_DecodeFrame10))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DLT634_HMI_SLAVE_DecodeFrame10 &rArr; DLT634_HMI_SLAVE_WriteDataToMISI &rArr; DLT634_HMI_SLAVE_WriteData &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_WriteDataToMISI
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_StatusReset
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_SearchValidFrame
</UL>

<P><STRONG><a name="[386]"></a>DLT634_HMI_SLAVE_DecodeFrame68</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, hmi_101_app.o(i.DLT634_HMI_SLAVE_DecodeFrame68))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = DLT634_HMI_SLAVE_DecodeFrame68 &rArr; DLT634_HMI_SLAVE_AppProcess &rArr; DLT634_HMI_SLAVE_TO_HMI &rArr; hmi101Scan &rArr; Hmi101CmdResult &rArr; HmiCmd002Fun &rArr; KeyCmdResult &rArr; YaoKongKeyResult &rArr; YaoKongKeyCmdResult &rArr; rt_multi_telecontrl_operate &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_AppProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_SearchValidFrame
</UL>

<P><STRONG><a name="[388]"></a>DLT634_HMI_SLAVE_Link10Process</STRONG> (Thumb, 384 bytes, Stack size 8 bytes, hmi_101_app.o(i.DLT634_HMI_SLAVE_Link10Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DLT634_HMI_SLAVE_Link10Process &rArr; DLT634_HMI_SLAVE_WriteDataToMISI &rArr; DLT634_HMI_SLAVE_WriteData &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_WriteDataToMISI
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_SlaveFrame10Packet
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_MasterFrame10Packet
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_SendProcess
</UL>

<P><STRONG><a name="[38b]"></a>DLT634_HMI_SLAVE_Link68Process</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, hmi_101_app.o(i.DLT634_HMI_SLAVE_Link68Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DLT634_HMI_SLAVE_Link68Process &rArr; DLT634_HMI_SLAVE_WriteDataToMISI &rArr; DLT634_HMI_SLAVE_WriteData &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_WriteDataToMISI
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_MasterFrame68Packet
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_SendProcess
</UL>

<P><STRONG><a name="[38a]"></a>DLT634_HMI_SLAVE_MasterFrame10Packet</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, hmi_101_app.o(i.DLT634_HMI_SLAVE_MasterFrame10Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DLT634_HMI_SLAVE_MasterFrame10Packet &rArr; DLT634_HMI_SLAVE_CKS
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_CKS
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_Link10Process
</UL>

<P><STRONG><a name="[38c]"></a>DLT634_HMI_SLAVE_MasterFrame68Packet</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, hmi_101_app.o(i.DLT634_HMI_SLAVE_MasterFrame68Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DLT634_HMI_SLAVE_MasterFrame68Packet &rArr; DLT634_HMI_SLAVE_CKS
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_CKS
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_Link68Process
</UL>

<P><STRONG><a name="[37e]"></a>DLT634_HMI_SLAVE_ReadMISIData</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, hmi_101_app.o(i.DLT634_HMI_SLAVE_ReadMISIData))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = DLT634_HMI_SLAVE_ReadMISIData &rArr; DLT634_HMI_SLAVE_SearchValidFrame &rArr; DLT634_HMI_SLAVE_DecodeFrame68 &rArr; DLT634_HMI_SLAVE_AppProcess &rArr; DLT634_HMI_SLAVE_TO_HMI &rArr; hmi101Scan &rArr; Hmi101CmdResult &rArr; HmiCmd002Fun &rArr; KeyCmdResult &rArr; YaoKongKeyResult &rArr; YaoKongKeyCmdResult &rArr; rt_multi_telecontrl_operate &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_ReadData
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_SearchValidFrame
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_Clock
</UL>

<P><STRONG><a name="[37f]"></a>DLT634_HMI_SLAVE_SendProcess</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, hmi_101_app.o(i.DLT634_HMI_SLAVE_SendProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = DLT634_HMI_SLAVE_SendProcess &rArr; DLT634_HMI_SLAVE_DataProcess &rArr; DLT634_HMI_SLAVE_EMPTY &rArr; Cmd101SendFinish &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_Link68Process
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_Link10Process
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_DataProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_Clock
</UL>

<P><STRONG><a name="[389]"></a>DLT634_HMI_SLAVE_SlaveFrame10Packet</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, hmi_101_app.o(i.DLT634_HMI_SLAVE_SlaveFrame10Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DLT634_HMI_SLAVE_SlaveFrame10Packet &rArr; DLT634_HMI_SLAVE_CKS
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_CKS
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_Link10Process
</UL>

<P><STRONG><a name="[385]"></a>DLT634_HMI_SLAVE_StatusReset</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, hmi_101_app.o(i.DLT634_HMI_SLAVE_StatusReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DLT634_HMI_SLAVE_StatusReset
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_DecodeFrame10
</UL>

<P><STRONG><a name="[384]"></a>DLT634_HMI_SLAVE_WriteDataToMISI</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, hmi_101_app.o(i.DLT634_HMI_SLAVE_WriteDataToMISI))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DLT634_HMI_SLAVE_WriteDataToMISI &rArr; DLT634_HMI_SLAVE_WriteData &rArr; rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_LinkOnTimer
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_Link68Process
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_Link10Process
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_HMI_SLAVE_DecodeFrame10
</UL>

<P><STRONG><a name="[2c4]"></a>Cmd101DownControl</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, gui_101_cmd.o(i.Cmd101DownControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCmd101Down
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenLcdDisplay
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCmd001Fill
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiVScroll
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiUpdateDisplayAll
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSetbackcolor
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiSetForecolor
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiRect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiRPointLine
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiRLine
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiHPointLine
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiHLine
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFont12Align
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFillRect
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiExchangeColor
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiButton
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiBiasLine
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiAreaBitMap
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLcdDisplay
</UL>

<P><STRONG><a name="[8e]"></a>Hmi101ThreadEntity</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, gui_101_cmd.o(i.Hmi101ThreadEntity))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Hmi101ThreadEntity &rArr; GUIDisplayMian &rArr; GUIUpdataProgram &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userVariableDisplayInit
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_static_init
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedChangeCheck
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiInOutInit
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDisplayMian
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDisplayInit
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi101ThreadRunMontor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_101_cmd.o(i.Hmi101Init)
</UL>
<P><STRONG><a name="[107]"></a>Timer1Timeout</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_common.o(i.Timer1Timeout))
<BR>[Address Reference Count : 1]<UL><LI> gui_common.o(i.time_static_init)
</UL>
<P><STRONG><a name="[3a6]"></a>DrawAllMenu</STRONG> (Thumb, 442 bytes, Stack size 40 bytes, lkdguimenu.o(i.DrawAllMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = DrawAllMenu &rArr; DrawNodes &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDrawNodesNum
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDrawNodes
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckedNodeDrawy
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawNodes
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuRedrawMenu
</UL>

<P><STRONG><a name="[3ab]"></a>DrawMenu</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, lkdguimenu.o(i.DrawMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = DrawMenu &rArr; DrawNodes &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDrawNodesNum
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDrawNodes
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckedNodeDrawy
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawNodes
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuNodesDisplay
</UL>

<P><STRONG><a name="[3a9]"></a>DrawNodes</STRONG> (Thumb, 444 bytes, Stack size 40 bytes, lkdguimenu.o(i.DrawNodes))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = DrawNodes &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiRLine
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiHLine
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFont12Align
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFillRect
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiExchangeColor
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuItemUpMove
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuItemDownMove
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedrawMenu
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenu
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawAllMenu
</UL>

<P><STRONG><a name="[3a7]"></a>GetCheckedNodeDrawy</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, lkdguimenu.o(i.GetCheckedNodeDrawy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetCheckedNodeDrawy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenu
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawAllMenu
</UL>

<P><STRONG><a name="[3a8]"></a>GetDrawNodes</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, lkdguimenu.o(i.GetDrawNodes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetDrawNodes
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetbNodesNum
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenu
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawAllMenu
</UL>

<P><STRONG><a name="[3aa]"></a>GetDrawNodesNum</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lkdguimenu.o(i.GetDrawNodesNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetDrawNodesNum
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetbNodesNum
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedrawMenu
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenu
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawAllMenu
</UL>

<P><STRONG><a name="[3f0]"></a>GetbNodesNum</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lkdguimenu.o(i.GetbNodesNum))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuCurrentNodeHide
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuNodesDisplay
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDrawNodesNum
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDrawNodes
</UL>

<P><STRONG><a name="[3fd]"></a>GetpNodeFromIndex</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lkdguimenu.o(i.GetpNodeFromIndex))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuGetCurrentpNode
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuCurrentNodeSonUnfold
</UL>

<P><STRONG><a name="[3fe]"></a>GuiMenuNodesDisplay</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lkdguimenu.o(i.GuiMenuNodesDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = GuiMenuNodesDisplay &rArr; DrawMenu &rArr; DrawNodes &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetbNodesNum
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuCurrentNodeSonUnfold
</UL>

<P><STRONG><a name="[3fb]"></a>RedrawMenu</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, lkdguimenu.o(i.RedrawMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = RedrawMenu &rArr; DrawNodes &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDrawNodesNum
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawNodes
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuCurrentNodeHide
</UL>

<P><STRONG><a name="[10]"></a>CmdSendWinFun</STRONG> (Thumb, 612 bytes, Stack size 24 bytes, guidisplay.o(i.CmdSendWinFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = CmdSendWinFun &rArr; GuiMenuRedrawMenu &rArr; DrawAllMenu &rArr; DrawNodes &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUIWindowAdd
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUITopWindowRedraw
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUITopWindowHide
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawList
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuRedrawMenu
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiVScroll
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiUpdateDisplayAll
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMessageWin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidisplay.o(.data)
</UL>
<P><STRONG><a name="[2d5]"></a>ConstParDataResult</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, guidisplay.o(i.ConstParDataResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ConstParDataResult &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VersionWinFun
</UL>

<P><STRONG><a name="[397]"></a>DisplayDZ</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, guidisplay.o(i.DisplayDZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = DisplayDZ &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiRPointLine
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiHPointLine
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiHLine
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFont12Align
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFillRect
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiExchangeColor
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyDisplay
</UL>

<P><STRONG><a name="[15]"></a>FaultEventFun</STRONG> (Thumb, 1418 bytes, Stack size 48 bytes, guidisplay.o(i.FaultEventFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = FaultEventFun &rArr; GuiMenuRedrawMenu &rArr; DrawAllMenu &rArr; DrawNodes &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUITopWindowRedraw
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUITopWindowHide
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuRedrawMenu
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiVScroll
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiUpdateDisplayAll
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiRPointLine
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiHPointLine
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiHLine
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFont12Align
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFillRect
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiExchangeColor
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFeventNum
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFeventNoContent
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFeventUpdata
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidisplay.o(.data)
</UL>
<P><STRONG><a name="[3e7]"></a>GUIDisplayONOFF</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, guidisplay.o(i.GUIDisplayONOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = GUIDisplayONOFF &rArr; OpenLcdDisplay &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentTick
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntervalTick
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenLcdDisplay
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDisplayMian
</UL>

<P><STRONG><a name="[398]"></a>GetDingZhiSetOrSee</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guidisplay.o(i.GetDingZhiSetOrSee))
<BR><BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyDisplay
</UL>

<P><STRONG><a name="[39f]"></a>GetIntervalTick</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, guidisplay.o(i.GetIntervalTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetIntervalTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimer1IntervalTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoxinFun
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDisplayONOFF
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaoCeDisplay
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeWindowFun
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyFun
</UL>

<P><STRONG><a name="[4a7]"></a>MenuItemDealWith</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, guidisplay.o(i.MenuItemDealWith))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = MenuItemDealWith &rArr; GuiMenuCurrentNodeSonUnfold &rArr; GuiMenuNodesDisplay &rArr; DrawMenu &rArr; DrawNodes &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUIWindowAdd
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuCurrentNodeSonUnfold
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserItemsUseDealWith
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassWordWin
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeedPasswordCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuControlFun
</UL>

<P><STRONG><a name="[e]"></a>MenuWindowFun</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, guidisplay.o(i.MenuWindowFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = MenuWindowFun &rArr; GuiMenuCurrentNodeSonUnfold &rArr; GuiMenuNodesDisplay &rArr; DrawMenu &rArr; DrawNodes &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuCurrentNodeSonUnfold
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidisplay.o(.data)
</UL>
<P><STRONG><a name="[399]"></a>SetDingZhiModfiy</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, guidisplay.o(i.SetDingZhiModfiy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetDingZhiModfiy
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyDisplay
</UL>

<P><STRONG><a name="[4e4]"></a>SetDingZhiSetOrSee</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guidisplay.o(i.SetDingZhiSetOrSee))
<BR><BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserItemsUseDealWith
</UL>

<P><STRONG><a name="[4d2]"></a>SoeCoDisplay</STRONG> (Thumb, 1238 bytes, Stack size 48 bytes, guidisplay.o(i.SoeCoDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = SoeCoDisplay &rArr; GuiMenuRedrawMenu &rArr; DrawAllMenu &rArr; DrawNodes &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUITopWindowRedraw
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUITopWindowHide
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuRedrawMenu
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiVScroll
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiUpdateDisplayAll
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiRPointLine
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiHPointLine
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiHLine
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFont12Align
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFillRect
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiExchangeColor
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoeCoWinFun
</UL>

<P><STRONG><a name="[f]"></a>TimeModfiyFun</STRONG> (Thumb, 904 bytes, Stack size 40 bytes, guidisplay.o(i.TimeModfiyFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = TimeModfiyFun &rArr; GuiMenuRedrawMenu &rArr; DrawAllMenu &rArr; DrawNodes &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMoveModfiy
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUITopWindowRedraw
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUITopWindowHide
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuRedrawMenu
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiUpdateDisplayAll
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiRPointLine
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiHPointLine
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFont12Align
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFillRect
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiExchangeColor
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDisplayTime
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayTime
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidisplay.o(.data)
</UL>
<P><STRONG><a name="[4e2]"></a>TimeMoveModfiy</STRONG> (Thumb, 578 bytes, Stack size 40 bytes, guidisplay.o(i.TimeMoveModfiy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TimeMoveModfiy &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeModfiyFun
</UL>

<P><STRONG><a name="[11]"></a>VersionWinFun</STRONG> (Thumb, 630 bytes, Stack size 24 bytes, guidisplay.o(i.VersionWinFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = VersionWinFun &rArr; GuiMenuRedrawMenu &rArr; DrawAllMenu &rArr; DrawNodes &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstParDataResult
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUITopWindowRedraw
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUITopWindowHide
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuRedrawMenu
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiVScroll
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiUpdateDisplayAll
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiHLine
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFont12Align
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiFillRect
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiExchangeColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidisplay.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>YaoxinFun</STRONG> (Thumb, 754 bytes, Stack size 24 bytes, guidisplay.o(i.YaoxinFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = YaoxinFun &rArr; GuiMenuRedrawMenu &rArr; DrawAllMenu &rArr; DrawNodes &rArr; GuiFont12Align &rArr; Cmd101DownControl &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentTick
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntervalTick
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUITopWindowRedraw
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userGUITopWindowHide
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawList
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiMenuRedrawMenu
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiVScroll
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiUpdateDisplayAll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidisplay.o(.data)
</UL>
<P><STRONG><a name="[3a0]"></a>getCurrentTick</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, guidisplay.o(i.getCurrentTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getCurrentTick
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimer1Tick
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoxinFun
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDisplayONOFF
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaoCeDisplay
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeWindowFun
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZModfiyFun
</UL>

<P><STRONG><a name="[3ad]"></a>Dzhi0DisplayInit</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, uservariable.o(i.Dzhi0DisplayInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Dzhi0DisplayInit &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dzhi0TypeRemap
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userVariableDisplayInit
</UL>

<P><STRONG><a name="[8c]"></a>Dzhi0ModfiySave</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uservariable.o(i.Dzhi0ModfiySave))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = Dzhi0ModfiySave &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_save_value_to_fram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uservariable.o(i.Dzhi0DisplayInit)
</UL>
<P><STRONG><a name="[3ae]"></a>Dzhi0TypeRemap</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, uservariable.o(i.Dzhi0TypeRemap))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dzhi0DisplayInit
</UL>

<P><STRONG><a name="[8d]"></a>Dzhi1ModfiySave</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uservariable.o(i.Dzhi1ModfiySave))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = Dzhi1ModfiySave &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_save_value_to_fram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uservariable.o(i.Dzhi1DisplayInit)
</UL>
<P><STRONG><a name="[8f]"></a>HmiCmdSendFun</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, uservariable.o(i.HmiCmdSendFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = HmiCmdSendFun &rArr; rt_multi_telecontrl_operate &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_telecontrl_operate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uservariable.o(i.HmiCmdSendInit)
</UL>
<P><STRONG><a name="[8a1]"></a>HmiCmdSendInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uservariable.o(i.HmiCmdSendInit))
<BR><BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userVariableDisplayInit
</UL>

<P><STRONG><a name="[8a2]"></a>VersionInfoInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uservariable.o(i.VersionInfoInit))
<BR><BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userVariableDisplayInit
</UL>

<P><STRONG><a name="[4e7]"></a>YaoceDisplayInit</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, uservariable.o(i.YaoceDisplayInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = YaoceDisplayInit &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userVariableDisplayInit
</UL>

<P><STRONG><a name="[4e9]"></a>YaoxinDisplayInit</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, uservariable.o(i.YaoxinDisplayInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = YaoxinDisplayInit &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userVariableDisplayInit
</UL>

<P><STRONG><a name="[753]"></a>readPassword</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, uservariable.o(i.readPassword))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = readPassword &rArr; rt_multi_common_data_fram_record_read &rArr; rt_device_read &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_multi_common_data_fram_record_read
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userVariableDisplayInit
</UL>

<P><STRONG><a name="[481]"></a>LedReverseScan</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hmiinout.o(i.LedReverseScan))
<BR><BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedChangeCheck
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaoxinMapToLed
</UL>

<P><STRONG><a name="[32d]"></a>DLT634_5101_SLAVE_AllDataConReply</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_AllDataConReply))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_ReadAllDataProcess
</UL>

<P><STRONG><a name="[32e]"></a>DLT634_5101_SLAVE_AllDataEndReply</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_AllDataEndReply))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_ReadAllDataProcess
</UL>

<P><STRONG><a name="[301]"></a>DLT634_5101_SLAVE_CKS</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_CKS))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DLT634_5101_SLAVE_CKS
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_CheckFram10Valid
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_SearchValidFrame
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_SlaveFrame68Packet
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_SlaveFrame10Packet
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_MasterFrame68Packet
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_MasterFrame10Packet
</UL>

<P><STRONG><a name="[300]"></a>DLT634_5101_SLAVE_CheckFram10Valid</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_CheckFram10Valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DLT634_5101_SLAVE_CheckFram10Valid &rArr; DLT634_5101_SLAVE_CKS
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_CKS
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_SearchValidFrame
</UL>

<P><STRONG><a name="[335]"></a>DLT634_5101_SLAVE_CheckFram68Valid</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_CheckFram68Valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DLT634_5101_SLAVE_CheckFram68Valid
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_SearchValidFrame
</UL>

<P><STRONG><a name="[306]"></a>DLT634_5101_SLAVE_Data1Process</STRONG> (Thumb, 1074 bytes, Stack size 16 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_Data1Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = DLT634_5101_SLAVE_Data1Process &rArr; DLT634_5101_SLAVE_WriteDataToMISI &rArr; DLT634_5101_SLAVE_WriteData &rArr; MonitoringDataTransmission &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_R_SOE
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_R_COS
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_H_SOE
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_H_COS
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_WriteDataToMISI
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_RestReply
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_ReadAllDataProcess
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_InitEndReply
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_SendProcess
</UL>

<P><STRONG><a name="[30f]"></a>DLT634_5101_SLAVE_Data2Process</STRONG> (Thumb, 746 bytes, Stack size 16 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_Data2Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = DLT634_5101_SLAVE_Data2Process &rArr; DLT634_5101_SLAVE_WriteDataToMISI &rArr; DLT634_5101_SLAVE_WriteData &rArr; MonitoringDataTransmission &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_R_NVA
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_R_IDLE
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_R_FEvent
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_H_NVA
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_H_FEvent
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_WriteDataToMISI
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_SendProcess
</UL>

<P><STRONG><a name="[315]"></a>DLT634_5101_SLAVE_DecodeFrame10</STRONG> (Thumb, 1532 bytes, Stack size 24 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_DecodeFrame10))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = DLT634_5101_SLAVE_DecodeFrame10 &rArr; DLT634_5101_SLAVE_WriteDataToMISI &rArr; DLT634_5101_SLAVE_WriteData &rArr; MonitoringDataTransmission &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_WriteDataToMISI
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_StatusReset
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_SearchValidFrame
</UL>

<P><STRONG><a name="[318]"></a>DLT634_5101_SLAVE_DecodeFrame68</STRONG> (Thumb, 548 bytes, Stack size 24 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_DecodeFrame68))
<BR><BR>[Stack]<UL><LI>Max Depth = 716 + Unknown Stack Size
<LI>Call Chain = DLT634_5101_SLAVE_DecodeFrame68 &rArr; DLT634_5101_SLAVE_AppProcess &rArr; DLT634_5101_SLAVE_C_SR &rArr; DBWriteValue &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_AppProcess
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_WriteDataToMISI
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_SearchValidFrame
</UL>

<P><STRONG><a name="[308]"></a>DLT634_5101_SLAVE_InitEndReply</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_InitEndReply))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Data1Process
</UL>

<P><STRONG><a name="[31f]"></a>DLT634_5101_SLAVE_Link10Process</STRONG> (Thumb, 384 bytes, Stack size 8 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_Link10Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = DLT634_5101_SLAVE_Link10Process &rArr; DLT634_5101_SLAVE_WriteDataToMISI &rArr; DLT634_5101_SLAVE_WriteData &rArr; MonitoringDataTransmission &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_WriteDataToMISI
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_SlaveFrame10Packet
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_MasterFrame10Packet
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_SendProcess
</UL>

<P><STRONG><a name="[322]"></a>DLT634_5101_SLAVE_Link68Process</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_Link68Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = DLT634_5101_SLAVE_Link68Process &rArr; DLT634_5101_SLAVE_WriteDataToMISI &rArr; DLT634_5101_SLAVE_WriteData &rArr; MonitoringDataTransmission &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_WriteDataToMISI
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_SlaveFrame68Packet
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_SlaveFrame10Packet
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_SetFlagProcess
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_MasterFrame68Packet
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_SendProcess
</UL>

<P><STRONG><a name="[321]"></a>DLT634_5101_SLAVE_MasterFrame10Packet</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_MasterFrame10Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DLT634_5101_SLAVE_MasterFrame10Packet &rArr; DLT634_5101_SLAVE_CKS
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_CKS
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Link10Process
</UL>

<P><STRONG><a name="[324]"></a>DLT634_5101_SLAVE_MasterFrame68Packet</STRONG> (Thumb, 580 bytes, Stack size 24 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_MasterFrame68Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DLT634_5101_SLAVE_MasterFrame68Packet &rArr; DLT634_5101_SLAVE_CKS
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_CKS
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Link68Process
</UL>

<P><STRONG><a name="[30a]"></a>DLT634_5101_SLAVE_ReadAllDataProcess</STRONG> (Thumb, 558 bytes, Stack size 16 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_ReadAllDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DLT634_5101_SLAVE_ReadAllDataProcess &rArr; DLT634_5101_SLAVE_R_YXDATA
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_AllDataEndReply
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_AllDataConReply
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_R_YXDATA
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_R_YCDATA
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Data1Process
</UL>

<P><STRONG><a name="[303]"></a>DLT634_5101_SLAVE_ReadMISIData</STRONG> (Thumb, 414 bytes, Stack size 24 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_ReadMISIData))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = DLT634_5101_SLAVE_ReadMISIData &rArr; DLT634_5101_SLAVE_SearchValidFrame &rArr; DLT634_5101_SLAVE_DecodeFrame68 &rArr; DLT634_5101_SLAVE_AppProcess &rArr; DLT634_5101_SLAVE_C_SR &rArr; DBWriteValue &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_ReadData
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_SearchMonitorFrame
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_SearchValidFrame
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Clock
</UL>

<P><STRONG><a name="[307]"></a>DLT634_5101_SLAVE_RestReply</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_RestReply))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Data1Process
</UL>

<P><STRONG><a name="[304]"></a>DLT634_5101_SLAVE_SendProcess</STRONG> (Thumb, 298 bytes, Stack size 8 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_SendProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = DLT634_5101_SLAVE_SendProcess &rArr; DLT634_5101_SLAVE_Data1Process &rArr; DLT634_5101_SLAVE_WriteDataToMISI &rArr; DLT634_5101_SLAVE_WriteData &rArr; MonitoringDataTransmission &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Data1Process
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_H_Encrypt
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Link68Process
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Link10Process
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Data2Process
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Clock
</UL>

<P><STRONG><a name="[323]"></a>DLT634_5101_SLAVE_SetFlagProcess</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_SetFlagProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DLT634_5101_SLAVE_SetFlagProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_H_SOE
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_H_COS
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Link68Process
</UL>

<P><STRONG><a name="[320]"></a>DLT634_5101_SLAVE_SlaveFrame10Packet</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_SlaveFrame10Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DLT634_5101_SLAVE_SlaveFrame10Packet &rArr; DLT634_5101_SLAVE_CKS
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_CKS
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Link68Process
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Link10Process
</UL>

<P><STRONG><a name="[325]"></a>DLT634_5101_SLAVE_SlaveFrame68Packet</STRONG> (Thumb, 582 bytes, Stack size 24 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_SlaveFrame68Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DLT634_5101_SLAVE_SlaveFrame68Packet &rArr; DLT634_5101_SLAVE_CKS
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_CKS
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Link68Process
</UL>

<P><STRONG><a name="[317]"></a>DLT634_5101_SLAVE_StatusReset</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_StatusReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DLT634_5101_SLAVE_StatusReset
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_DecodeFrame10
</UL>

<P><STRONG><a name="[309]"></a>DLT634_5101_SLAVE_WriteDataToMISI</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, dlt634_5101slave_app.o(i.DLT634_5101_SLAVE_WriteDataToMISI))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = DLT634_5101_SLAVE_WriteDataToMISI &rArr; DLT634_5101_SLAVE_WriteData &rArr; MonitoringDataTransmission &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Data1Process
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_LinkOnTimer
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Link68Process
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Link10Process
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_DecodeFrame68
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_DecodeFrame10
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_Data2Process
</UL>

<P><STRONG><a name="[4bb]"></a>DLT634_5104_SLAVE_AllDataConfReply</STRONG> (Thumb, 228 bytes, Stack size 0 bytes, dlt634_5104slave_app.o(i.DLT634_5104_SLAVE_AllDataConfReply))
<BR><BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAllDataProcess
</UL>

<P><STRONG><a name="[4bc]"></a>DLT634_5104_SLAVE_AllDataEndReply</STRONG> (Thumb, 206 bytes, Stack size 0 bytes, dlt634_5104slave_app.o(i.DLT634_5104_SLAVE_AllDataEndReply))
<BR><BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAllDataProcess
</UL>

<P><STRONG><a name="[350]"></a>DLT634_5104_SLAVE_DecodeIFrame</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, dlt634_5104slave_app.o(i.DLT634_5104_SLAVE_DecodeIFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 1012 + Unknown Stack Size
<LI>Call Chain = DLT634_5104_SLAVE_DecodeIFrame &rArr; DLT634_5104_SLAVE_StopDTOper &rArr; DLT634_5104_SLAVE_AppProcess &rArr; DLT634_5104_SLAVE_FixedParaProcess &rArr; DBWriteValue &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_AppProcess
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_StopDTOper
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_SetTimer
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_PeerNoAckNumProcess
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_KillTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_SearchValidFrame
</UL>

<P><STRONG><a name="[355]"></a>DLT634_5104_SLAVE_DecodeSFrame</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, dlt634_5104slave_app.o(i.DLT634_5104_SLAVE_DecodeSFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 988 + Unknown Stack Size
<LI>Call Chain = DLT634_5104_SLAVE_DecodeSFrame &rArr; DLT634_5104_SLAVE_AppProcess &rArr; DLT634_5104_SLAVE_FixedParaProcess &rArr; DBWriteValue &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_AppProcess
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_PeerNoAckNumProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_SearchValidFrame
</UL>

<P><STRONG><a name="[356]"></a>DLT634_5104_SLAVE_DecodeUFrame</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, dlt634_5104slave_app.o(i.DLT634_5104_SLAVE_DecodeUFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 980 + Unknown Stack Size
<LI>Call Chain = DLT634_5104_SLAVE_DecodeUFrame &rArr; DLT634_5104_SLAVE_AppProcess &rArr; DLT634_5104_SLAVE_FixedParaProcess &rArr; DBWriteValue &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_AppProcess
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_S104SendCtrlFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_SearchValidFrame
</UL>

<P><STRONG><a name="[4bd]"></a>DLT634_5104_SLAVE_InitEndReply</STRONG> (Thumb, 206 bytes, Stack size 0 bytes, dlt634_5104slave_app.o(i.DLT634_5104_SLAVE_InitEndReply))
<BR><BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData1Process
</UL>

<P><STRONG><a name="[353]"></a>DLT634_5104_SLAVE_KillTimer</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, dlt634_5104slave_app.o(i.DLT634_5104_SLAVE_KillTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DLT634_5104_SLAVE_KillTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_SearchValidFrame
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_S104SendCtrlFrame
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_LinkSendProcess
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_LinkOnTimer
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_DecodeIFrame
</UL>

<P><STRONG><a name="[34f]"></a>DLT634_5104_SLAVE_LinkOnTimer</STRONG> (Thumb, 714 bytes, Stack size 16 bytes, dlt634_5104slave_app.o(i.DLT634_5104_SLAVE_LinkOnTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 996 + Unknown Stack Size
<LI>Call Chain = DLT634_5104_SLAVE_LinkOnTimer &rArr; DLT634_5104_SLAVE_StopDTOper &rArr; DLT634_5104_SLAVE_AppProcess &rArr; DLT634_5104_SLAVE_FixedParaProcess &rArr; DBWriteValue &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_StopDTOper
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_SetTimer
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_S104SendCtrlFrame
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_KillTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_Clock
</UL>

<P><STRONG><a name="[35a]"></a>DLT634_5104_SLAVE_LinkSendProcess</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, dlt634_5104slave_app.o(i.DLT634_5104_SLAVE_LinkSendProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DLT634_5104_SLAVE_LinkSendProcess &rArr; DLT634_5104_SLAVE_WriteDataToMISI &rArr; DLT634_5104_SLAVE_WriteData &rArr; w5500_tcpserver_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_WriteDataToMISI
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_SetTimer
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_KillTimer
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData1Process
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_SendProcess
</UL>

<P><STRONG><a name="[34b]"></a>DLT634_5104_SLAVE_NetTest</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, dlt634_5104slave_app.o(i.DLT634_5104_SLAVE_NetTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DLT634_5104_SLAVE_NetTest &rArr; DLT634_5104_SLAVE_CheckLink
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_AppInitReset
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_CheckLink
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_Clock
</UL>

<P><STRONG><a name="[351]"></a>DLT634_5104_SLAVE_PeerNoAckNumProcess</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, dlt634_5104slave_app.o(i.DLT634_5104_SLAVE_PeerNoAckNumProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DLT634_5104_SLAVE_PeerNoAckNumProcess &rArr; DLT634_5104_SLAVE_BackupProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_BackupProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_DecodeSFrame
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_DecodeIFrame
</UL>

<P><STRONG><a name="[34c]"></a>DLT634_5104_SLAVE_ReadMISIData</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, dlt634_5104slave_app.o(i.DLT634_5104_SLAVE_ReadMISIData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1052 + Unknown Stack Size
<LI>Call Chain = DLT634_5104_SLAVE_ReadMISIData &rArr; DLT634_5104_SLAVE_SearchValidFrame &rArr; DLT634_5104_SLAVE_DecodeIFrame &rArr; DLT634_5104_SLAVE_StopDTOper &rArr; DLT634_5104_SLAVE_AppProcess &rArr; DLT634_5104_SLAVE_FixedParaProcess &rArr; DBWriteValue &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_SearchValidFrame
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_ReadData
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_SearchMonitorFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_Clock
</UL>

<P><STRONG><a name="[4c1]"></a>DLT634_5104_SLAVE_ResetProcesseReply</STRONG> (Thumb, 206 bytes, Stack size 0 bytes, dlt634_5104slave_app.o(i.DLT634_5104_SLAVE_ResetProcesseReply))
<BR><BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData1Process
</UL>

<P><STRONG><a name="[357]"></a>DLT634_5104_SLAVE_S104SendCtrlFrame</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, dlt634_5104slave_app.o(i.DLT634_5104_SLAVE_S104SendCtrlFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DLT634_5104_SLAVE_S104SendCtrlFrame &rArr; DLT634_5104_SLAVE_WriteDataToMISI &rArr; DLT634_5104_SLAVE_WriteData &rArr; w5500_tcpserver_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_WriteDataToMISI
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_SetTimer
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_KillTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_LinkOnTimer
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_DecodeUFrame
</UL>

<P><STRONG><a name="[361]"></a>DLT634_5104_SLAVE_SearchValidFrame</STRONG> (Thumb, 1016 bytes, Stack size 24 bytes, dlt634_5104slave_app.o(i.DLT634_5104_SLAVE_SearchValidFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036 + Unknown Stack Size
<LI>Call Chain = DLT634_5104_SLAVE_SearchValidFrame &rArr; DLT634_5104_SLAVE_DecodeIFrame &rArr; DLT634_5104_SLAVE_StopDTOper &rArr; DLT634_5104_SLAVE_AppProcess &rArr; DLT634_5104_SLAVE_FixedParaProcess &rArr; DBWriteValue &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_SetTimer
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_KillTimer
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_DecodeUFrame
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_DecodeSFrame
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_DecodeIFrame
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_ReadMISIData
</UL>

<P><STRONG><a name="[34e]"></a>DLT634_5104_SLAVE_SendProcess</STRONG> (Thumb, 468 bytes, Stack size 16 bytes, dlt634_5104slave_app.o(i.DLT634_5104_SLAVE_SendProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = DLT634_5104_SLAVE_SendProcess &rArr; ReadData2Process &rArr; DLT634_5104_SLAVE_IdleProcess &rArr; file_operate_DirCall &rArr; file_operate_DirRead &rArr; open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData2Process
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData1Process
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_LinkSendProcess
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_Clock
</UL>

<P><STRONG><a name="[354]"></a>DLT634_5104_SLAVE_SetTimer</STRONG> (Thumb, 272 bytes, Stack size 12 bytes, dlt634_5104slave_app.o(i.DLT634_5104_SLAVE_SetTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DLT634_5104_SLAVE_SetTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_SearchValidFrame
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_S104SendCtrlFrame
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_LinkSendProcess
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_LinkOnTimer
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_DecodeIFrame
</UL>

<P><STRONG><a name="[352]"></a>DLT634_5104_SLAVE_StopDTOper</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, dlt634_5104slave_app.o(i.DLT634_5104_SLAVE_StopDTOper))
<BR><BR>[Stack]<UL><LI>Max Depth = 980 + Unknown Stack Size
<LI>Call Chain = DLT634_5104_SLAVE_StopDTOper &rArr; DLT634_5104_SLAVE_AppProcess &rArr; DLT634_5104_SLAVE_FixedParaProcess &rArr; DBWriteValue &rArr; rt_multi_common_data_save_value_to_fram &rArr; ParameterCheck &rArr; DBWriteSOE
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_AppProcess
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_StopLink
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_LinkOnTimer
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_DecodeIFrame
</UL>

<P><STRONG><a name="[342]"></a>DLT634_5104_SLAVE_StoreIN</STRONG> (Thumb, 786 bytes, Stack size 272 bytes, dlt634_5104slave_app.o(i.DLT634_5104_SLAVE_StoreIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = DLT634_5104_SLAVE_StoreIN
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_AppProcess
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_Reply
</UL>

<P><STRONG><a name="[4ba]"></a>ReadAllDataProcess</STRONG> (Thumb, 552 bytes, Stack size 16 bytes, dlt634_5104slave_app.o(i.ReadAllDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ReadAllDataProcess &rArr; DLT634_5104_SLAVE_ReadYxData
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_AllDataEndReply
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_AllDataConfReply
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_ReadYxData
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_ReadYcData
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData1Process
</UL>

<P><STRONG><a name="[364]"></a>ReadData1Process</STRONG> (Thumb, 1036 bytes, Stack size 16 bytes, dlt634_5104slave_app.o(i.ReadData1Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ReadData1Process &rArr; DLT634_5104_SLAVE_LinkSendProcess &rArr; DLT634_5104_SLAVE_WriteDataToMISI &rArr; DLT634_5104_SLAVE_WriteData &rArr; w5500_tcpserver_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_AppInitReset
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveBackUpData
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAllDataProcess
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_ResetProcesseReply
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_LinkSendProcess
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_InitEndReply
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_R_SOE
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_R_COS
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_H_SOE
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_H_COS
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_SendProcess
</UL>

<P><STRONG><a name="[365]"></a>ReadData2Process</STRONG> (Thumb, 444 bytes, Stack size 16 bytes, dlt634_5104slave_app.o(i.ReadData2Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = ReadData2Process &rArr; DLT634_5104_SLAVE_IdleProcess &rArr; file_operate_DirCall &rArr; file_operate_DirRead &rArr; open &rArr; dfs_file_open &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_R_NVA
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_R_FEvent
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_IdleProcess
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_H_NVA
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_H_FEvent
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5104_SLAVE_SendProcess
</UL>

<P><STRONG><a name="[4bf]"></a>SaveBackUpData</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, dlt634_5104slave_app.o(i.SaveBackUpData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SaveBackUpData
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData1Process
</UL>

<P><STRONG><a name="[36d]"></a>DLT634_ChannelToMonitor_AddError</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, channel_monitor.o(i.DLT634_ChannelToMonitor_AddError))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = DLT634_ChannelToMonitor_AddError &rArr; DLT634_5101_SLAVE_WriteData &rArr; MonitoringDataTransmission &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_WriteData
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_CKS
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_DecodeFrame11
</UL>

<P><STRONG><a name="[36e]"></a>DLT634_ChannelToMonitor_SLAVE_CKS</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, channel_monitor.o(i.DLT634_ChannelToMonitor_SLAVE_CKS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DLT634_ChannelToMonitor_SLAVE_CKS
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_SlaveFrame12Response
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_SlaveFrame11Response
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_SlaveFrame01Response
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_CheckFram11Valid
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_AddError
</UL>

<P><STRONG><a name="[371]"></a>DLT634_ChannelToMonitor_SLAVE_CheckFram11Valid</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, channel_monitor.o(i.DLT634_ChannelToMonitor_SLAVE_CheckFram11Valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DLT634_ChannelToMonitor_SLAVE_CheckFram11Valid &rArr; DLT634_ChannelToMonitor_SLAVE_CKS
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_CKS
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_SearchMonitorFrame
</UL>

<P><STRONG><a name="[372]"></a>DLT634_ChannelToMonitor_SLAVE_DecodeFrame11</STRONG> (Thumb, 352 bytes, Stack size 16 bytes, channel_monitor.o(i.DLT634_ChannelToMonitor_SLAVE_DecodeFrame11))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = DLT634_ChannelToMonitor_SLAVE_DecodeFrame11 &rArr; DLT634_ChannelToMonitor_SLAVE_SlaveFrame12Response &rArr; DLT634_5101_SLAVE_WriteData &rArr; MonitoringDataTransmission &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_SlaveFrame12Response
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_SlaveFrame11Response
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_AddError
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_SearchMonitorFrame
</UL>

<P><STRONG><a name="[375]"></a>DLT634_ChannelToMonitor_SLAVE_SlaveFrame01Response</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, channel_monitor.o(i.DLT634_ChannelToMonitor_SLAVE_SlaveFrame01Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = DLT634_ChannelToMonitor_SLAVE_SlaveFrame01Response &rArr; DLT634_5101_SLAVE_WriteData &rArr; MonitoringDataTransmission &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_WriteData
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_CKS
</UL>
<BR>[Called By]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_channel_monitor_clock
</UL>

<P><STRONG><a name="[373]"></a>DLT634_ChannelToMonitor_SLAVE_SlaveFrame11Response</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, channel_monitor.o(i.DLT634_ChannelToMonitor_SLAVE_SlaveFrame11Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = DLT634_ChannelToMonitor_SLAVE_SlaveFrame11Response &rArr; DLT634_5101_SLAVE_WriteData &rArr; MonitoringDataTransmission &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_WriteData
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_CKS
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_DecodeFrame11
</UL>

<P><STRONG><a name="[374]"></a>DLT634_ChannelToMonitor_SLAVE_SlaveFrame12Response</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, channel_monitor.o(i.DLT634_ChannelToMonitor_SLAVE_SlaveFrame12Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = DLT634_ChannelToMonitor_SLAVE_SlaveFrame12Response &rArr; DLT634_5101_SLAVE_WriteData &rArr; MonitoringDataTransmission &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_5101_SLAVE_WriteData
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_CKS
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DLT634_ChannelToMonitor_SLAVE_DecodeFrame11
</UL>

<P><STRONG><a name="[583]"></a>cJSON_New_Item</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cjson.o(i.cJSON_New_Item))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cJSON_New_Item &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
</UL>

<P><STRONG><a name="[582]"></a>cJSON_strdup</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cjson.o(i.cJSON_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cJSON_strdup &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[652]"></a>ensure</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, cjson.o(i.ensure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ensure
</UL>
<BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow2gt
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
</UL>

<P><STRONG><a name="[653]"></a>pow2gt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cjson.o(i.pow2gt))
<BR><BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
</UL>

<P><STRONG><a name="[73c]"></a>print_array</STRONG> (Thumb, 578 bytes, Stack size 72 bytes, cjson.o(i.print_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = print_array &rArr;  print_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[73e]"></a>print_number</STRONG> (Thumb, 530 bytes, Stack size 56 bytes, cjson.o(i.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = print_number &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[73f]"></a>print_object</STRONG> (Thumb, 1044 bytes, Stack size 88 bytes, cjson.o(i.print_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = print_object &rArr;  print_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[741]"></a>print_string</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, cjson.o(i.print_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = print_string &rArr; print_string_ptr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[740]"></a>print_string_ptr</STRONG> (Thumb, 446 bytes, Stack size 40 bytes, cjson.o(i.print_string_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = print_string_ptr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
</UL>

<P><STRONG><a name="[585]"></a>print_value</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, cjson.o(i.print_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = print_value &rArr; print_object &rArr;  print_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
</UL>

<P><STRONG><a name="[581]"></a>suffix_object</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cjson.o(i.suffix_object))
<BR><BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToArray
</UL>

<P><STRONG><a name="[73d]"></a>update</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cjson.o(i.update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = update &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
</UL>

<P><STRONG><a name="[2e2]"></a>Struct_To_Json</STRONG> (Thumb, 410 bytes, Stack size 32 bytes, jsonfileoperation.o(i.Struct_To_Json))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = Struct_To_Json &rArr; write &rArr; fd_get &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr;  list_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_Print_cJSON
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelesignalCfg_StructToJson
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelemetryCfg_StructToJson
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelecontrolCfg_StructToJson
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterCfg_StructToJson
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InherentParaCfg_StructToJson
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedValueCfg1_StructToJson
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateFactorCfg_StructToJson
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_JsonFile
</UL>

<P><STRONG><a name="[23f]"></a>_tm_carry</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[8c1]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[8c5]"></a>dadd_zerodenorm</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[8af]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[8b1]"></a>daddsub_denorm</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[8c2]"></a>dsub_uncommon_first</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[8b0]"></a>dsub_zerodenorm</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[243]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[87]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[252]"></a>_local_sscanf</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __ARM_scalbn &rArr; __dunder &rArr; __fpl_exception &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[272]"></a>_fp_value</STRONG> (Thumb, 508 bytes, Stack size 88 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
